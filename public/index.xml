<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>一言</title>
    <link>http://blog.zhouyiyan.cn/</link>
    <description>Recent content on 一言</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>true</copyright>
    <lastBuildDate>Sat, 26 Aug 2017 17:36:53 +0800</lastBuildDate>
    
	<atom:link href="http://blog.zhouyiyan.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>博客引擎换成Hugo</title>
      <link>http://blog.zhouyiyan.cn/blog/move-to-hugo/</link>
      <pubDate>Sat, 26 Aug 2017 17:36:53 +0800</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/move-to-hugo/</guid>
      <description>两年没有更了，自从进了亿贝，775的Hard模式搞得我没有时间再拾掇自己的网站。（好吧，也许我只是懒……）这次重更也几乎是机缘巧合。我以前是做文档中心成长起来，后来博客用了Gor转静态Markdown到HTML。所以上个月接到一个做文档中心任务的时候，我很自然的把市面上静态网站生成器都研究了一把，最后聚焦到Hugo和Docsify。
Hugo类似Gor，用Go语言做模板引擎静态转换Markdown并配合主题生成前端资源，速度快，社区主题非常多，而且制作程度都很精良，对前段没有任何限制。Docsify则走了一条完全不同的道路，利用JS动态渲染Markdown，也提供了常用插件，但是主题仅限CSS，并没有很多扩展性，也很少。
因为Docsify的主题都不够大气和专业，而且有些Vuejs粉的感觉，所以作为Reactjs的铁杆迷弟，果断弃之。最终也没有使用Hugo，尽管使用了看起来非常专业的docdock主题，项目经理看了也没有反对，但是作为产品的一部分，和现有产品还是有些违和感，所以挣扎了半天，用Docsify的方案写了一个。
没有在工作上用到Hugo实在是个缺憾，所以我决定把我的博客给迁移到Hugo上，一不浪费，二也算是践行我一贯的折腾风格。整个迁移过程非常顺利，因为个人气质的关系（装X），我选择了极简风格的Osprey，所有文章只要拷贝一下就好了。同样因为极简风格，没有分类，没有标签，只有时间顺序，也省得我费时间整理那些数据。
接下来还有两件事，把我的Logo重新设计一下，暂时就丢了Osprey在上面。另外把我过去的一些项目再整理整理，拿出来展示一下。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://blog.zhouyiyan.cn/about/</link>
      <pubDate>Sat, 26 Aug 2017 00:10:10 +0800</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/about/</guid>
      <description>我目前和家人住在上海，这里也许空气质量一般，交通状况较差，但不缺便利店、好喝的咖啡和DQ，所以我喜欢住在这里。也许未来会去更远的地方走走，但还不确定。
我喜欢读书，最喜欢向人推荐摩托车修车艺术，叔本华的幸福论也很喜欢，尤其喜欢被改编成电影的小说，指环王、饥饿游戏等等。</description>
    </item>
    
    <item>
      <title>五点半的早晨</title>
      <link>http://blog.zhouyiyan.cn/blog/five-in-the-morning/</link>
      <pubDate>Thu, 19 Nov 2015 06:23:38 +0800</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/five-in-the-morning/</guid>
      <description>“今天我还有哪些事情要干”，带着这样的想法，我醒了。
五点半的早晨是不一样的。天基本还是黑的，只有晃眼的路灯散射出来的光。路上有几辆出租车，也许是晚班后匆匆回家，或是赶着去等早起的客人。还有几辆卡车和大巴士，飞快的穿越十字路口。是的，路上除了我，也许没有其他私家车了。
高架上的路灯伸向远方，建筑物上的灯闪烁着，我有种晚上回家的感觉。大转盘上，路灯围成一个大光环，在那里旋转。我和别的出租车一样，飞快的超过一辆又一辆小面包，有种洛杉矶的感觉。突然，高架上的路灯像是说好了似的，一齐灭了，只剩下那一团团远光灯的光柱，还在照亮着前进的方向。
错过了南浦大桥，这个最佳的日出观测点，浦东的路灯倒还是亮的，此时的天空却已经微微发灰。车里播放的是初音版本的樱之雨，放到高潮时，内心激荡。哦，也许我已经离开校园太久了，但是成长的喜悦，这种心情是感受得到的，也是永远不会变的。
电梯里，玻璃中映出的脸，还有些睡眼惺忪，可是我已经等不及开始新一天的工作了。
“早！”</description>
    </item>
    
    <item>
      <title>我的第一个PaaS、外行人和Kubernates</title>
      <link>http://blog.zhouyiyan.cn/blog/2015-10-25-mini-paas-and-outsider-opinion/</link>
      <pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2015-10-25-mini-paas-and-outsider-opinion/</guid>
      <description>做PaaS也有将近八个月了，作为在亿贝第一年的目标，写一个自己的PaaS系统一直是我不敢想的。不过渐渐的，时机也差不多成熟了。从最开始的CMS客户端，PaaS和IaaS的API客户端，一个用来做资源迁移的略带智能的应用，一个高危的LB应用，我几乎重写、改进、使用和理解了我目前所维护系统各个方面。然后我发现两个致命问题，我所维护的系统并不是PaaS，只是provisioning；然后公司的PaaS又是高度定制化的，完全不像我过去所接触的诸如heroku、GCE或者Asure。于是，我决定要仿照Cloud Foundry的概念，写一个自己的PaaS。PaaS必须要围绕应用（很奇怪，并不是围绕平台的），大致有部署（安装应用）、维护（监控、scalaing）和路由（访问应用，灰度发布）组成，应用可以定义自己所需要的服务，由PaaS负责提供服务，服务本身可以是一些按需启动的应用。目前我已经完成了单机的部署，仿照go语言管理包的方式，从Github上下载代码，然后安装，并注入应用启动所需的参数。接下来，我会完成应用注册，实现一个ElasticSearch三副本的自动部署，并且每个ES节点启动时，其他节点的IP自动注入。希望年底前能完成一个可以发布的版本！
今天，家里的门坏了，简单来说，就是门锁和挡板不匹配，不是关不上就关不牢，岳父大人自己一个人在那里琢磨，不让我们插手。后来，我从外行人的角度，提了一些意见，比如说把挡板拆下来矫正，在挡板里面垫纸片改善门的松紧问题。说起来，如果有人跟我建议，API不稳定就重试，超时就多等会儿之类的，我以前肯定是不能接受的，太外行了。但实际上，有很多问题就真的能够解决，而这些方案往往不是内行人的思路，而我们真的需要一些外行人的second opinion。
周五跟Jian一起吃饭，深入理解了下未来的发展方向，并深深感受到Kubernates对我们的冲击，有种随时被取代的感觉。回来以后，我打开了一个Kubernates的网页，下决心要好好学习一番。但是随着了解的深入，我产生了一个疑问，Kubernates真的是PaaS杀手么？如果说Docker是目前最先进的虚拟化技术，而Kubernates又能用Pod来抽象应用栈，那么问题就是，Pod是最先进的应用抽象技术么？答案我还在摸索中，也许等我自己的PaaS做好以后再做一个比较，不过就目前而言，Kubernates更像是IaaS杀手，如果IaaS团队的兄弟不急的话，PaaS团队自然也会有类似的应对之道，谁知道呢。
最近书房重新换了布局，心情也随之变换，从美西回来以后，终于再次进入状态。</description>
    </item>
    
    <item>
      <title>懒是一种美德</title>
      <link>http://blog.zhouyiyan.cn/blog/2015-10-14-lazy-is-virtue/</link>
      <pubDate>Wed, 14 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2015-10-14-lazy-is-virtue/</guid>
      <description>看到oschina上的一篇文章（懒Redis是更好的Redis）颇有些感受，简单来说是把原本时间复杂度高的Redis命令用异步的方式完成了，中间还尝试过延迟、增量、数据结构优化等操作。延迟或者异步，这种非阻塞的方式，对于资源释放来说是一种很好的方法，虽然并没有实际提高系统吞吐量，但能够显著提高系统响应，对于用户来说，系统感觉变快了。在实际工作中我也遇到过类似的应用，比如说在云环境中，为了提高资源利用率而进行的scale down，机器升级或者迁移，都涉及释放计算资源。资源释放并不是简单的操作，牵涉到很多设备和配置的改动。原先释放一个虚拟机资源的可能需要十几分钟，后来采用异步的方式，先禁用该虚拟机，然后放进一个池子里，如果需要，可以根据需求选择并重新启用，超过一段时间后再后台释放。采用异步的方法后，资源释放非常快，几乎是瞬间完成，而且成功率很高，即使有错误也可以后台忽略或者修复。当然这种方法在分层系统中，和下游系统自身的缓存机制如何结合也是很巧妙的，处理不当会造成资源浪费。
这让我想起曾经拼命搞专利的那段时间，一些看似简单的工程化方法，运用在不同的场合和领域，往往能解决原本非常棘手的问题。
另外最近比较累，显然没有从之前的旅行疲劳中恢复，加上新的突发事件，感觉很不顺。</description>
    </item>
    
    <item>
      <title>TODO的弊端</title>
      <link>http://blog.zhouyiyan.cn/blog/2015-05-14-todos-limitation/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2015-05-14-todos-limitation/</guid>
      <description>我一直使用Wunderlist和四象限原则来管理我每天的任务。新的任务根据重要程度，被分配在今天，明天，或者下周再决定。这个系统工作的一直很好，基本上不会有需要熬夜加班的情况。可是也有例外，有些小的项目会有很多的小任务，通常我会利用Wunderlist开一个新的组，然后把这些任务扔进去。问题是，这些小任务并没有出现在我每天的列表里面，所以很容易遗忘掉。所以，待办任务清单其实蒙蔽了我，让我有种每天完成很多事情的错觉，事实上重要但不紧急的事情并没有按部就班的进行。
这个礼拜我上了两天的七个习惯的培训。其实我一开始是抗拒的，这么大年纪再洗脑什么真讨厌。可是架不住老师讲得好，而且有些方法确实不错，比如说周计划表。一般来说项目上都以两周或者一个月为一个周期，跟踪项目的进展，而每个人大多使用待办任务清单来跟踪每天的进展，这两者之间，周计划表填补了空档。有了周计划表，重要的事件可以划分到周，然后再通过每天的计划得以落实，比单纯的每日清单要有效，而且更易于理解全局。
我尝试着给自己剩下的三天做了下计划，把原本重要的事情都提上了上来，那些不重要的事情则尽量拖，不到老板催是坚决不干的。效果还不错，昨天完成了一些重要的任务，也发现了一些问题：
 首先我任务安排的太紧，搞得像课程表一样，其实每件事情都拖了一点时间。下周安排可以安排的松一点，或者估算时间多一些。 遇到中间插出来的事情，真的很难判断是不是重要。每个要我时间的人都显得很紧急，很重要，可是对我来说是么？有时候帮了别人的忙，其实别人最后也不觉得什么，说句冠冕堂皇的谢谢，一点感觉也没有。 计划不现实也是个问题，我希望早上锻炼身体，可是公司的免费早餐8点才来。  周计划似乎是个不错的方法，我在做着观察看看。</description>
    </item>
    
    <item>
      <title>工作风格变了</title>
      <link>http://blog.zhouyiyan.cn/blog/culture-change/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/culture-change/</guid>
      <description>换工作以后一直就没有机会再写博客，是真的没有时间。从前开发内部系统，测试、上线、支持，都有一套稳定的流程和团队支持，所以作为开发人员，几乎没什么压力。现在则完全不同，大部分工作都要靠自己。因为是遗留系统，单元测试的风格很怪，覆盖率一直上不去。测试也基本只有一个人扛，而且主要以API测试和回归测试为主，这类测试很慢。上线部署相对简单。每次上线都有些紧张，昨天就出了一个状况，我只好赶着五一前修好。
除了维护系统之外，还要开发一些辅助系统。这类系统的需求大多很模糊，因为只是自己用，所以界面什么都无所谓，只要求快。最大的感受就是很多功能其实已经有人提供了，所谓的API生态圈，这时候就要靠人品，我也是问了很多人，才发现自己负责的一个项目，其实60%的功能都可以靠调用别的系统达成。
总之，我还在适应中，已经提交了自己的第一个功能、第一个补丁、第一个因为补丁出问题而做的hotfix，目前正在做自己第一个独立系统，希望一切顺利～</description>
    </item>
    
    <item>
      <title>斗蛐蛐</title>
      <link>http://blog.zhouyiyan.cn/blog/cricket-fighting/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/cricket-fighting/</guid>
      <description>LD的姑父是个很有意思的人，每次碰到我们就会讲一些过去精彩的故事。春节走亲戚的时候又碰到姑父，他兴致勃勃地和我们讲起他从前斗蛐蛐的经历。过去在上海斗蛐蛐，就和外地斗鸡，现在养鸽子是一样的，算是一种带赌博性质的比赛，少则几十，多则几万的都有。这在过去那个36元工资时代，算是比较刺激的。姑父因为蟋蟀养的好，结识了很多当时很有名的上海“流氓”，其中还有几个有名有姓的大流氓。照现在的话说，姑父算是技术出身。每次谈起斗蟋蟀，姑父都感慨不已，甚至还提到曾经有一次为了同伴进班房。姑父算是活得相当精彩的人，下过黑龙江，承包过工厂，混过社会，进过局子，现在养养鸽子，养养狗，炒炒股票，生活的很惬意。</description>
    </item>
    
    <item>
      <title>Farewell IBM</title>
      <link>http://blog.zhouyiyan.cn/blog/farewell-ibm/</link>
      <pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/farewell-ibm/</guid>
      <description>我是摩羯座的，所以按照我的个性，写个farewell letter肯定都是要按部就班的，总归得看过几十篇范文，搞清楚各种经验法则，再配上完美的布局和格式，来场轰轰烈烈的farewell。
可情绪来了的时候，就什么也顾不上了。
我是05年进入IBM工作的，到现在差不多快十年了，手上有个CDL十周年纪念的杯子，而最近CDL刚过完十五岁生日，时间算长的。刚参加工作的时候，听到的都是CDL开创者们的故事，张博，你懂的。先后在三个不同的部门，前后五个团队，恰好也是五个经理手下工作，做过技术支持、测试、项目经理、开发，当过演员、导演，组织过会议，参加过几个委员会，有几篇专利。总的来说混得一般，基本没本ER过，也没直接服侍过二线，无数的proposal没几个被采纳，给老板印象不错但就是不见声响，所以当最后二线经理问我要不要一起努力看看能不能加薪留下，我婉言谢绝了，因为我实在混得一般啊。
很遗憾没有在IBM留更多的时间。要知道我的理想就是早上能送小孩上学、送LD上班，白天有车位，中午有牌打，下午能早走接LD回家，晚上老外及时上线，一周能做四休三，20%时间能忙自己喜欢的项目，请假随时能批，公司股票随便买，每个月工资高一点，每年能出国培训几个礼拜，项目上自己说了算……这些要求不算过分吧，其实IBM已经能满足很多条了，在业界算是良心企业。这个就好像车子，自动挡、自动头灯、感应雨刮、免钥匙进入启动、座椅通风加热、一键升窗、全景天窗、四轮驱动，用惯了，所以要换车是很难的，没有这些肯定不习惯。扯远了，尽管在这个pure blue不再受宠的年代，我还是要感谢IBM，永远记住自己曾经是pure blue。
要感谢的人也很多。Bluemix的兄弟姐妹们，抱歉离开这个团队，你们以后多辛苦，我会继续关注你们的。D同学是我最想感谢的人，在某个关键的时刻，算是我唯一一次超弱的时候，给我一记强心针（话说那个你是怎么买到的，我后来又去了一次，人家死活不卖给我），也让我认识了张大妈，开始剁手之旅。H同学一直给我很多好吃的，我前台的问题都是她帮我解决的。牌友C姐、L和T，咱们打了将近四年牌有没有，可能再也找不到人打了。Z同学做经理之前，我就很看好他，这几年也得了很多照顾。FC同学是唯一听了我的话去学习如何修摩托车的，我也很看好你哦。除此之外，最小函数，森林人，还有ETI、IT和设计部门的兄弟姐妹们，我会想念你们的，我不得不自恋的说，英雄相惜。
我是摩羯座的，偏水瓶，所以我没有选择传统的farewell letter，也许是怕看到煽情的内容，或者因为过年的关系，收到的回复少了（我也会心理不平衡），反正我认识的人是越来越少了。我觉得，真正关注我的人，应该会看到这封信的，sooner or later。
另外，不得不叹服大公司的效率，六点半了，我的VPN已经失效，需要寻找新的翻墙工具了。</description>
    </item>
    
    <item>
      <title>饥饿游戏读后感</title>
      <link>http://blog.zhouyiyan.cn/blog/after-the-hunger-games/</link>
      <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/after-the-hunger-games/</guid>
      <description>这不是一篇剧透文……我说“剧透“了么？总之，为了赶在饥饿游戏3的电影出来之前，领略小说的风采，我利用LD加班的时间，把小说看完了，结果没想到电影只是3的上半部。无论如何，第三部是很精彩的，根据广播里的，凯特尼斯那声皮塔的呼叫，多半是停在了皮塔回来的那个时间点。嗯，这是一片厚颜无耻的剧透文。
虽然小说的作者是一名儿童文学作家，但饥饿游戏其实讲述了一个爱情故事，很惊悚，不过我很难想象，如果没有电影人物的设定，我能如何看完这个冗长的小说。真的，曾经第二部里面好几个章节的文字，在电影里面其实10分钟就带过了。不过真正好看的是第三部，一切都将在这里终结。
扯远了，回到爱情这个主题上，凯特尼斯、皮塔和盖尔的三角恋，非常符合爱情剧终，A喜欢B，B喜欢C，C以为自己喜欢B，可最终喜欢的可能是D，然后B发现自己最终喜欢的是A，然后A和B从此过上幸福的生活。芬尼克斯是个例外，他喜欢的是安妮，至于为什么，小说没有讲得很细，但也算凯特尼斯比较喜欢的一个人，也是我比较喜欢的一个角色，可不受作者的待见，希望电影能多些戏份。有的时候我很感叹，一个给了这么多笔墨的角色，咋坚持不到最后了呢？不过最令我疑惑的是皮塔和盖尔，这对情敌的较量。一个是青梅竹马，一个是情痴，怎么看都是势均力敌的，当然电影更加青睐皮塔，不过盖尔在第三部的戏份要远远多过皮塔，而且从人物的发展上，尽管盖尔和皮塔在第三部都有重大的人生转折，盖尔的变化更大，也很“自然”的在这场情敌之战中落败。盖尔这个人真的很奇怪，帅哥，爱吃醋，生活基本幸福，也就受了一顿皮鞭，可比谁都更具反抗精神，最后跟着嘲笑鸟一步登天，一点没有屌丝逆袭，倒满是投机分子的感觉，如果不是大表姐夫的身份，也许只能够给我留下很负面的印象。
不过真正让这个爱情故事升华的是其中的惊悚成分。首先是黑暗历史的部分，这和海贼王那失去的一百年很类似，给人留下无限的遐想。过去的七十五年，真正记得这段历史的也没有多少人了，包括斯诺总统，包括Mags，但基本事实是，十三区叛乱失败，Capital举行饥饿游戏长达七十五年，牺牲1749人（其中有一年48人参赛）。十三区为了种群多样性而接纳十二区900多难民的设定，也让我笑翻了。记得哪里看过，一个种群存活的最小数量是4000，不过这多半不是建立在一夫一妻一个小孩的基础上的，所以十三区的生活，细想来，要多乱才行啊。其次，斯诺和科恩也是很有趣的一对，其实两个人都是傀儡，虽然大权在握，但比起隐藏在背后的利益集团，两个人的命运显得十分可悲。最后，凯特尼斯的精神状态也是很值得期待的部分，很难说她什么时候是清醒的，什么时候是疯狂的，总之这对演员的要求非常高，我很期待电影中的表现。
无论如何，小说对我来说已经结束了，电影的第三部才刚刚开始。指环王已经证明了，先看电影，在看小说，最后看电影剩下的部分是很有效率的，因为电影给读者设定了丰富的任务形象，每每看到惊险的场景，我都情不自禁的在脑中刻画出电影角色在这种场景中的样子，十分逼真。小说也给我提供了丰富的信息，人物的关系，虽然在电影画面上只是几分钟的时间，我知道其实他们已经发生了天翻地覆的变化。
LD说她从没看过饥饿游戏，所以对这部电影也没有十分的兴趣。当我感慨或者大笑的时候，LD总是投来一副‘此人无可救药’的表情，不过我心里偷着乐。
另外，我昨天抱着箱子离开了公司，本以为会有什么特殊的心情，但一切都很平常无奇，太futuu了。</description>
    </item>
    
    <item>
      <title>论孤独</title>
      <link>http://blog.zhouyiyan.cn/blog/about-solitary/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/about-solitary/</guid>
      <description>叔本华在幸福论中说孤独等同于具备了伟大品质，闲暇才是最大的幸福。程序员们，你们有福了。我不打算做搬运工，只想作为程序员记录下自己的一些体会。
首先人就是有分别的。我很早就认识到这点，从我一开始的强人日记就可以看出我对这个问题的重视程度。摩托车维修艺术也告诉我们，高品质本就是存在的，而追寻高品质的这种行为，区分了人的不同，而程序员本就应该是不断追求高质量代码的一类人。也难怪，这本书能够成为程序员所信奉的圣经。（当然程序员本身哲学书读得少可能也是一种诱因:)。）而孤独则是赋予具备伟大品质人的财富，换句话说程序员当宅男不丢人，说笑。
不要再跟我说什么“思想碰撞出火花了”。我经常听到这样的话，大概意思就是让我们多和他人交流，在沟通中碰撞出新的火花。这种话说给走管理路线的人也就罢了，拿来忽悠技术路线的我们，岂不是把我们的智商和他们拉在一条线上么？我觉得，但凡伟大的人，应该不会随便给出这样的建议。除非这人觉得接受建议的人和“其他人”的智商一个水平，如果真是这样，给这样的人建议也是浪费，而若是随便敷衍的话，那给建议的这个人本身也就谈不上伟大，充其量就是在装。若真是打算给建议，倒是可以邀请对方跟自己多沟通。不过话又说回来，那岂不是把这人自己的智商给拉低到和对方一样的水平么。所以仔细一想，这些话对于具备伟大品质的人来说，都不太适合。经理和销售们这么说倒也是对的，他们倒真得团结起来，不然也太容易被人鄙视了。我曾经听我微软的同学说过，这在他们公司是司空见惯的，细想起来，一团和气的公司才是奇怪的，或者现在看来也不这么奇怪了。
也不要再谈什么“团队合作”了。这或许有些偏激，不过也有些恰如其分。要“贬低”牛X的人，大抵都用得上这个评语，让你重视“团队合作”，然后例举些众人拾柴火焰高的例子，当然他们肯定不会提到360系统、也不会跟你说达芬奇、贝多芬之类的艺术家，只是希望你认清自己民工的本质。当然如果听的人也是一个尿性，或者涉世未深，那么多半也就傻傻地以为自己轻如鸿毛，不足挂齿。这么说吧，IT行业真的有许多系统，也就是这么几个人搞出来，连运维都只要多几个就好了。当然他们又会说，那是精英中的精英啊，你以为自己是精英么？那问题来了，程序员们，你以为你自己是什么？如果你自己把自己智商拉低，那真怪不得别人，别以为除了精英外就什么都不是，被人骗了还给人数钱呢。
今天享受了难得的个人时光，所以也就有了机会思考一番人生。这一切均源自昨天看的关于“transparent计算”那个帖子，直到现在我的邮箱还是会有不断的回复，这说明一件事，任何行业都可以糊弄我们程序员，什么数学、物理、化学、农业、经济、政治、法律、医学……你们尽可以吃你们的老本，利用信息不对称来坑我们，但是唯独不能在IT上骗我们，因为程序员对IT的认识，绝不是一般泛泛的人可以理解的……我们可是有搜索引擎行和开源代码滴。
LD对我的言论总是嗤之以鼻，我便孤芳自赏地留下此文作为回敬。
另外，我终于换公司了，还是程序员这一高贵的职业，不过行业换到了电子商务，继续和云打交道。</description>
    </item>
    
    <item>
      <title>哈姆雷特迁回阿里云</title>
      <link>http://blog.zhouyiyan.cn/blog/migrated-back-to-aliyun/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/migrated-back-to-aliyun/</guid>
      <description>因为日志不稳定容易丢失的原因，我最终还是选择把应用从Bluemix迁回了阿里云，新的Hamlet应用可以从[hamlet.zhouyiyan.cn]()这个地址访问。原来的[hamlet.mybluemix.net]()暂时还可以用（这个域名也算是我抢注的），不过更新是不会有了的。同时，我把博客的地址也改到了[blog.zhouyiyan.cn]()，现在[zhouyiyan.cn]()下的地址会自动转移到新的子域名下面，希望不要对我的搜索结果有影响。
为了体现程序员的逼格，新域名的转移，以及子域名的映射，我都用Go做了实现。其实倒也不难，Go标准库里已经有反向代理可以用，子域名采用了Github Pages那样，映射到单一ip地址，然后通过HTTP的host头来判断就好了。全部代码算上空行也只有36行，比我自己配置nginx要方便得多。也许将来得了空，我会再加上配置文件的支持，那样的话和nginx的效果就差不多了。
附心情：最近心情很忐忑，一直在等。
另附：我最近买了很多东西。</description>
    </item>
    
    <item>
      <title>我需要一个日志和微博工具</title>
      <link>http://blog.zhouyiyan.cn/blog/need-logging-and-micro-blogging-tool/</link>
      <pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/need-logging-and-micro-blogging-tool/</guid>
      <description>Hamlet第一个版本发布出去也有段时间了，为了能够分析一下收集到的关键字和问题，我特意打开了Bluemix（是的，我就是个潮人，爱用自家的云平台）……可是意想不到的事情发生，Internal Server Error，CloudFoundry你就是这么搞我的么？文件系统完全打不开，应用到是好的，这是什么情况！好吧，没有掌握核心科技就只能受制于人，我也只好放弃了。
所以，我需要一个靠谱的日志工具，最好也是云端的，免费，简单，速度快。看了业界大佬，Loggly，可惜我的免费试用期已经过了。又看到Firebase，100MB存储，5G流量，管理界面超炫（话说Bluemix的设计师们能不能参考点好的，别总拿Azure，Heroku，AWS当比较对象）。估摸着Hamlet的流量也没这么大，存个数据啥的应该是没问题的。
另外，写博客也着实是见烦心的事情，有的时候只是想写两笔激励下自己。微博是不能再用的了，这种不属于自己的数据，又不能DIY，没个性的东东不想再尝试。正好Firebase支持JS，那在我的首页上面放个小飘窗应该是极方便的了。
附感慨：从前我写后台代码，总觉得前台的人菜；后来我写了前台，觉得前台水还是很深的，但后台的人又不给力了；GWT又不争气，我该怎么办？Java和Javascript真的会写混的，哦，是Go的错吧。
另附：今天我购物了。</description>
    </item>
    
    <item>
      <title>升级至Lucene－4.10.2</title>
      <link>http://blog.zhouyiyan.cn/blog/golucene-sync-to-lucene-java-4.10/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/golucene-sync-to-lucene-java-4.10/</guid>
      <description>Lucene 4.10.2版本发布很长时间了，期间我接手了一个性能分析的小项目，用AngularJS在一个Dojo项目中实现简单的预加载功能，当然这是另一个故事了。总之，过去的一个月我基本没什么时间在GoLucene上，曾经信誓旦旦的我很惭愧。后来GitHub和邮箱里收到几个bug报告，让我有机会重新把精力放回来。
从4.9到4.10的变化还是比较多的，比如说小版本的引入，自动机部分重写（确实比以前的好而且简单），加了一个原位排序算法，改进了位运算，把构建数组的部分独立了出来，使用数组的部分仅限于改变指针，改进了同类型数据保存机制。有些变化其实GoLucene是走在前面的，比如说改进了原先的DWPT和IW的关闭机制，不再使用大量锁了，不过还是没有我滴好。另外GoLucene也不得不把原先BytesRef的部分改回Lucene Java原先的实现，毕竟改动指针这个操作是所有持有XXXRef的上下文所共享的，只是用基本的slice会漏掉部分需要同步修改的地方，所以还是改回去了。
接下去我会更新Hamlet这个demo，争取用到4.10新的codec。另外UI的部分可能会考虑AMUI 2.0，或者PureCSS，毕竟这个应用并没有使用很多的widget，有个基本的responsive UI也许就够了。或者增加一些搜过的关键字的统计之类的小功能，同时改进一下资源加载方面的小问题。</description>
    </item>
    
    <item>
      <title>监视AngularJS的select控件</title>
      <link>http://blog.zhouyiyan.cn/blog/watch-angularjs-select-change-event/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/watch-angularjs-select-change-event/</guid>
      <description>今天遇到了一个棘手的问题，AngularJS的select控件不响应watch方法。HTML代码如下
&amp;lt;select ng-model=&amp;quot;currentInstance&amp;quot; ng-options=&amp;quot;opt for opt in opts&amp;quot;&amp;gt;  JS代码如下
$scope.$watch(&#39;currentInstance&#39;, function(currentInstance) { // do something });  调试了很多时间，watch的方法除了初始化的时候调用两次之外，再也没被调用过。前几次谷歌都没有得到很好的解法，最后尝试了一个组合，得到了这个答案，顺利解决问题。基本解法是把currentInstance替换成一个对象的字段，HTML代码如下
&amp;lt;select ng-model=&amp;quot;choice.selectedId&amp;quot; ng-options=&amp;quot;opt for opt in opts&amp;quot;&amp;gt;  JS代码如下
$scope.choice = {}; $scope.$watch(&#39;choice.selectedId&#39;, function(currentInstance) { // do something });  不过这个答案并没有说明原因，官方文档表示ng-model是按引用比较，我尝试了字符串，发现也没有办法触发watch。在该问题的另一个答案中，提到在AngularJS里面，scope不应该作为模型的根，而是应该创建单独的对象，我估计这很可能和这个问题真正的root cause有关，不过也无从验证了。</description>
    </item>
    
    <item>
      <title>减少前台代码单元测试的尝试</title>
      <link>http://blog.zhouyiyan.cn/blog/unit-test-and-defect-category/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/unit-test-and-defect-category/</guid>
      <description>从后台转到前台开发后，经常困扰我的就是单元测试了。前台真的很难做单元测试，一方面没有很好的工具，另一方面需求的变化让维护单元测试成为一种负担。而且，在修复问题的时候，单元测试也没有做到保护和易于运行。对于后台来说，运行整个系统是很困难的，所以单元测试成了小规模验证变更的最佳工具。而到了前台，运行系统的界面反倒是相对容易的，而且设计的改良，使得任何操作的重现步骤都不会特别复杂。
单元测试对于前台开发还是必要的，但是如何控制投入产出比呢？
 首先服务层是不用单元测试的，这个后台开发人员应该已经测试过。 界面的特性开发也可以不用单元测试，毕竟过几天说不定这个特性就已经不在了。 重复的功能缺陷可以用简单的单元测试，避免再次反复。 浏览器兼容性问题最好抽成自己的框架，避免重复犯错。  这样下来要写的单元测试就少很多了。不过如果单元测试完全不要写就好了，毕竟学习相应的测试工具也要花时间的。有什么更好的方法么？</description>
    </item>
    
    <item>
      <title>尝试用Pure来设计博客新主题</title>
      <link>http://blog.zhouyiyan.cn/blog/try-pure-for-gor-theme/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/try-pure-for-gor-theme/</guid>
      <description>Pure是一款Yahoo的CSS框架，很轻量，支持响应式设计，而且默认的主题配色很清新。虽然YUI已经不在了，但是这个框架却给我留下了深刻的印象。今天，我尝试着对比自己博客的主题，用Pure给出的博客样式来重新设计。原先的主题是仿照blink设计的，移动优先，红色加黑色配合粗体字很有档次，惹眼的进度条以及前进后退中的淡入淡出效果，几乎没有什么缺点。Pure的博客样式则稍欠个性，中规中矩的布局，深蓝灰的背景，如果博客内容片图片的话到还是可以得，宽屏幕的适配是主要的优点。
最终我还是没有采用新的主题，因为……实在是不好看。我还是喜欢现在简洁的样子，虽然没有利用到宽屏幕的优势，不过平时手机看看还是很方便的。也许会在明天开始的编程大赛里用用吧。</description>
    </item>
    
    <item>
      <title>利用Coveralls收集测试覆盖率</title>
      <link>http://blog.zhouyiyan.cn/blog/test-coverage-using-coveralls/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/test-coverage-using-coveralls/</guid>
      <description>好吧，我承认有些盲目跟风了。那天我浏览github的时候，看到三个很好看的badge，构建状态、覆盖率和文档链接，于是我决定把这三个badge也要放到我的项目里面去。Travis是相对简单的，做一个配置，等着build的通知就可以了。文档也也就是一个link的问题。最麻烦的是测试覆盖率，因为数据必须从构建中获取，而Coveralls没有官方的Travis接口或者Go客户端的支持。
最后我使用的是goveralls（Coveralls的Go客户端实现）配合一个脚本来合并不同package的测试结果，勉强得到结果。
最终的效果并不是理想，免费的Coveralls只能给出很简单的行覆盖率，邮件通知也要额外配置（并且configure按钮会在没有提醒的情况下冲掉已经输入的信息……），邮件的内容也显得比较苍白。</description>
    </item>
    
    <item>
      <title>阿里云服务器升级</title>
      <link>http://blog.zhouyiyan.cn/blog/aliyun-upgrade/</link>
      <pubDate>Thu, 09 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/aliyun-upgrade/</guid>
      <description>2012年搞的阿里云服务器快到期需要续费了，用了两年的操作系统也早过了补丁支持的最后时间，加上最近爆出的bash漏洞，让我决心利用这个机会升级一下系统。说是升级系统，其实就是更换系统盘而已。原来阿里已经把各种常用的操作系统做成镜像，用户只要替换相应的系统盘镜像即可。但就是这么简单的过程，还是遇到了一个令人不快的问题。
更换操作系统本身很简单，几次点击就好了。可是做出来的系统盘只有20G了，加上原先鸡肋的10G数据盘，整个数据空间从原先的60G降成了30G。要知道，我在购买云服务器之初可是说好的60G的，这续费升级之后，怎么就缩水了呢？
提了支持工单，第一个客服问我是不是减配了，还质疑我“续费的金额和原先比少，所以简配也很正常”之类的。我截了图给他，说续费的时候根本不能简配，质疑他对系统的理解。后来杭州总部的第二个客服给我来了电话，说现在系统盘都是20G了，最后给我申请了代金券弥补一年的损失。这个结果我只能说凑合，事情也算就此作罢。</description>
    </item>
    
    <item>
      <title>利用Travis做持续构建测试</title>
      <link>http://blog.zhouyiyan.cn/blog/try-travis/</link>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/try-travis/</guid>
      <description>随着项目的规模不断增长，持续的构建测试能够有效的保障代码的质量。以前做Java的时候一直用Maven管理依赖，Jenkins自动化集成测试，Sonar监控代码质量。现在Go的项目，因为是放在Github上的关系，试用了下Travis。不得不说配置真心方便，yml几行代码就测试了Go从发布以来的四个版本（发现只支持到1.2+）。而且反应真的很灵敏，每次push代码，Travis都很勤恳的测试，有错误就发邮件通知我，搞的我现在每次push都很谨慎，生怕搞坏了build。
另外我还把构建的状态放到了Github项目的首页，看起来很专业嘛，嘻嘻。</description>
    </item>
    
    <item>
      <title>寻找哈姆雷特</title>
      <link>http://blog.zhouyiyan.cn/blog/golucene-live-demo/</link>
      <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/golucene-live-demo/</guid>
      <description>GoLucene的开发终于告一段落了，基本的创建索引、查询解析和搜索都已经完成。为了能实际演示现有的功能，增加些知名度，同时收集一些查询解析的实际用例，我利用职务之便，做了一个网站。这个网站的功能还挺简单的，它索引了莎士比亚的一个剧本，哈姆雷特，通过关键字可以查询剧本原文。网站的布局采用了AMUI的CSS框架，Go写的后端，部署在Bluemix上面。值得注意的是，Bluemix虽然没有Go的运行时，但是可以通过CloudFoundry官方的buildpack来提交部署，需要定义启动命令即可。
回想起来，距离移植工作开始也超过一年了，期间因为工作的关系陆陆续续地中断了几个月，不过先在也算是到里程碑了。接下来如果没有实际的项目需要，基本上只需要紧跟Lucene的发布脚步就可以了。</description>
    </item>
    
    <item>
      <title>博客迁移到Github Pages</title>
      <link>http://blog.zhouyiyan.cn/blog/move-to-github-pages/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/move-to-github-pages/</guid>
      <description>最近多灾多难。因为阿里云服务到期、系统又因为几个重大安全问题而亟待升级的关系，我暂时将博客迁移到了Github的Pages服务上。其实早前我就尝试过利用Github的web hook功能，配合自己写的API，利用内存KV存储缓存页面这条路，所以整个过程基本驾轻就熟。我没有采用Github建议的子域名，而是直接在万网上更新了域名的A记录。这里要注意的是，因为Github的IP地址改变过，所以很多现有的文档给出的地址都不太对，最好自己ping下比较好。目前测试下来工作一切正常，以后可能会考虑把博客指向子域名。</description>
    </item>
    
    <item>
      <title>SVG和Canvas</title>
      <link>http://blog.zhouyiyan.cn/blog/svg%E5%92%8Ccanvas/</link>
      <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/svg%E5%92%8Ccanvas/</guid>
      <description>最近项目上需要改动一个六边形的logo，查了下CSS，发现竟然是用CSS3的transform，转动:before和:after的边界和角度，配上上下边界生成的。为了改动这个边框的粗细，涉及到8个不同CSS规则的修改。想到六边形其实也可以用其他方式来实现，就查了下SVG和Canvas的文档。这里要赞下SVG的文档，真的很方便。反倒是Canvas的文档，首先作为HTML5的一部分，查阅起来就很麻烦，而且API的分类也很奇怪，通篇没有什么例子可用。
实现出来的效果大概是下面这样的。注意因为jsbin bug的关系，Chrome可能无法访问.
 第一个是用CSS3实现的，缺点就是CSS规则复杂，而且要通过包装多个节点来正确定位。第二个是SVG，基本上三行搞定，和Canvas一样被当成单个对象，所以定位什么的很轻松。第三个是Canvas做的，16行JS也还算好，坑爹的是像素点的计算很复杂，不像SVG那样直观。不过SVG和Canvas在IE11下显示很怪，需要进一步调整。
总的来说，我最喜欢SVG的方案，代码量少，易于定位，而且支持的浏览器肯定比CSS3和HTML5的Canvas更多一些吧。</description>
    </item>
    
    <item>
      <title>超多的Bug</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%B6%85%E5%A4%9A%E7%9A%84bug/</link>
      <pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%B6%85%E5%A4%9A%E7%9A%84bug/</guid>
      <description>最近我开始了GoLucene中涉及解析器和符号流逻辑的移植。可能是前段时间的压力过大，竟然发现了许多原本不会出现的bug。这些bug也很有意思，症状和原因往往牛头不对马嘴，花了我很多的跟踪时间。要怪只能怪Go没有好的图形化单步调试工具，GDB什么的我暂时也没时间学，一条一条的状态打印让人那个捉急啊。
第一个错发生在GoLucene内部的一条断言上，说某个字段应该可以被索引，但是标志位不对。按说这个字段类型是个静态值，改改也就对了。但改完，发现另外一个断言又错了。仔细看代码，发现原来Lucene里面StringField和TextField里面分别由STORED和NOT_STOREF两个类型，而且各自的标志位都不一样。因为Go没有类级别的scope，所以这种类型名必须要加上类的名字作为前缀加以区别。大多数的时候是不需要加的，毕竟重名的不多，但还是被我碰上了。
第二个错也是一个断言发现的（感谢Lucene内部大量的断言）。先是StandardTokenizer无法正确的抽取符号，debug发现内部的input从来没有被赋过值，但是代码上是有赋值的。再仔细看，发现在StandardTokenizer的reset方法里面没有调用Tokenizer父类的reset方法。加上后就直接“TokenStream contract violation”断言，原来是参数和字段重名，忘记加上类名了，而且断言条件也写反了。
第三个错和整数类型有关。Go中的int很奇特，在64位运行时里是64位的（废话……）。平时也没什么问题，但是如果是带符号位位移（在Java里面是&amp;gt;&amp;gt;&amp;gt;)，而且没有制定uint32的话，得出的结果就不正确。糟糕的是症状是数组下标越位，经过无数的反向跟踪，才发现是哈希函数里的带符号位位移错了，因为int是64位的。
第四个错是死循环，而且还挺典型的。在Java里面有段代码
main: while (off &amp;amp;lt;= limit) { // ... while (true) { if (off &amp;amp;gt;= matchLimit) { break main; // do something } // ... }  在Go里面我写成了
for offset &amp;amp;lt;= limit { // ... var hasMore bool for hasMore = offset &amp;amp;lt; matchLimit; hasMore; offset++ { // do something forever now } if !hasMore { break } // ... }  因为我忘记重新计算hasMore标志了……其实只要协程下面这样就好了。
for offset &amp;amp;lt;= limit { // .</description>
    </item>
    
    <item>
      <title>为什么要做GoLucene</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9Agolucene/</link>
      <pubDate>Fri, 22 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9Agolucene/</guid>
      <description>从一开始接触Java就不喜欢它，所以尽管我也算是最早一批接触Java的程序员，真正开始用也要到2009年我在一个独立项目中接触JAX-RS开始。JAX-RS极大的抽象和简化了Web开发，使得开发人员完全不需要在意Servlet的细节（尽管我也实现了一个自己的JAX-RS库，用到反射和Servlet），只需熟悉HTTP就可以开发Web应用了。到了这个时候，我才对Java有了些许的好感。后来接触了Scala和Clojure，很喜欢他们处理集合的方式，以及各种辅助的方法。可是真到了开发应用，还是需要依赖那些框架，而框架使用中的繁琐又反过来抵消了语言本身带给我的好感，遂一一弃之。
直到Go的出现。
Go真的让我眼前一亮，语言本身快速上手，开发Web应用让我找回了REST的感觉，语言库很全，要什么有什么。OO的部分有些怪，不过因为之前接触过JS的原型链，对于嵌入对象指针的方式也不会非常排斥。可以说Go就是我一直要的菜。
回到一开始的问题，为什么要做GoLucene呢？因为我比较喜欢Linux而不是Unix，也就是一个程序包含所有功能，而不是创建各种小程序协同工作。而Web应用中搜索是一块很重要的功能，虽然我也可以用ElasticSearch的REST接口，或者干脆使用Google Site Search，但这些都显得太累赘……
我也许是太纠结了。
经常会问自己，为什么要做这个？为什么要做那个？理由也是各种各样的，但也许我就是想这么做。所以如果有人问起我，为什么要花这么多时间在GoLucene上，我想说的是，我就是想这么干。</description>
    </item>
    
    <item>
      <title>用CSS制作简单的logo水印</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%94%A8css%E5%88%B6%E4%BD%9C%E7%AE%80%E5%8D%95%E7%9A%84logo%E6%B0%B4%E5%8D%B0/</link>
      <pubDate>Sun, 17 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%94%A8css%E5%88%B6%E4%BD%9C%E7%AE%80%E5%8D%95%E7%9A%84logo%E6%B0%B4%E5%8D%B0/</guid>
      <description>最近部门要办一个Bluemix和CloudFoundry的推广月活动，我应邀在第一周做一个讲座介绍Bluemix和CF命令行的使用。为了让讲座更炫一些，我照例又试用了一个新的slide工具deck.js。具体的ppt等我做完讲座再放出，这里要分享的是一个logo水印的制作方法。
在公司内部做讲座，常用到的ppt首页一般都有一个大大的公司logo（用来填补首页的空白……）。为了体现我们的团队，我特地把logo换成了我们的团队名称。为了制作这个logo水印，我尝试了office的艺术字和Paint.NET(PS不懂），效果都不太好。想起来自己也算是个前台开发人员（囧），就试着用CSS做了一个，期间遇到无数的问题，一一用谷歌解决。代码如下：
.watermark { font-size: 15em; -webkit-transform: rotate(-30deg); position: absolute; right: 0; bottom: 0; opacity: 0.4; margin-right: -5%; margin-bottom: -5%; }  什么，你没看到这里的水印？请务必留言给我。
ACE</description>
    </item>
    
    <item>
      <title>试用LedisDB</title>
      <link>http://blog.zhouyiyan.cn/blog/use-ledisdb/</link>
      <pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/use-ledisdb/</guid>
      <description>最初是从InfoQ上得知LedisDB这个项目的，号称“Go编写的高性能NoSQL数据库”，其实最吸引我的还是其能够嵌入在Go应用中使用。LedisDB有一套自己的构建方法，不过因为我不需要它独立运行，所以走了一条捷径。整个过程并不是一帆风顺，不过也没遇到很大的困难。
要在Go写的应用中使用LedisDB，首先要下载它的源代码和依赖项目的代码：
go get github.com/ledisdb go get github.com/siddontang/go-log/log go get github.com/siddontang/go-snappy/snappy go get github.com/siddontang/goleveldb/leveldb go get github.com/szferi/gomdb  如果是Windows系统的话，需要安装MinGW-w64来构建最后的LMDB。不过即使编译通过也是不能运行的，会遇到
undefined: strdup  经过Google发现strdup是个非标准函数，可以找到标准实现。我后来问了LedisDB的作者，发现LMDB在Windows上也是不能用的，所以就没有深入下去尝试。同时，我发现LedisDB的对于后台数据引擎的管理，是采用集中式的方法，也就是在store的包里面统一注册，没有办法单独跳过。LedisDB自带的构建脚本能够根据所在的操作系统，自动跳过某些源代码，所以没有这个问题。因为我是直接嵌入使用，没有经过一个构建过程，所以只能手动删除相应的mdb.go文件即可。
除此之外，如果把mdb注册的方法移到mdb这个具体的包里面也是可以，不过这可能并不符合LedisDB原先的设计和现有的构建脚本。
我主要使用LedisDB作为一个可持久化的缓存，因为Bluemix每个实例的硬盘和内存大小是1G，而且实例自动迁移的时候可能会造成硬盘数据丢失，所以LedisDB用在这里不会显得浪费，数据丢失的成本也不太大，今后可以加上主动式数据更新以及双实例热备，那基本就满足要求了。
要初始化一个简单的LedisDB对象还蛮简单的：
var cache *ledis.DB var err error if cache, err = func() (*ledis.DB, error) { cfg := config.NewConfigDefault() l, err := ledis.Open(cfg) if err != nil { return nil, err } return l.Select(0) }(); err != nil { log.Fatal(err) }  我目前基本上只会用到Get和Set方法，将来可能会用到expire之类的，控制内存的使用。
var data []byte if data, err = cache.</description>
    </item>
    
    <item>
      <title>我的一天</title>
      <link>http://blog.zhouyiyan.cn/blog/my-day/</link>
      <pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/my-day/</guid>
      <description>看了一篇讲述G公司员工一天工作的文章，决定也关注一下自己一天到底干了些什么，于是有了这篇流水账。
8:00-8:50 收发邮件，整理邮箱 8:50-10:15 避开上班高峰，然后开车上班 10:15-11:05 开始看昨天晚上发现的缺陷报告，结果无法重现……郁闷 11:05-11:15 为了部门长远发展计划，也就是更新了下wiki 11:15-12:45 吃饭，然后三国杀 12:45-13:00 填写上周培训的反馈，想起以前同事给我的反馈，感动ing 13:00-15:15 开始做上午收到的任务，我靠，调CSS真的不是程序员该干的 15:15-15:30 为了推广Bluemix准备ppt 15:30-16:20 继续调CSS，为了看清设计草图不小心碰倒了显示器，引来一片笑声 16:20-17:15 回去晚了没车位，我闪 17:30-18:20 饭前继续调CSS 21:45-22:15 减肥回来，又调了几个CSS，然后在RTC里留了言，明天继续  总体上我今天一直在调CSS，专利的事情也只能推到明天了。</description>
    </item>
    
    <item>
      <title>定速巡航</title>
      <link>http://blog.zhouyiyan.cn/blog/santafe-cruise-control/</link>
      <pubDate>Tue, 12 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/santafe-cruise-control/</guid>
      <description>今天在高速上终于成功的使用了全新胜达的定速巡航功能。具体来说，就是先按下cruise按钮，然后在车子时速超过110公里的时候，按res-（也就是cruise旁边拨片朝下按）。进入定速巡航状态后，油门放掉也不会担心减速，而且可以通过res+和res-拨片，提高和降低巡航速度，真是高大上啊。看了看奔驰和宝马的定速巡航系统，操作和功能也都差不多。奔驰C级和宝马X系的拨片式定速巡航，感觉更高级一些，按钮什么的还是太游戏化了。
也遇到一个“小”问题，定速巡航状态下踩刹车可以取消定速设置，此时车子处于逐渐失速的状态，如果想通过油门加速，在踩到相应深度之前，车子会有轻微的左右晃动，心里感觉怕怕的，不过多试几次就习惯了。</description>
    </item>
    
    <item>
      <title>新主题</title>
      <link>http://blog.zhouyiyan.cn/blog/new-theme/</link>
      <pubDate>Sat, 09 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/new-theme/</guid>
      <description>从使用Gor作为博客引擎开始，我就一直不太喜欢默认的主题，总感觉很老气，更何况Bootstrap也已经3.2了。问了Gor的作者，也没给什么文档，就说可以仿照其他现有博客的主题来改造，不过当时也没看到什么很炫的博客，这件事情也就搁下了。最近出于各种原因考虑，准备在Bluemix上搭个个人博客的镜像站点，同时评估一下继续使用阿里云的必要性。在更新我的博客程序Gor之后，偶然发现了样子还不错的博客，于是一时兴起就把这个主题替换到了我的博客上。
这个主题比原来要窄，字体要更大，应该是考虑到移动端访问的必要。首页精简了，只是显示列表，加载速度应该会快不少。我最喜欢的是加载时候自定义的红色进度条，和条目选中时候的特效。喜欢的话可以把这个主题拷贝到Gor的theme目录，然后在配置文件里面加上即可。
 theme : gor-theme-blink  惭愧啊，冒充前台程序员这么久了，也没好好拾掇自己的博客。</description>
    </item>
    
    <item>
      <title>作为前后台开发人员感受上的差异</title>
      <link>http://blog.zhouyiyan.cn/blog/difference-between-fe-and-be-developer/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/difference-between-fe-and-be-developer/</guid>
      <description>伴随着部门的转型，我也理所当然的从一名后台Java开发人员转型“成功”到一名前台JS开发人员。要说这个转型，其实从09年就开始了。那个时候，我作为项目中实际上唯一的一名后台开发人员，理应感受到整个团队正在往前台上靠的这种趋势。不过这种猜想，被一种过于乐观的自我满足给掩盖了，使得我没能赶上这股转型的风潮。还好当真正转型的这天来临的时候，我也没费多少时间就成功的糊弄过去了。话说当初提前转型的兄弟们，现在也已经跳槽了，这是题外话。
前台开发的感受是完全不同的。以前做后台开发，最经常接触的就是项目的架构师。每天我会花很多的时间和架构师沟通，理解项目需求，做架构和技术选型，分析性能指标、可靠性和可用性需求。如果遇到具体的技术问题，我会一头扎入技术文档，了解历史背景和最新的技术趋势，做到解决方案务必是最可靠、最有些、而且是最先进的。除此之外，我还会使用各种工具，确保单元测试，和具体的代码指标通过。做外自己的本职工作，还可以做些探索，比如那些不太靠谱但很有前进的技术方案，或是嘲讽一下前台同学那些臃肿而低效的代码。总之，生活是很快乐的。
转型以后，一切都变了。我不再和架构师一起工作，而是设计师一起合作。说到合作，完全不像原先和架构师的那种对等的交流，更像是单方面接受设计团队的指令。他们怎么说，我们怎么做。如果开发人员提出疑问，设计师并不会给我任何的解释，只会有两种选择，要么接受（因为他们是设计师，我们不是），要么换一套方案接受……因为苹果的关系，高层对于设计团队相当的依赖，使得我们原本就比管理和销售矮一头的开发人员，现在更不受到重视了。实际开发当中，我也不再使用IDE，而是Sublime Text。没有语法提示，没有单元测试（有的，但是很麻烦），没有代码检测（Lint?)，不停的刷新浏览器看效果。而且前台问题的修复方案往往有很多，可以用JS，可以用CSS，甚至可以把整个widget换掉，只看原先的风格如何。虽然我已经能够适应这种生活，但是总感觉无法完全发挥出自己的潜力。
这种比较是不公平的，因为我从一个资深的后台开发人员（几乎接近架构师）变成了一个初级前台开发人员（接受他人领导，大部分时间修复问题）。我所具备的技术积累，对于目前的项目几乎就是无用的。这样有价值么？也许，因为整个团队在转型，我要么跟进，要么离开，而我不是一个轻易放弃的人。</description>
    </item>
    
    <item>
      <title>RAM Usage Estimator</title>
      <link>http://blog.zhouyiyan.cn/blog/ram-usage-estimator/</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ram-usage-estimator/</guid>
      <description>有一个大坑正在展开。Lucene有自己的JVM内存占用估算机制，用来估算在生成索引时的内存使用情况。基本的算法在RamUsageEstimator这个类里面，其它和生成索引相关的类中，也分别有各种记录内存使用的计数器。有些直接使用简单的整数类型，有些则是AtomicInteger，在ByteBlockPool和IntBlockPool的使用者中，则主要使用Counter。至于内存估算如何影响索引的生成，这个机制暂时还没有遇到，不过我估计和平衡CPU/IO的算法有关。
麻烦的是，RamUsageEstimator的算法不能简单移植到Go。比如说Go的复合数据类型可以直接使用简单数据，比如说map可以直接用int来做键和值，而Java则需要一个对象封装一下；Go的Slice可以通过cap来得到预留的空间数量，而Java则必须估算成2X等等。</description>
    </item>
    
    <item>
      <title>程序员该啥时候退休</title>
      <link>http://blog.zhouyiyan.cn/blog/programmer-retire/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/programmer-retire/</guid>
      <description>十年前总是看到或者听到说，程序员吃的是青春饭，三十岁就一定要转经理之类的话。十年之后的今天，昔日的那些项目经理变成了现在的经理，可程序员呢？四十岁退休论又弥漫开来。或许再过一个十年，大家又会讨论程序员是否应该五十岁提前退休之类的话题，然后就是程序员要不要按时退休，以及再后来的终身程序员……
是的，每年程序员们都会不停的讨论关于自己职业生涯的话题，可内容都是差不太多的。原因也许只有一个，那就是二十年前，程序员还不曾作为一个职业群体存在过，所以没有任何过往的经验可以遵循。
二十年前，我见证了一群小学生在学习Logo，澄清一下，我可是在学习C的。</description>
    </item>
    
    <item>
      <title>Refactor IndexWriter</title>
      <link>http://blog.zhouyiyan.cn/blog/refactor-indexwriter/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/refactor-indexwriter/</guid>
      <description>IndexWriter分明就是个坑。单个文件足足4000多行源代码，加上剪不断、理还乱的DocumentsWriter，为了平衡CPU和IO的DocumentsWriterPerThread，以及管理DWPT的pool，都是巨大的文件。我能够理解，为了不让IW成为上帝类，而分理处DW和DWPT的良苦用心。不过，这丝毫抵不上那些为了扩充功能，而不断向IW加上的“海量”代码。其实像有些功能抽的就比较好，比如说segments的抽象，比如说对于删除的特殊处理，还有flush的精细控制。如果能对IW、DW以及DWPT进一步的细分，对于将来维护和扩展代码更好。Lucene的邮件列表里面，大概几年前有人提过这件事，不过后来估计也就不了了之了。IW本身大量的同步机制其实就暴露了其内部数据的离心力，比如说关闭的状态、flush的状态，commit的状态等等。我会持续加以关注的。</description>
    </item>
    
    <item>
      <title>First Selenium Test Case</title>
      <link>http://blog.zhouyiyan.cn/blog/first-selenium-test-case/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/first-selenium-test-case/</guid>
      <description>今天终于完成了人生第一个基于Selenium的UI自动化测试脚本（本想说是第一次UI自动化，但突然想起来我也曾经用RFT写过WebSphere产品中帮助模块的自动化测试滴）。话说Selenium真是个坑啊，花了我整整两天时间，才把各种问题一一解决掉。我用的是WebdriverJS和Mocha。
 弃用官方driver。官方的WebDriverJS文档不齐全，查个API还要google下用法。而且对像我这种从静态语言转过来的开发来说，官方driver中倡导的的promise和defer用法，简直就是天书。哪里要嵌套，哪里可以连续写，没有个准数。后来我切换到了非官方的，一律统一使用flow的写法，简单明了。 避免页面切换。我要测试的应用本来是个单页面应用，可是要测试的功能涉及到登录操作。由于认证采用的是oauth加回调，有两次页面切换。本来Selenium是提供了隐式等待的功能，可是实际测试运行的时候，总是出现各种随机的错误。最后，把认证方式切换到简单post之后，问题便解决了。 为测试显示隐藏元素。有些功能，比如说hover-to-display，利用了浏览器hover改变CSS的特性，Selenium是不支持的。我尝试了moveToObject和scroll命令，都没有办法对隐藏元素进行hover操作。最后，我直接修改了CSS，把display: none去掉以后，就可以了。 利用CSS3选择器。用Selenium之前，总是听说元素定位如何如何困难，什么Dojo都是动态ID，什么复杂的XPath等等。真正使用以后，发现CSS3选择器已经够用了。比如说下面这个，用来定位app-container下app类，同时是第二个元素，下的名字，真心方便。
#app-container .app:nth-child(2) .name   俗话说，不以测试通过为目的的开发都是耍流氓。有了Selenium以后，妈妈再也不用担心我乱改代码了。</description>
    </item>
    
    <item>
      <title>并发多任务</title>
      <link>http://blog.zhouyiyan.cn/blog/multi-tasking/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/multi-tasking/</guid>
      <description>最近感兴趣的项目比较多，一边是作为IBM下一代云平台的BlueMix，还有 手上的GoLucene也在稳步进行。BlueMix让我有机会转向全栈工程师的，一个月下来，不停地Dojo、JS、CSS和HTML，我也能很自豪的自称初级前台开发人员了。同时我也在关注Selenium做UI自动化测试，话说非官方的WebDriverJS用来测Dojo应用还是比较困难，很多widget都是动态生成的，完全get不到啊。另外OpenSourceReportCard看上去也挺有意思的，准备给Jazz平台也搞一套类似的DeveloperProfile，给部门的KPI也提供一套备选指标。</description>
    </item>
    
    <item>
      <title>经验导向</title>
      <link>http://blog.zhouyiyan.cn/blog/experience-guided-person/</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/experience-guided-person/</guid>
      <description>有些人做事凭直觉，有些人做事则凭经验。
以做葱油饼为例。半成品下锅后，小火加热2分钟到2半分钟。首先什么是小火，是指内圈火only，还是内外圈小火？（内外圈小火需要把煤气灶开关开到接近关闭的位置才可以）其次120-150秒时间的依据是什么，为什么是个范围？微波炉爆米花也有规定微波的时间，但同时也给出，当两次爆炸的间隔超过3秒就可以停止。葱油饼不给出理由，也没有备选方案，十分不便。
在经历过大概10个饼之后，我终于明白，第一个面需要煎到油浸润90%以上的上表面，就可以翻面了；而第二个面需要1分钟的时间；最后还需要再翻一次面（说明上没有给出），只要看到葱油饼微微隆起就可以出锅了。
接下来6个饼都按照这个方法，每个都很成功。</description>
    </item>
    
    <item>
      <title>Switch of interest</title>
      <link>http://blog.zhouyiyan.cn/blog/switch-of-interest/</link>
      <pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/switch-of-interest/</guid>
      <description>Unfortunately here comes the day that I decide to temporarily pause my migration work of GoLucene and swtich my focus to a more interesting project. I know it&amp;rsquo;s been a big hole that I dug (and a even larger one, when I decided to migrate the whole Lucene code base&amp;hellip;), but due to the change of my day project, the incentive is now not strong enough to sustain my continuous effort.</description>
    </item>
    
    <item>
      <title>我们不是工人</title>
      <link>http://blog.zhouyiyan.cn/blog/we-are-not-workers/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/we-are-not-workers/</guid>
      <description>我们这一带不是汽车工人，没错，我们绝对不是。没有哪个行当向我们这样，不断地鞭策自己，如果不积极学习并赶上潮流，就会被无情的淘汰。上百种语言，无数种技术组合和开发模式，各种行业知识，还有每年不断推陈出新的各种新玩意儿，如果没有与时俱进的觉悟，根本无法在这个行当混下去。所以我们根本不需要执照，因为执照根本保障不了我们的饭碗。</description>
    </item>
    
    <item>
      <title>Delegate and Wrapper using Go</title>
      <link>http://blog.zhouyiyan.cn/blog/delegate-and-wrapper-using-go/</link>
      <pubDate>Tue, 17 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/delegate-and-wrapper-using-go/</guid>
      <description>Lucene的测试套件中有很多封装现有对象，并提供额外控制，如节流、锁检测和关闭检测等功能。这些类一般使用Delegate的封装形式，实现以恶服务接口，给定一个内部对象做实际的工作，同时添加一些额外的功能。这种写法通常都十分啰嗦，特别是有很多方法的接口，会出现大量类似的无用代码：
public void method1(...) { delegate.method1(...); } public void method2(...) { delegate.method2(...); }  事实上，新的类所扩展的功能可能就只是涉及到一两个方法而已。为了解决这种问题，一般可以再创建一个中间wrapper，把每个方法都交给delegate，然后再让扩展的类去覆盖一两个方法就好了。当然，这样就又创建了一个新的无用对象。
在Go当中，如果要实现Delegate这种封装形式，可以直接使用嵌入对象。事实上，Delegate本身就源自基于原型的面向对象，所以使用类似机制的Go可以相对简单的实现这种需求。
type extendedClass struct { *parentObject }  只要这三行，就可以使扩展类无缝的使用父类的方法，就好像继承了一样。如果要扩展某几个方法，就只要相应的实现这些方法就可以了。当然这也存在一些问题：
 缺少delegate关键字，对代码理解会有些影响。不过如果Go代码看多了，也会习惯的。 多个delegate对象会比较乱。 如果包含的是接口，那么涉及到内部字段访问的方法会比较困难。  使用了这个方法以后，从Lucene测试套件转换过来的Go代码精简了至少一半。
关于Delegate和封装的模式可以看这里。</description>
    </item>
    
    <item>
      <title>Git版本库瘦身</title>
      <link>http://blog.zhouyiyan.cn/blog/minify-your-git-repository/</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/minify-your-git-repository/</guid>
      <description>最近项目上进行了双线开发，为了给已经发布的信息中心打上最新的补丁，同时确保另一个基于相同代码线的项目能获得同样的补丁。我本地使用的是Git来管理不同分支的，由于一些历史原因，里面包含了些重量级的JDK和第三方库。为了适应双线开发，我不得不对我的Git版本库进行瘦身。
Stackoverflow上提供了很多讨论，基本的思路是使用filter-branch这条命令。由于讨论很零散，我主要遵循了这篇博客的方法。
首先获得所有文件的SHA键列表。
git rev-list --objects --all | sort -k 2 &amp;gt; allfileshas.txt  整理Git版本库，并按照所占大小收集结果。
git gc &amp;amp;&amp;amp; git verify-pack -v .git/objects/pack/pack-*.idx | egrep &amp;quot;^\w+ blob\W+[0-9]+ [0-9]+ [0-9]+$&amp;quot; | sort -k 3 -n -r &amp;gt; bigobjects.txt  按照SHA查找文件的路径。
for SHA in `cut -f 1 -d\ &amp;lt; bigobjects.txt`; do echo $(grep $SHA bigobjects.txt) $(grep $SHA allfileshas.txt) | awk &#39;{print $1,$3,$7}&#39; &amp;gt;&amp;gt; bigtosmall.txt done;  我的库包含100K个文件，显然是太慢了。于是写了一个Go脚本，稍显臃肿，但是很快。
 然后把那些大的二进制文件一一干掉。这个过程很无聊，每个文件必须单独删除，然后clone，没有自动化。
git filter-branch --prune-empty --index-filter &#39;git rm -rf --cached --ignore-unmatch MY-BIG-DIRECTORY-OR-FILE&#39; --tag-name-filter cat -- --all git clone --no-hardlinks file:///Users/yourUser/your/full/repo/path repo-clone-name  结果令人满意，从原来的600MB减少到了现在的不到300MB。不过如果要完全替换远程版本库的话，还是比较麻烦，需要额外运行这个命令。</description>
    </item>
    
    <item>
      <title>CDL I/O Contest Summary</title>
      <link>http://blog.zhouyiyan.cn/blog/cdl-io-contest-summary/</link>
      <pubDate>Fri, 08 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/cdl-io-contest-summary/</guid>
      <description>昨天上午9点，距离比赛结束还有一个小时，我冷静地敲完&amp;rdquo;cf push&amp;rdquo;，等待备份站点提交。当看到Bluemix返回绿色状态后，我长吁一口气，这三天的比赛终于快结束了。
Bluemix是IBM提出的下一代云平台，而我所在的实验室也引入了这套环境，并组织了I/O云编程竞赛。比赛时间为三天72小时，题目在周一上午9点放出，要做一个结合社交、移动、分析的基于Bluemix的云应用。作为班上的技术老大哥，我也很跟潮流的组织了一个小队参与比赛。整个过程很艰辛，也很刺激。第一天完成题目的分析和应用主题的定位，并完成基本的技术选型。这里我们犯了一个“错误”，选择了Node.js这个我并不熟悉，但是很新鲜的技术做为平台。所以最终我花了两个小时啃完《Node.js开发指南》，算是一边看手册，一边写完程序的。前台界面选择了Metro，不过最后因为时间不够，没有应用上去，还是使用了传统的Bootstrap的默认主题。
实际上，72小时能做的应用是很受限制。如果熟悉云平台（主要是Cloud Foundry）或者移动开发的话，会很有优势。很遗憾，我实际上都不是特别熟悉，CF的命令、Node.js上Web应用开发、以及后来选用的AngularJS，我都是压缩在这三天完成的。结果也不算太差，目前海选排名排在前10位（竟然有24个应用在72小时内完成了部署和提交），在不懂云开发和移动开发的方阵里数一数二了。
从数模比赛到ACM，毕业之后就再也没有这么拼的感觉了。这三天让我重温了下过去的“美好”时光，也让我顺利的转职成为前后通吃的程序员，为不如云开发行列奠定了坚实的基础。
云，我来了！</description>
    </item>
    
    <item>
      <title>Learning Programing Languages</title>
      <link>http://blog.zhouyiyan.cn/blog/learning-programing-languages/</link>
      <pubDate>Thu, 31 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/learning-programing-languages/</guid>
      <description>这两天一直在打理老的博客文章，发现明显的几个变化：不再谈思想了；不再自称BC了。年纪大了，自然不在轻狂。可是见的人多了，也觉轻狂一些可能会少吃些亏。有的时候就是这样，真正厉害的人对你很客气，但不把你当回事；稍稍厉害的人，若是你显得谦虚，他反而就看不起你.
不过年龄大了，也有很多优势。比如说我曾经的一个目标：
&amp;ldquo;…… 学会至少半打编程语言。包括一门支持类抽象的语言（如Java或C++），一门支持函数抽象的语言（如Lisp或ML），一门支持句法抽象的语言（如Lisp），一门支持说明性规约的语言（如Prolog或C++模版），一门支持协程（coroutine）的语言（如Icon或Scheme），以及一门支持并行处理（parallelism）的语言（如Sisal）。&amp;rdquo;
现在看起来，我已经掌握了一门OO语言Java，一门函数式句法抽象语言Clojure，一门函数式OO语言Scala，一门支持协程的通用并行语言Go，以及几个动态脚本语言Lua和Ruby，算是基本完成目标吧。</description>
    </item>
    
    <item>
      <title>William C. Lowe</title>
      <link>http://blog.zhouyiyan.cn/blog/william-lowe/</link>
      <pubDate>Tue, 29 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/william-lowe/</guid>
      <description>IBM有很长的历史，也有很多个英雄，William C. Lowe肯定算是一个。IBM并不是第一个造出个人电脑的公司，但是却应该是第一个开放其全部架构的公司，也正是如此，IBM尝到了开放标准带来的好处。</description>
    </item>
    
    <item>
      <title>Embedded Class</title>
      <link>http://blog.zhouyiyan.cn/blog/embedded-class/</link>
      <pubDate>Sat, 26 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/embedded-class/</guid>
      <description>Java里面的嵌套类，是指定义在某个类中，但却没有静态关键字的内部类。这种类的可读性很差，因为其方法可以访问到父类实例中的字段，而且申明的时候必须连带父类的名字一起才可以。除非是想逐步地拆分一个超级大类，否则实在很难想出为什么要使用内部类。在迁移一个内部类到Go语言的过程中，我使用了组合的方式，比如说
type SubClass struct { *ParentClass }  这样，我就可以“肆无忌惮”的调用父类实例中的方法和字段。组合是在Go语言中被大量使用的，并且可以替代对象继承的方法。一个在Java语言中奇怪的用法，对应到了Go语言中则变得如此的自然。那如果反过去看呢？Java的内部类实际上是组合了父类对象的一种用法，可惜这种关系只是一对一的。</description>
    </item>
    
    <item>
      <title>变了味的面试</title>
      <link>http://blog.zhouyiyan.cn/blog/strange-interview/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/strange-interview/</guid>
      <description>我一直不是很擅长面试，特别是在白板上写代码，难道他们假设程序员一天到晚是在白板上工作的么？还有些变了味的面试，记得有一次，遇到一个字符串分割逆序的问题，我使用了Java的字符串split和StringBuilder的方法，大概是这样的
String[] words = str.split(&amp;quot;\\s&amp;quot;); for (int i = 0; i &amp;lt; words.length; i ++) { Stack stack = new Stack(); for (int j = 0; j &amp;lt; words[i].length(); j ++) { stack.push(words[i].charAt(j)); } StringBuilder builder = new StringBuilder(words[i].length()); while (!stack.isEmpty()) { builder.append(stack.pop()); } words[i] = builder.toString(); } return StringUtils.join(words, &amp;quot; &amp;quot;);  面试官当时也没说什么，也没有让我做任何改进，我也只是稍稍解释了下这种方法的不足，应该换成stream操作，配合逆序迭代器，可以实现更高效率的方法。面试的结果相当不好，一开始我不能理解，怎么我这么强的人会被拒。后来google了才知道，妈的，原来你要这个解法啊？！补充一下，“这个解法&amp;rdquo;是指不需要额外stack的原地交换方法。
只能说我自叹弗如了……我还是做回我自己的黑客吧，不跟他们玩了。</description>
    </item>
    
    <item>
      <title>不同语言的迭代器</title>
      <link>http://blog.zhouyiyan.cn/blog/iterator-in-different-languages/</link>
      <pubDate>Fri, 18 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/iterator-in-different-languages/</guid>
      <description>最近在通过《七周七语言》快速学习Ruby，目前是第二天。Ruby真的很适合做原型开发，特别是那种需要在白板上写写画画的情况，如果直接用Ruby的话，写的人方便，看的人也理解的快。最令我惊讶的就是Ruby的代码块了。
[1..16].collect {|x| x * 2}  这不就是Scala里面map吗？
List.range(1, 16).map((x) =&amp;gt; x*2)  当然继承自Lisp的Clojure更加简单，但更难懂。
(map #(* 2 %) (range 1 16))  所以从精简程度上，Ruby和Lisp系是比较接近的，而且形式上，以及和面向对象的角度上，都是更易于理解的。</description>
    </item>
    
    <item>
      <title>系统演化</title>
      <link>http://blog.zhouyiyan.cn/blog/architecture-evolvement/</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/architecture-evolvement/</guid>
      <description>机缘巧合，手上这个项目开发已经有将近五年了。如果算上之前自动化测试和技术支持的时间，我接触这个项目都快八年了。八年的时间将近我的开发生涯四分之一的时间，我想一般开发人员应该都没有这种机会能够在一个项目上花费这么多年的时间。它伴随着我从一个新手，一直到现在。这个项目一开始的起点就很高，踩着web 2.0的步伐，走REST服务，跨repository的设计，以及相当精深的XML背景。它一跃成为公司的战略部署之一，为全球用户提供将近六千万页的帮助文档。
当然，系统还是不断的进行着演化。项目负责人经常会问我，为什么我们要这个功能，那个功能。我说就应该是这样。
“那么，为什么我们一开始不这样做呢？”
这个问题很有趣，因为它假设如果一个想法是好的，那么一开始就应该想到，并且应该马上就采用。而且这个问题还有一个推论，既然过去没有采用这种方法，那么现在也不应该。
当然首先，这个想法我的确没有第一时间想到，这是有原因的。任何架构决策都必须考虑当时的需求、现存的系统和环境，以及最重要的，最决策人的经验和能力。即使我想到了，也不会立刻使用，毕竟任何技术的运用也依靠该技术本身的成熟度，以及实施团队的能力。从现在看来，当初并不具备采用该技术的条件。那么既然如此，是否表示现在也不应该采用呢？这个很难讲，因为项目有很多隐含需求，甚至是一些不上台面的需求。作为技术人员，我没有理由和投资方去讨论那些不涉及技术的方面，尤其是双方都心知肚明的潜规则。所以大多数时候，只能先斩后奏，尽我所能。
这里好多东西都不能说明，姑且保留到将来有机会再看吧。</description>
    </item>
    
    <item>
      <title>霍桑效应</title>
      <link>http://blog.zhouyiyan.cn/blog/hawthorne-effect/</link>
      <pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/hawthorne-effect/</guid>
      <description>Andy Hunt在他《程序员的思维修炼》一书的第五章——大脑调试——中提到了“霍桑效应”，大致是指人在知道自己被审视的情况下会改变自己通常的行为方式。这让我想起Vivian同学提到的关于用户研究的HERO方法，难道他们不知道霍桑效应么？
我倒并不是反对用户研究，但几次亲身参与的机会让我多少对这种方法的效果有疑问。首先，对方经常使用诱导性问题，而非开放型提问。这不免让我感受到一种压力，也就是对方已经心里有谱，只是希望从我这里得到更多肯定的反馈罢了。而且好几次，研究员直接给出他们的答案，对我的反馈直接忽视。也许，参与实验的人和进行前期研究的人应该分离，这样他们会少一些定式思维。其次，这类用户体验设计往往受到很多制约。有一次，在参与一项未来产品的用户体验设计种，对方对该产品的认识还没有我这个受访者多，原来他们的美国投资方根本没有给很多的材料。这种流于用户界面式的体验设计，最终只是另一种形式的界面设计而已。</description>
    </item>
    
    <item>
      <title>HTTP服务器内嵌HTML模板引擎</title>
      <link>http://blog.zhouyiyan.cn/blog/distributed-object-and-web-tier/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/distributed-object-and-web-tier/</guid>
      <description>最近在读Martin Folwer的企业应用架构。这是一本2004年的书，现在看来很多观点都已经成为流行的框架了。虽然我并没有在开发企业级应用，但还是被这本书深深吸引。在讨论分布式对象的时候，Martin表示并不看好分布式对象，因为在大多数情况下，分布式部署对象的效率，总是比在单个节点部署所有对象然后配合集群的情况要差。这让我重新考虑了目前正在进行的前端应用和后台服务分开部署的尝试。
在传统Java的Web应用中，前端页面和后台逻辑被统一包装在一个WAR形式的压缩包中，然后通过应用服务器统一部署。从应用性能的角度考虑，也可以采用动静分离，也就是把相应前端HTML页面、JS脚本和CSS样式文件单独部署在CDN或者支持高速读取的HTTP服务器上，然后单独部署后台服务，配合缓存服务器进行截获式、或者嵌入式缓存支持，以提高性能。
比如说我就很喜欢ElasticSearch的监测模块，设计的很好，可以通过各种外部扩展来图形化ES集群的运行状态，如ElasticHQ就只是由HTML、JS和CSS组成的前端页面，然后通过访问后端监测服务来读取数据。这种noBackend风格的设计正是我追求的一个目标，通过分离Web应用和后台服务，提高系统的扩展性。但实际上存在两个困难：一是服务器端必须实现CORS跨域资源共享协议，二是可用于扩展的Web应用必须足够简单。在实际的项目中，第二个困难很难克服，因为页面需要注入URL和参数，而且本身还使用了HTML模板，无法通过JS完成所有的工作。一种方案是在HTTP服务器中安装脚本模块，通过脚本实现简单的HTML模板，比如说安装了Lua模块的Nginx。
把HTTP前端应用和后台服务分离本身是符合分层架构的要求的，但是如果前端植入了脚本，是否属于Martin所描述的分布式对象的范畴呢？前提是植入的脚本不能涉及后台服务，那么所有的服务还是统一由客户端运行的前端页面发出，那么至少在后端并不存在分布式对象的情况。但如果植入的脚本依赖后台的某个服务，那么单次页面调用势必造成两次远程调用，倒不如还是在后端来实现脚本需要的功能会比较好。
因为我需要的只是一个HTML模板和少量的配置读取，使用Lua脚本应该绰绰有余了。</description>
    </item>
    
    <item>
      <title>特大交通拥堵</title>
      <link>http://blog.zhouyiyan.cn/blog/smart-traffic/</link>
      <pubDate>Sat, 14 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/smart-traffic/</guid>
      <description>昨天是上海有史以来的一次特大暴雨，超过了海葵和2008年的大暴雨。我是5点从张江出来的，堵在了陆家嘴地区，晚上9点才到家。陆家嘴地区堵得最厉害，由于世纪公园南面的浦电路和东面的罗山路出现了路面积水情况，使得两条主要高架干道都瘫痪了，下班的车流不得不改走陆家嘴附近的三个隧道。更糟糕的是浦西到浦东的车流因为浦东路面拥挤的关系堵在了隧道出口附近，同时把本来可以疏散车流的浦西方向隧道入口给堵死了，进一步加剧了拥堵情况。信号灯则完全不给力，一个方向上的车流把十字路口给堵死了，绿灯给另一个方向的时候根本没机会开过去，完全就是一个方向上的车在开。
从信号灯的设计上来看，完全可以切换手动模式或者采取单向通行优先的方式，拉大红绿等转换间隔。即使一个方向上的车阻塞了路口，也可以给另一个方向上的车流更长时间的绿灯，这样阻塞路口的车总是会开走的。而且优先让车辆离开拥堵区域，限制车流进入拥堵区域，才是解决问题的有效方法。
这类事件应该得到重视。</description>
    </item>
    
    <item>
      <title>职业规划</title>
      <link>http://blog.zhouyiyan.cn/blog/career-development-as-an-architect/</link>
      <pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/career-development-as-an-architect/</guid>
      <description>在公司里有专职架构师这么一说。从新的职业规划路线图上来看，定义架构是能力体系中的一个独立的分支。每个能力成熟等级，对应职称中的一个级别，比如说我目前的级别，在软件开发和支持路线上属于顾问软件工程师，而对于架构师路线上，属于没有任何修饰词的架构师职称。不过，这两者没有直接的关系，而且通常来说，不同路线上的职称通常只能差级等价，也就是说我其实对应一般架构师下面一个等级，是初级架构师。
不同于软件开发和支持路线，架构师从初级开始就需要经过一个专业评审委员会的审核，需要准备相关的材料，来证明自己
 具备架构师的能力； 正在行使架构师的职责并有良好结果；同时 通过相关正规课程的培训。  其实在我所在的技术路线上，也有软件架构这个专长，但两者是不一样的。专职架构师关注的更多的是系统级别以上的架构，通常是解决方案，企业级的IT架构；软件架构更多的是关注单个系统的架构，对应专职架构中的组件架构这个部分。
对于实验室工作的工程师来说，基本是没有希望能够过哪怕是初级架构是的认证的。因为我们平时接触不到客户的项目，往往是公司内部的系统架构和设计。而且这类项目一般都是长期项目，架构基本稳定，即使有改变也属于演进式的，不可能从头让我们有机会做架构。</description>
    </item>
    
    <item>
      <title>GoLucene Week 12 Dev Status</title>
      <link>http://blog.zhouyiyan.cn/blog/golucene-week-12-dev-status/</link>
      <pubDate>Sat, 24 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/golucene-week-12-dev-status/</guid>
      <description>In early weeks of the migration, I tried to implement all the logic that might be required to read the index. But I found it rather inefficient, so later I tried to create various stubs with specific panic messages. So whenever I hit a panic complaining about missing implementation, then I do the migration. It would save me a lot of time to avoid migrate unnecessary stuff. It does help and I have been hitting several panic messages now, including</description>
    </item>
    
    <item>
      <title>青岛度假后三天</title>
      <link>http://blog.zhouyiyan.cn/blog/qingdao-vacation-day-4-5-6/</link>
      <pubDate>Fri, 23 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/qingdao-vacation-day-4-5-6/</guid>
      <description>崂山，是的，假期的第三天我去“爬”崂山了。开了将近两个小时，中间很规矩的遵循了40公里每小时的限速，也见到了极不常见的村庄标识。到了崂山的仰口景区后，果断了缆车上到顶，然后怕了唯一的觅天洞，到达顶点后吃了午饭。在山顶上看海的感觉很棒，而且海水的颜色也算比较蓝。这种感觉和塞班是不一样的，但在国内算是极好的了。
下山也果断的选择了索道，即便如此，小腿还是算疼了两天。
为了周五避免开夜路，第四天便早早的退了房，驱车赶到连云港，玩了花果山景区。话说这个地方性价比是在太低，前后花了145元一个人，结果没什么可玩的，风景也一般。
最后一天，从连云港出发，从早上10点出发，中间在大丰吃了午饭，回到上海的时候碰上沪嘉高速拓宽堵车，直到下午五点过后才到家。于是，这六天的假期结束了。</description>
    </item>
    
    <item>
      <title>青岛度假第二第三天</title>
      <link>http://blog.zhouyiyan.cn/blog/qingdao-vacation-day-2-3/</link>
      <pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/qingdao-vacation-day-2-3/</guid>
      <description>酒店送的早餐比上次的希尔顿要好些，但我也只吃了些面包+果酱，然后便去了日照的主要目的地——海边。日照的海滩据说要比青岛好一些，比较干净。沙滩的干净程度主要和贝壳的含量和沙子的粗细有关，从这两个指标来看，日照的沙滩的确不错。注意的是，日照和青岛一样，有很长的海岸线，我去的是第三海滩，人少些，而且还有一个不错视角的广场。
午饭和晚饭都是在酒店附近的商业广场解决的，停车也比较方便。第三天的早餐我也去那边吃了肯德基。酒店附近有一家加油站，不过是自助的，还好碰上一位好心的山东大叔，给帮忙加了些油。
第三天也没有出去逛，本来中午想去大吃一顿，但从节约的角度出发，就直接去了青岛。两个小时后，经过胶州湾大桥，到了青岛，入住了公司协议的香格里拉酒店。酒店的位置本来不错，但是门口的一条路因为修地铁的关系，外出只能靠开车。中午吃了一顿必胜客，组合了工作日午餐和下午茶，三个人才吃了120，赚了。
傍晚时分，去看了栈桥和八大关。顺便说下，栈桥在维修，没去成；八大关太复杂，基本上只是随便望了一下。晚上去啤酒节吃了海鲜，但是没人会喝酒，可惜啊。</description>
    </item>
    
    <item>
      <title>青岛度假第一天</title>
      <link>http://blog.zhouyiyan.cn/blog/qingdao-vacation-day-1/</link>
      <pubDate>Sun, 18 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/qingdao-vacation-day-1/</guid>
      <description>早上9点出发，在家附近的中石油加满了油，随后上沪嘉高速。在先锋服务区又补了55元的油，然后经沈海高速到达日照。全程600公里左右，于下午四点到达酒店，中间在大丰服务区吃了午饭，休息了一个小时。这是我继千岛湖之后，又一次开长途，因为实现准备充分，有红牛加全程薄荷糖，所以基本不觉得累。
中途遇到一辆宝马730，估计是开了定速巡航，而且特别喜欢开中道，哪怕两边空着，中间前后有车，它也会开进去。我跟着开到沈海中段的时候，跟丢了。后来又遇到一辆奥迪A4，应该也是定速巡航，跟我前前后后好几个周旋后，在山东境内失去踪迹。路上有些假想对手也是好的，不会觉得犯困。
酒店里面有室内游泳池，水很干净，人也很少，很舒服。房间还算干净，但总是不觉得像四星的。房内依然只有有线网络，看来有必要下次备一个有线转无线的路由器。
洗完澡了，准备找吃的去咯~</description>
    </item>
    
    <item>
      <title>GoLucene Week 10 Dev Status</title>
      <link>http://blog.zhouyiyan.cn/blog/golucene-week-10-dev-status/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/golucene-week-10-dev-status/</guid>
      <description>Interface null check Nil pointer method invoke Byte range Clone        Since the migration of the basic flow is done, with a few places that would throws a panic, I have been focusing on fixing defects in the last two weeks. Some basic changes include:
 Rewritten IndexReader and IndexReaderContext using AbstractClass pattern.</description>
    </item>
    
    <item>
      <title>自以为是</title>
      <link>http://blog.zhouyiyan.cn/blog/dont-believe-yourself-to-be-correct/</link>
      <pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/dont-believe-yourself-to-be-correct/</guid>
      <description>“（博士）他说自己居然自以为是地认为⋯⋯，不过老师（我）倒觉得他这种想法才是自以为是⋯⋯”</description>
    </item>
    
    <item>
      <title>GoLucene Week 8 Dev Status</title>
      <link>http://blog.zhouyiyan.cn/blog/golucene-week-8-dev-status/</link>
      <pubDate>Sun, 28 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/golucene-week-8-dev-status/</guid>
      <description>Abstract class are ported into interface plus an impl struct. Remove an item from a slice About synchronized keyword        It&amp;rsquo;s the 8th week of GoLucene development. There are two major milestones: 1. Switch to Lucene 4.4 code base. 2. Fixed all compile errors.
It didn&amp;rsquo;t take much effor to migrate existing code to 4.</description>
    </item>
    
    <item>
      <title>Migrated to Lucene 4.4</title>
      <link>http://blog.zhouyiyan.cn/blog/migrated-to-lucene-4.4/</link>
      <pubDate>Wed, 24 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/migrated-to-lucene-4.4/</guid>
      <description>Lucene 4.4发布了，大部分的改动属于写索引和搜索的部分，所以把golucene的代码基迁移到4.4并没有费多大劲。</description>
    </item>
    
    <item>
      <title>Migrated from Wordpress to Gor</title>
      <link>http://blog.zhouyiyan.cn/blog/migrated-from-wordpress-to-gor/</link>
      <pubDate>Mon, 22 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/migrated-from-wordpress-to-gor/</guid>
      <description>在博客当机三次以后，我终于下定决心转到静态博客，当然首选Gor，因为是用Go写。如果有空我会贡献patch滴~ 当然备份也解决了，直接使用BTSync进行多站点同步。将来也会考虑使用脚本自动化发布的过程，不过目前就先这样了。</description>
    </item>
    
    <item>
      <title>再次当机</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-07-15-404/</link>
      <pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-07-15-404/</guid>
      <description>早上手抽，升级了下nginx。残念的是又忘记了备份index.html，造成系统当机。好不容易恢复了nginx，发现php5-fpm又起不来了。看来内存始终是个软肋，要把静态化博客提上日程表了。</description>
    </item>
    
    <item>
      <title>家庭Wifi覆盖施工完毕</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-07-11-401/</link>
      <pubDate>Thu, 11 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-07-11-401/</guid>
      <description>施工前： 宽带通过入户线对接书房网线接口，通过书房的无线路由器连接两台电脑和一些设备。客厅无Wifi，只能通过3G上网卡（50G流量的那种）勉强上网。
施工后： 宽带通过入户线对接书房网线接口，从无线路由器的端口1接出一根网线，走回书房网线接口，回到信息箱，对接客厅网线接口，然后通过客厅的无线路由器覆盖客厅的所有设备。同时书房和卧室之间利用扩展器延展Wifi网络，达到所有房间Wifi全覆盖。
工具和材料： 剥线钳、网线测试器、UY2接线子、老虎钳和一根网线
注意事项： －网口的接线部分要拆除，网线要剪断然后按顺序直接接到槽内的网线； －K2也是可以的，但UY2还有油可以防潮，不错； －测试信号的时候，两边应该都是1236； －两个路由器可以使用NAT，也就是不同网段的方式。
感想： 装修的时候完全没有想过网络的事情，只是说从信息箱接出几根网线就可以了，完全没有考虑无线覆盖、路由器的位置、电源等问题。等真的要使用了，才发现问题一箩筐。目前的施工方案还是有些问题，比如说有一个网口装修完成后一直没有接，这次只能自己动手，但是因为没有打线工具，电线没有完全嵌入插槽，估计以后还要返工。另外网络扩展器性价比很低，散热不好，扩展能力又差，如果可以的话，宁可用短距离的WDS无线扩展来替代。</description>
    </item>
    
    <item>
      <title>双路由器</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-07-10-397/</link>
      <pubDate>Wed, 10 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-07-10-397/</guid>
      <description>正在尝试单根网线双路由器达到WIFI全覆盖的目的，用的是这里看到的方法。</description>
    </item>
    
    <item>
      <title>关于目录创建的一个代码Bug</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-07-08-394/</link>
      <pubDate>Mon, 08 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-07-08-394/</guid>
      <description>最近在项目中发现一个bug。原本单线程运行的一段代码，为了提高吞吐量，改成了多线程运行，结果报出文件目录无法创建的异常。问题出在下面这段代码： if (folder.exists() || folder.mkdirs()) {&amp;hellip; 根本原因在于多线程下，只有创建成功的那个线程会在mkdirs()的时候返回true，其他都返回了false。这个问题也出现在Lucene的文件锁里面。有两种解决方法，一种是把判断改成： if (folder.exists() || folder.mkdirs() || folder.exists()) {&amp;hellip; 另一种方法是在物理上分离Lucene索引的存放位置，不要出现父子目录，因为在多线程调度的情况下，子索引可能会先被创建，这个时候就和父索引中的锁产生冲突。当然这种冲突时很少见的，我遇到的情况是在10线程的时候才陆陆续续遇到。</description>
    </item>
    
    <item>
      <title>JWNR2000配合WN1000RP扩展WIFI网络</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-07-07-384/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-07-07-384/</guid>
      <description>目前家里的WIFI主要靠部署在房屋一角书房里的JWNR2000，其他房间基本无信号，除了联通书房和客厅的走廊附近还有些许信号。于是利用惠惠在新蛋上淘了个129的WN1000RP，想解决家里WIFI覆盖不均衡的问题。结果令人失望，WN1000RP虽然能穿透两堵墙，如果装在主卫，那么只能覆盖卧室一半的范围，而且速度很差。
于是乎开动自己工程师的脑筋，总算弄明白了。无线覆盖的问题，基本上依赖入户线、路由器、和插座的位置，扩展器什么的只能辅助，解决不了根本问题。毕竟无限不能覆盖的地方，扩展器也无能为力。</description>
    </item>
    
    <item>
      <title>移植进度</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-07-07-387/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-07-07-387/</guid>
      <description>目前的进度是每周大约1000行，假设最终代码量在40000行左右，那么还有35周，也就是9个月的时间，或者说明年三月份。这当中Lucene自己估计会有9个不同的版本发布，说不定还会有5.0。不过，如果能有个可以工作的Lucene的Go版本，对接下来进一步学习Go语言优化技巧来说，是很有好处的。这同时也是我2015年计划的一部分，所以不算晚。</description>
    </item>
    
    <item>
      <title>进展缓慢</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-07-05-382/</link>
      <pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-07-05-382/</guid>
      <description>Lucene 4.3.1在6月份发布了，而4.3的转化还没完成，根本跟不上进度呢⋯⋯</description>
    </item>
    
    <item>
      <title>写文档</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-07-04-380/</link>
      <pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-07-04-380/</guid>
      <description>一定要克制住写代码的冲动！写文档是一种更加高级的脑力劳动，要求对项目的各个方面，各个层次，特别是从用户的角度，把项目描述清楚。</description>
    </item>
    
    <item>
      <title>革命</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-07-02-376/</link>
      <pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-07-02-376/</guid>
      <description>革命， 同时确保不受外敌侵扰，是一件异常艰难的任务。等等，我说的可不是政治，而是《革命机》哦～</description>
    </item>
    
    <item>
      <title>什么时候应该使用panic/recover？</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-28-372/</link>
      <pubDate>Fri, 28 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-28-372/</guid>
      <description>Effective Go已经给出了很明确的建议，如果能够大幅度简化错误处理逻辑的时候，可以使用panic/recover，当且仅当针对内部API来使用。在Lucene 4.3的DataInput中，大多数读取基本类型的方法都会使用到readByte和readBytes方法。如果使用错误代码返回的方式，那就会看到大量重复的错误代码判断的逻辑，因为很多方法都会多次调用readByte方法。换成panic/recover以后，代码简单不少。有个小诀窍就是使用一个公共的错误处理方法，比如说 func catchIOError(err *error) { if e := recover(); e != nil { if e2, ok := e.(Error); ok { *err = e2 } } } 然后在调用的方法中只要加一行就好了 defer catchIOError(&amp;amp;err)</description>
    </item>
    
    <item>
      <title>不再属于我的晚8点</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-26-368/</link>
      <pubDate>Wed, 26 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-26-368/</guid>
      <description>10点，打开电脑，才发现8点的开会被完全忘记了，而且还是两个互相冲突的。不得已，只能参加12点的老美那个时区的会，而另一个只能明天补听录音了。哎，晚8点已经不再属于我，只属于那个在床上酣睡着的小宝贝。</description>
    </item>
    
    <item>
      <title>礼数小姐和本</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-25-366/</link>
      <pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-25-366/</guid>
      <description>我当然把自己当成本，是的，一定是那样。礼数小姐，姑且称为D吧。故事是这样的，我作为后端技术负责人，尽管不是本职工作，但基本上对项目后端的所有代码都会进行审查。D小姐应该是知道这件事的，因为她（他）也鼓励我把代码审查这件事做好。有一次，小C同学在没有和我充分沟通的前提下，在一个重要构建的前两天，提交了大量的修改以改进一个小功能。任何涉及底层API的修改都必须非常谨慎，更何况是重要构建的前夕。我无法接受这种情况，于是便威胁说要撤销这次签入的代码。后来在合并我本地代码的时候，发现小C的代码碎片化严重，由于没有采用渐进式API迁移，几乎所有相关的借口都被改写。一怒之下，我便撤销了这次代码。（事实上，直到项目的末期，这个改进才经由另一个同学用渐进式的方法加以实现了。）问题便来了。D小姐认为这伤害了小C的感情，是不妥当的，于是便对我进行了严厉的批评，还重新制定了游戏规则，要求所有冲突的协调要经过她，并要求小C和小I加强对中国团队代码质量的审查。为了晋升，我只能把自己至于安全区内，可是其他同学却经常受到小I的骚扰，以至于现在有任何冲突，他们只会说“好的，我知道了”，而不是站起来提出来自己的意见。
“这种滥用礼貌的结果就是严重的平庸⋯⋯组织里面都是假面孔，没有真面目。身处其中的人们被迫整天戴着面具。”——项目百态，模式55</description>
    </item>
    
    <item>
      <title>活在当下</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-24-363/</link>
      <pubDate>Mon, 24 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-24-363/</guid>
      <description>什么是活在当下？或许从另一个角度解释会更好&amp;mdash;-他的人虽然在这里，但是他的心却不在这里。因为他拒绝活在此时此地，他想要赶快爬到山顶，但是一旦爬上去之后仍然不快乐，因为山顶立刻就变成＂此地＂。</description>
    </item>
    
    <item>
      <title>Channel和synchronized关键字</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-22-358/</link>
      <pubDate>Sat, 22 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-22-358/</guid>
      <description>使用Go语言的Channel和GoRoutine可以实现很多需要线程同步的功能，比如说Java中synchronized关键字。通常使用synchronized是为了线程安全，防止读写冲突，并非所有的情况都需要同步。比如说在Lucene的SegmentCoreReaders中对关闭事件监听的功能中，添加和删除监听器的动作并不需要强制同步，而关闭事件的触发，也不需要同步进行。使用异步单Actor模式能够很好地防止读写冲突，同时减少同步带来地开销。
但是这种机制也存在缺点。GoRoutine默认是在单线程上运行的，虽然Go语言本身在诸如Sleep和IO操作中主动让出CPU控制权，但是本质上感觉和Java一样，都是非抢占式线程调度。结果就是，如果前面的GoRoutine没有运行完毕，那么后面的用来避免读写冲突的异步Actor也无法被调用。至于GoRoutine内部有没有优先级，这个我暂时还不清楚。
所以对于真正需要同步的操作，还是应该使用锁。而那些可以异步执行，同时对实时性要求不高（至少没有副作用）的功能，可以通过Channel和GoRoutine来实现。</description>
    </item>
    
    <item>
      <title>创新和发专利</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-21-355/</link>
      <pubDate>Fri, 21 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-21-355/</guid>
      <description>这是一个关于创新和发专利的吐槽。众所周知，我所在的公司在专利申请领域一直处于领先位置。公司内部对于发表专利十分的看重，这和技术路线员工的职业晋升几乎就是挂钩的。一个人可以在项目上表现平平，但如果发表了几篇专利之后，自然也可以成为周围同事津津乐道的“大拿”。于是乎，为了发专利而发专利的时间屡见不鲜，很多专利和发表人本身的领域毫无关系，而且质量层次不齐。
我觉得专利和项目经历一样，会跟着你一辈子，出现在你的履历里，作为你光辉历史的映衬。如果专利都是“乱七八糟”，就好比项目没有线索，东做一块，西做一块，如何能体现我们技术人员的专业性呢？还是应该遵循宁缺毋滥的原则，毕竟我们的技术生涯还很长，要好好规划才是。</description>
    </item>
    
    <item>
      <title>客户支持</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-17-352/</link>
      <pubDate>Mon, 17 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-17-352/</guid>
      <description>周四要去做客户支持，这两天恶补DB2安全的知识。</description>
    </item>
    
    <item>
      <title>Go没有IDE</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-16-347/</link>
      <pubDate>Sun, 16 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-16-347/</guid>
      <description>当意识到翻译Lucene本身已经算是个大项目的时候，我开始认真审视是否需要IDE的支持。Java肯定是需要IDE的，且看那包管理机制，TDD，以及jDepend，就知道在没有IDE的情况下，要搞清楚大量类之间纷繁复杂的关系是多么的困难。Go和Scala都更像C，允许程序员在一个文件中存放相互关联的，但有不足以构成一个包的内容。而且Go的编译器是如此之快，事实上它只是做了部分编译，而且还硬性规定不能循环依赖（bravo！），不过这让增量式开发成为可能。
好吧，重构该怎么办？方法跳转该怎么办？Emacs、Vim、Sublime Text 2只能算是编辑器，即使有强大的编译器，插件辅助，或者索性shell，都不是很方便。IntelliJ IDEA的插件还不如Sublime Text 2配上GoSublime和GoCode来的强大。Eclipse的Go插件看上去更有希望，但是Eclipse本身的慢，让我这个IntelliJ IDEA重度用户完全无法接受。所以只剩下Sublime Text 2勉强还能用用。
但是，对于任何严肃的大项目来说，没有IDE的支持真的可以么？</description>
    </item>
    
    <item>
      <title>Go的错误处理机制太麻烦了</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-16-350/</link>
      <pubDate>Sun, 16 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-16-350/</guid>
      <description>不觉得Go的错误机制麻烦的人肯定没用Go写过文件解析器，想想每个字段读取的时候都要处理IO错误的情形吧！</description>
    </item>
    
    <item>
      <title>Dropbox已死</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-13-344/</link>
      <pubDate>Thu, 13 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-13-344/</guid>
      <description>用了BT Sync好几天了，部署在家里、办公室和云服务器上，实现地点全覆盖。这同步速度不是一般地快哦，而且等我回到家或者到公司的时候，发现两地已经通过云服务器同步完成了。云服务器的租用费较贵，但是还能做其他用处，所以摊下来的成本绝对比Dropbox要便宜。</description>
    </item>
    
    <item>
      <title>翻译Lucene到Go</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-12-342/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-12-342/</guid>
      <description>进度比我预计的要慢很多。目前接触到了新的Reader系统，IndexSearcher的一部分，以及Collector体系。现在正在磨Directory部分的代码，距离真正的算法Similarity部分还很遥远。看来预留3个月时间并不算多啊。</description>
    </item>
    
    <item>
      <title>中国设计</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-11-340/</link>
      <pubDate>Tue, 11 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-11-340/</guid>
      <description>实验室里掀起一股中国设计潮流，虽然事中没有看到什么中国设计的标志或影子，但是这种志气总是好的。但是今天了苹果WWDC的发布视频后，我很遗憾地说，中国制造或许都还不咋地呢⋯⋯</description>
    </item>
    
    <item>
      <title>Go语言中处理抽象类的方法</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-09-335/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-09-335/</guid>
      <description>在移植Java中的抽象类到Go的过程中遇到这样一个问题。原先的Java代码中，有一个继承自某个接口A的抽象类C，它包含自己的字段，也声明了一些保护方法供后代重载使用，同时还声明了一些公开方法，但并没有实现任何上级接口的方法。这个抽象类可以理解成为对上级接口的扩展，和读写接口有些类似。
Go语言中并没有对应的抽象类概念，但有两种可能的方法。  使用嵌套接口。把该抽象类分解成一个新的接口B，以及一个抽象结构。抽象结构实现接口B的方法，但由于接口B嵌套了接口A，所以从理论上该抽象结构并不算是一个接口B的实现。子类则通过嵌套这个抽象结构的方式，获得其声明的保护方法，同时通过实现接口A的方法，以及用代理将接口B的方法重定向到该抽象结构中去。这样子类就同时可以看作是接口A和接口B的实现。 直接嵌套抽象结构。Go语言中函数成了一等公民，可以通过声明一个新的结构，并把函数指针一起声明出来。如果给出实现的，则通过一个私有的方法将抽象结构附带的函数实现给出来。同时，还必须让该结构实现接口A的所有方法，当然实现可以是简单的panic提示。由于这个抽象结构不是接口，所以子类必须嵌套这个抽象结构。  最终的实现我选择了方案1。因为代码实现上更加清晰，避免了很多函数赋值，而且嵌套结构中的方法如果调用了子类继承的方法时，需要额外通过指针保证调用的正确性。换句话说，原先Java中很自然的多态性，都需要通过代码来一一指定，很麻烦，而且debug起来也很困难。</description>
    </item>
    
    <item>
      <title>安全座椅安装完毕</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-09-337/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-09-337/</guid>
      <description>今天抽空给我家09款小福装上了ISOFIX接口。攻略是按照这里做的，但是过程却很艰辛。首先螺丝固定的位置完全不像帖子里照片中所描述的那样，靠垫和底板的缝隙很小，工具很难插进去。其次，我装完后才知道应该用套筒扳手，淘宝卖家给的内六角扳手根本帮不上忙，最后还是用手拧的。虽然按上座椅后感觉还是可以的，但由于没有完全拧紧，总是觉得不放心，等入手套筒扳手以后再说吧。</description>
    </item>
    
    <item>
      <title>中二病</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-08-332/</link>
      <pubDate>Sat, 08 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-08-332/</guid>
      <description>对当麻来说，其他人都是“中二病”！</description>
    </item>
    
    <item>
      <title>php5-fpm又crash了</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-04-328/</link>
      <pubDate>Tue, 04 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-04-328/</guid>
      <description>已经是第三次，这次逼得我把max_children降到8了。唉……难道逼得我用静态博客么？</description>
    </item>
    
    <item>
      <title>Ridicuously Simple</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-01-326/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-01-326/</guid>
      <description>This is the second time that I have been impressed by the word, &amp;ldquo;simple&amp;rdquo;. First, &amp;ldquo;Simple Made Easy&amp;rdquo;, by Clojure&amp;rsquo;s invetor, Rich Hickey. And now, &amp;ldquo;ridicuously simple&amp;rdquo;, by ØMQ&amp;rsquo;s creators. I feel vigorated because I share the same dream that one day, software can connect with each other, not only by those big companies, but also by individuals. Software can talk to each other to obtain more insights, knowledges, capabilities, and it also starts from basic network.</description>
    </item>
    
    <item>
      <title>“他的履历简单的可怜⋯⋯”</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-06-01-323/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-06-01-323/</guid>
      <description>黑镜第二季第三集，政客门罗讥讽杰米的简单背景，说他现在的工作是如此的简单。真是荒唐可笑，殊不知作为政客，你不也正扮演者类似的角色么。想到这里，我会心一笑。</description>
    </item>
    
    <item>
      <title>Go语言的数据竞争检测</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-30-317/</link>
      <pubDate>Thu, 30 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-30-317/</guid>
      <description>Go在1.1里引入了数据竞争检测，通过增加一个参数-race来打开。这个功能让我感到格外意外，因为在Java或者Clojure中，官方给出的几种典型情况都是不可能发生的。在Java里面，变量或者出于当前线程的作用域，或者是调用者作用域但以final形式给出；而在Clojure里面，所有的数据都以值类型传递（当然背后实现采用的是STM、线程本地变量和原子引用），也不存在竞争的情况。作为一种有趣的并发编程模型，Gorutine的光环一下就被数据竞争这个问题给褪去了。 </description>
    </item>
    
    <item>
      <title>升级至Lucene 4.3.0</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-30-315/</link>
      <pubDate>Thu, 30 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-30-315/</guid>
      <description>项目上原来使用的是Lucene 3.5。从Lucene 2.9.2升级上来的过程很顺利，因为大多数老的API从2.9.0开始被表明为废除，而且给出了很好的迁移建议，所以整个过程其实在2.4升级到2.9的时候就已经基本完成了，除了少数很hack的API（比如说Directory的touch动作）。这种使用Deprecate标签并给出改动建议的方式是API升级的一个很好的实践，体现了API提供者对使用者的一种关心和体谅。但是从3.5到4.3的过程却异常艰辛，唯一可以参考的就是这份迁移指南，以及Google搜索。  先是很多类的包名改变了。这个简单，利用IDE的自动整理包导入来解决。 IndexReader的很多方法转移到了DirectoryReader下面。这个类似于FsDirectory和Directory的关系，但是新的AtomicReader/CompositeReader/DirectoryReader体系我还不是很理解，似乎为了性能考虑，要写很多重复的代码了。 许多使用字符串的地方被替换成了字节数组引用。这让我想起了Go的Slice⋯⋯ Anyway，所有分析器的构造函数现在接受CharArraySet了。 SearcherWarmer没有了。尼玛，标成experimental的API真是短命啊。 TermEnum被以Fields为中心的一系列API替换了，避免了不必要的关闭动作。但神奇的是，迁移指南本身推荐的MultiFields类本身就是实验性质，我滴天哪！而且指南的编排也有些问题，我愣是第一遍没找到，还是看了这个StackFlow上的问题才知道的。 FieldSelector没有了。不过还好，大多数原先的API接受直接使用字符串集合来制定字段。 IndexReader.lastModified()也没有了。搜了一下论坛，建议使用IndexReader.getVersion()来判断索引的更新情况，但这显然不能满足我的要求。只好自己写了一个索引文件的时间戳判断。  虽然很麻烦，但是迁移总算是完成了。</description>
    </item>
    
    <item>
      <title>撞车了</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-29-312/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-29-312/</guid>
      <description>第二次撞差头。这次发生在上班路上，天很热，为了省油而没有开空调。前面绿灯有开始变红灯的趋势，我跟在一辆差头后面，突然一个急刹车，还没反应过来就撞了。所幸两辆车基本是在运动中，没有硬刹车，差头的后保险杠被撞歪了一点，我则是一个瘪膛，露出了一小块保护材料。根据上次的经验，我提议200私了，因为差头上有客人，所以整件事很快的了解了。
回到车上，我感觉脚有些发软。总结经验：  天热一定要开空调； 路口要慢，宁可被插队； 和前车保持距离的同时，要对齐，否则距离感会错位； 200元多了一些，但是处理的会快一点。</description>
    </item>
    
    <item>
      <title>炮姐的启示</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-25-306/</link>
      <pubDate>Sat, 25 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-25-306/</guid>
      <description>超电磁炮第二季第6话，一开始炮姐真的很挫，但是结尾的几句话让我不得不钦佩炮姐的气魄。矢量操作的确是变态bug的存在，但也并非完全无敌，更何况这世界上本来就没有什么无敌的存在，是Accelerator自作多情罢了。真要说无敌的话，能够操纵电流、突破任意计算机网络的炮姐才是程序员们心目中的无敌存在。</description>
    </item>
    
    <item>
      <title>Go单元测试小贴士</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-24-304/</link>
      <pubDate>Fri, 24 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-24-304/</guid>
      <description>在没有IDE的情况用Go语言调试单元测试是很tricky的，尤其是在同一包的多个文件情况下，新加的单元测试不一定就是最后顺序执行的。这种情况下，如果单元测试没有通过，失败的信息也会埋没在漫长的滚动条里面。这里有一个小贴士，给新加的单元测试加一行代码，确保错误会及时中断整个单元测试： panic(message)</description>
    </item>
    
    <item>
      <title>简单就是美</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-22-299/</link>
      <pubDate>Wed, 22 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-22-299/</guid>
      <description>在度过和Go的蜜月期后，我开始写出了久违的面条函数。整个文件超过了600行，远远超过了我的Sublime Text的鸟瞰图范围。调试变得异常困难！其实根本就没有调试，在使用GoSublime插件后，我基本上恢复到了过去单靠打印语句调试的年代。于是问题也就发生了。
在重写一个Eclipse帮助系统建立TOC模块的时候，为了和EHS完美的兼容，需要过滤掉被深度引用、或者空的根节点。我先按照原先Java的版本，写了一个递归函数，检查每个TOC节点是否为空，但是结果造成了死机……好吧，很久没有写程序写到死机了。为了防止死循环，我把递归函数用宽度优先搜索的非递归队列模式写了一遍，还是不行。我又按照Clojure的风格，写成迭代器配合列表过滤，还试用了Go的函数式写法。结果还是不成功，代码是清晰许多，但是测试还是没有通过。最后回到了最原始直接的方法，对于每个TOC文件放一个变量，在解析的时候标志它是否包含任何可用链接，如果没有就是空，然后通过分析TOC引用关系，确定该TOC节点是否总体为空。 if toc.Href == &amp;ldquo;&amp;rdquo; &amp;amp;&amp;amp; toc.isEmpty { isEmpty := true for _, link := range toc.Links { if x := tocMap[link[nameLen:]]; x != nil &amp;amp;&amp;amp; !x.isEmpty { isEmpty =false break } } if isEmpty { log.Printf(&amp;ldquo;Skip empty TOC entry: %v&amp;rdquo;, toc.Title) continue } } 重写是一种很好反思现有系统的方式。通过重写成另外一种语言，程序员能够跳出原先的限制，或许可以想出更好的设计，但是风险也是并存的。任何时候多想想，选择最简单直接的方式也许才是最好的。</description>
    </item>
    
    <item>
      <title>BitKeeper和Git</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-19-295/</link>
      <pubDate>Sun, 19 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-19-295/</guid>
      <description>在看《开源的成功之路》这本书的时候（话说这本书的翻译真不行，移植竟然被翻译成端口），看到关于Linus由于工作和家庭的关系，加上Linux社区规模的增长，不能像Linux初始的时候那样及时相应补丁合并的要求，发生了Linus和社区的冲突。这个冲突最终被定性为组织规模增长后的必然冲突，而得到合理的化解。有意思的是，书中提到一个叫BitKeeper的工具，帮助Linus改变了原先每个补丁逐行检查的模式，改成更加金字塔式的委任审查机制，也帮助化解了矛盾。
后来Linux系统使用的是现在大红大紫的Git工具来管理代码，为什么不是这本书所提到的BitKeeper呢？处于好奇，我找到了这篇博客，它很好的解释了BitKeeper的一些历史情况，以及后来为什么没有被社区继续采用的原因。虽然没有使用过BitKeeper，但是从现在Git身上，的确可以看到很多BitKeeper的影子，像是每个人都拥有一个master副本等等。
另一个让我感慨的地方，就是对于这个冲突解决的过程了。其实我在项目上也同样遇到Linus的遭遇，由于项目规模的增长，我原本逐行审查变更的方式逐渐变得原来越没有效率，甚至有的时候还成为了制约项目进度的负面因素。在和团队新成员的冲突发生之后，我意识到这个项目的规模已经成长到个人无法掌控的程度，于是我果断放权，越来越多的让其他开发人员主动承担主要模块的开发工作。成果是很明显的，整个团队的开发速度得到了提升，而我也能更加专注于核心模块的开发，以及架构的进化。
历史总是不断的重演着，而我们要做的是多看书，从案例中学习，并期望这种困境能够在我们遇到前被学习到。</description>
    </item>
    
    <item>
      <title>科学方法</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-18-290/</link>
      <pubDate>Sat, 18 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-18-290/</guid>
      <description>读大学的时候应该有门课程教授科学方法，具体内容已经记不得了。但是在读禅与摩托车维修艺术中关于解决问题的科学方法时，颇有感受。内容摘录如下： 1. 问题是什么 2. 假设问题的原因 3. 证实每个问题的假设 4. 预测实验的结果 5. 观察实验的结果 6. 由实验得出结论
看似简单，但在实际工作要运用自如还是很困难的。比如说最近项目上遇到一个用户登录的问题，其实是一个包含多个错误的复杂状况，但发现问题的人简单地以＂不能登陆＂来描述问题；实际负责用户认证模块的开发人员则急于下结论，纠结于各种技术细节；“捣乱者”则趁机把大家的注意力引到无关的问题上，甚至提出一些看似合理的证据⋯⋯
当然这种缺乏条理的方法对于解决问题来说是很低效率的，团队陷于无尽的讨论和互相指责上。我参与讨论后，做了三件事情。首先是分离问题，把当前的错误表现按条列表，找出责任人，分而治之。其次，对于每一个问题，重新描述，并让每个干系人都能理解和认同。最后就是把现有手头的情况重新验证和审视，确保眼见为实。最终，问题的表述得到了纠正，大家突然发现原来问题并不是当初理解的那样，而且也找到了症结所在，并设定了接下来的验证计划。</description>
    </item>
    
    <item>
      <title>禅与摩托车维修艺术</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-13-288/</link>
      <pubDate>Mon, 13 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-13-288/</guid>
      <description>约翰认为我接触的是各种零件，实际我接触的是各种观念。 &amp;ndash; 88页</description>
    </item>
    
    <item>
      <title>经济危机、测试人员和社团</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-09-286/</link>
      <pubDate>Thu, 09 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-09-286/</guid>
      <description>下午和大部门的架构评审小组开会的时候，我突然有感而发，说出了下面这段话：
“⋯⋯06年开始，出现了很多测试方面的社团，各种方法论和认证小组涌现，PMP和CSTE成了热门的邮件签名；等到了经济危机，很多原本虚无缥缈的行动偃旗息鼓，人们开始重视代码质量，开发者也开始扮演越来越重要的角色；然而现在经济危机过去了，老板们又开始有钱搞些面子工程，QSE也充斥着测试人员组织的各种活动，那些原本为了开发者搞的组织和活动则消失在历史中，只留下无人维护的网站⋯⋯”
Dojo的ZX评论到，你很会总结啊。我只好苦笑，想想开发人员现在在实验室惨淡的地位，优秀的开发人员更是少而又少。现在还可以吃吃老本，可是再过几年呢？Pure Blue几乎已经没了。</description>
    </item>
    
    <item>
      <title>代码腐化</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-06-284/</link>
      <pubDate>Mon, 06 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-06-284/</guid>
      <description>原先一个人写代码的时候，所有的变更或者增强都能遵循自己的思想；现在为了能够让自己更上一层楼，不得不依赖其他同事的代码，可是带来的确实严重的代码腐化问题。
首先就是缺乏单元测试。单元测试就是设计，我经常这样“吼”，可是听的人寥寥无几。好多测试，除了我自己外，似乎根本没人关心。即使是运行了，也往往局限自己的变更，忽视全局的影响。
其次就是代码重复。分层设计是现代软件系统的基石，一个功能可以在不同层次实现，当然好处和坏处也各不相同。腐化的过程往往伴随着各种copy/paste，或者是不了解系统就随意打补丁，有的时候底层的方法完全没用上，而上层则是一层层的补丁，来应付问题。
怎么办？</description>
    </item>
    
    <item>
      <title>Effective Go</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-05-05-281/</link>
      <pubDate>Sun, 05 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-05-05-281/</guid>
      <description>正在读Effective Go这篇文章，当然是在把手上一个项目的子子子模块用Go重写之后，感受颇多。如果三年前就能下定决心好好接触Go语言的话，那么现在手上的这个项目我肯定会用Go来实现，而不是Java。
首先编译器内建支持的功能很受用。尽管我使用的是Sublime Text 2配合GoCode插件，但是感觉上和我的IntelliJ IDEA差不多，无论是语法高亮、格式化、快捷提示、测试、包管理、依赖更新等等，都十分顺畅，完全没有困难。
其次对象初始化非常方便。对于Java我已经养成创建不可变对象的习惯，所以字段常常都是私有常量，而构造器总是大段的boilerplate，很麻烦。而Go的Struct初始化，只要大括号带初始值就可以了，比JS的JSON对象初始化还要简练。而且因为没有可变初始值的支持，也不需要像Java那样写很多个构造器的必要了。
当然也有些不习惯的地方。用惯Clojure的我，现在对于可变量异常敏感，Java还有final关键字，而Go则是清一色的内存空间，全是可变的。缺乏测试覆盖率的支持也是个问题，而且还需要找一下有没有合适的代码检查工具。</description>
    </item>
    
    <item>
      <title>Go初步感觉</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-04-28-278/</link>
      <pubDate>Sun, 28 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-04-28-278/</guid>
      <description>正在过Go官方Tutorial的中文翻.墙版进行体验学习，感觉上跟C很像，但是语法精简了许多，特别是参数上采用了类型推定，却掉了括号，以及合并类型申明，共享括号等等。这些都让我感到，语言的缔造者确实是为写代码的人着想的。</description>
    </item>
    
    <item>
      <title>LiteIDE不能编译的问题</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-04-28-272/</link>
      <pubDate>Sun, 28 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-04-28-272/</guid>
      <description>下载了LiteIDE测试Go语言的官方Tutorial，发现始终出现“error process failed to start”的错误。由于我是Mac上用Homebrew安装的Go，并没有放在默认的个人目录。查了一些网上的文章，说要修改darwin64.env中Go的安装路径，可是还是不行。最后终于发现玄机在这里：

右上角的“System”下拉框，其实可以选择不同的profile，对应的不同路径选择。我的天哪，怎么也不说清除⋯⋯</description>
    </item>
    
    <item>
      <title>几种情感障碍</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-04-23-268/</link>
      <pubDate>Tue, 23 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-04-23-268/</guid>
      <description> 害怕失败 不敢发散思维 喜欢评头论足 不注意“孵化”时间 缺乏激励 幻想障碍  </description>
    </item>
    
    <item>
      <title>几种感知障碍</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-04-23-263/</link>
      <pubDate>Tue, 23 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-04-23-263/</guid>
      <description> 片面抽象 无法正确分离问题 附加不必要的限制条件 错误或片面的视角 习以为常 没有综合利用感知器官  </description>
    </item>
    
    <item>
      <title>一种固定内存使用的键值对查询方法</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-04-06-255/</link>
      <pubDate>Sat, 06 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-04-06-255/</guid>
      <description>三天清明假期，我终于搞定了假期前的问题。思想是这样的，把键值对查询系统看成是一个函数系统，而各个分区以及键本身可以进一步分成相对独立的各个子函数系统，使用一个固定大小的缓存区域，按序载入子函数系统。这个设计的好处在于，内存使用可以相对固定下来，根据数据的增长而有计划的调整，避免了原先设计中无法应对内存增长的情况。同时，我把函数系统分成两个层次，复杂度是一个二分查找加上一个哈希查询，和原来的设计相同。但是由于涉及两次较大的IO操作，所以在初始以及悲观情况下，查询性能会下降一到两个数量级，不过综合下来比原先的悲观情况要好得多。</description>
    </item>
    
    <item>
      <title>Google分析</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-04-05-251/</link>
      <pubDate>Fri, 05 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-04-05-251/</guid>
      <description>今年以来就没有看到Google分析的结果，仔细查看才发现原来是贴在主题模板里的相关代码，在切换主题的时候被丢掉了。为了防止同样的事情再次发生，我下载了一个修改header的插件，然后再把Google分析的跟踪代码贴进去，就OK了。</description>
    </item>
    
    <item>
      <title>YourKit入手</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-04-05-253/</link>
      <pubDate>Fri, 05 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-04-05-253/</guid>
      <description>原本只是为了项目上一个内存问题做分析，而临时下载的YourKit试用一下，没想到效果意外地好，一下子就找到了问题的原因。所以在几天后，YourKit的销售讯问我试用下来的感受后，我很配合的给了很多反馈，当然那个时候也因为YourKit过于昂贵而小抱怨了一下。本来这件事情也就过去了，可第二天我就收到了回信，说根据我的情况可以给我XX美元的折扣价。经过网上调研，一般个人许可的价格也要125美元，二话没说我便付款了。</description>
    </item>
    
    <item>
      <title>设计失误</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-04-04-249/</link>
      <pubDate>Thu, 04 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-04-04-249/</guid>
      <description>故事是这样的。年初的时候审查一个快速键值对查询功能的代码，原本的设计是把Java的Map结构简单的持久化并在查询时候进行反序列化，由于大数据的IO操作会比较慢，我便自告奋勇设计一个新的键值对查询模块。随后我查阅了很多资料，对一篇2011年底发表的关于基于SSD和内存索引的论文十分感兴趣，其超低的内存占用和常数访问效率正好满足功能的要求。于是我便利用放假的一个礼拜做了一个Java的实现，初步实验数据和论文表述的完全一致，只剩下把原来的模块切换过来。但由于项目重点发生变化，我被迫转到了另一个功能开发上，这个切换的工作也就搁置下来。就在项目进入最后性能调优的阶段，这个切换工作被提到了日程上。可是切换工作非常不顺利，先是遇到OOM，随后发现虽然查询性能很优秀，索引构建的过程则异常缓慢，还出现了长时间没响应的情况。原来虽然这个方法的内存占用很少，只有3比特每个键值对，但从算法复杂度来说，还是O(n)的，也就是说，只要键值对足够多，内存就会被消耗完毕。这种表现对于嵌入式的键值对查询模块来说，是致命的，因为目前系统的设计并没有采用分区或者分片的方法，也就是说用户输入的规模是不可控制的。索引构建的过程也是异常辛苦，原本这个方法的初衷是想实现在写入的同时保持高效查询，所以采用了三阶段的数据结构。可事实上，实际系统只要求一次创建过程，完成后就是只读的状态，无疑三阶段数据结构的转换本身消耗了大量无谓的时间。
这其中的教训就是：  一次完成一个功能。如果能尽早的完成切换工作，而不是拖延到最后调优的阶段，或许可以尽早的发现问题，然后及时作出设计上的调整，而不至于到现在无可挽回的状态。 充分理解非功能需求。事实上原本的实现虽然慢，但并不消耗任何内存，这个非功能需求被我忽略了。 充分理解算法复杂度。那篇论文非常强调每个键值对3个比特的内存消耗十分优秀，让我忽视了其O(n)的本质。 忽视IO。事实上我的确注意到了索引构建慢的问题，但是由于整个过程最慢的只是一个合并排序，让我对实际的表现过分乐观，而忽视了其四次IO读写的可能影响。事实上最终系统的部署环境中IO相当差。 
当然问题还没有完全解决，现在我需要找O(1)内存占用，以及O(logn)查询效率的方案了。</description>
    </item>
    
    <item>
      <title>简洁的Clojure</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-03-19-237/</link>
      <pubDate>Tue, 19 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-03-19-237/</guid>
      <description>最近同事I问我系统中链接的最大长度是多少，因为他正在设计一个数据表，需要知道确切的字段长度。由于系统设计成可以接受任意的文件组织结构，因此链接是没有任何约束的，所以我也给不出一个数字。这个时候，我想到性能测试团队的E同学刚处理过sitemap并从中提取了所有的链接。于是我便自告奋勇，写了一个脚本来分析链接的长度以及分布。
本来是想写一个Shell脚本的，但尝试了下Clojure，就有了下面的两行代码。可惜没有直接可视化，不过也够用了。
[gist]https://gist.github.com/balzaczyy/5194589[/gist]</description>
    </item>
    
    <item>
      <title>预备党员转正</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-03-18-235/</link>
      <pubDate>Mon, 18 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-03-18-235/</guid>
      <description>在外企里帮助预备党员转正是很麻烦的。首先预备党员考察表经常是没有的，有的已落在高校里，有的则在关系转移的过程中遗失了（这个原因最不可思议）。作为支部书记，只好凭着印象给预备党员重新填写表格。其次，群众座谈会也比学校要难搞，原因也各不相同。有些预备党员经常出差，和同事接触接触不多，要找客户那边的人肯定不现实；或者是刚调换部门，那么认识的人就更少了；即使有足够的人，要在工作以后收集这么多意见也不容易。党员转正会议就更难搞了，原因同群众座谈会是一样的。所以作为支部书记有几点经验：  新加入的预备党员要早点联系，多了解，这样写考察表的时候就有内容可写； 如果实在没什么可些，就只能通过电话联系预备党员的介绍人，或者从群众意见里面“提炼”； 转正会议可以与时俱进，通过投票系统或者简单的邮件，来征求党员意见。</description>
    </item>
    
    <item>
      <title>Self Promote</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-03-02-231/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-03-02-231/</guid>
      <description>Sometimes, I realized there are actually a lot of channels to promote myself. Just like the page on about.me, I got constant page views in the past several weeks. Probably because I use an interesting photo as the background, that I took, probably many years ago, with pigeons in the local park. I did check the pages on that site, they all seem fancy and beautiful, maybe most of them are working in art of design area.</description>
    </item>
    
    <item>
      <title>云服务器价格</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-02-22-216/</link>
      <pubDate>Fri, 22 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-02-22-216/</guid>
      <description>看了程序员杂志上关于Ucloud创始人的介绍，我煞有介事的访问了下Ucloud的网站。然而，最低200元每月的价格把我吓到了。这可比我现在阿里云99元每月，年付990元要贵多了，而且现在阿里云最低只要69了。从Ucloud的宣传页面上也没看出它什么特色，真搞不清楚这个行业现在真不赚钱，竟然还会有风投砸钱，唉。
看完了才知道，原来其实是经过包装的咨询公司，做的是运营+解决方案。</description>
    </item>
    
    <item>
      <title>Maven和IntelliJ</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-02-21-214/</link>
      <pubDate>Thu, 21 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-02-21-214/</guid>
      <description>为了搞定集群部署，我把负责核心帮助系统功能的模块，也就是Eclipse插件、目录服务、页面分析和搜索引擎，分离成单独的模块。这样，根据服务器的角色，就能在核心模块上搭载不同的功能模块，并通过优化过的流程控制来驱动这些终端服务。尽管使用开关似乎更简单一些，但代码的可读性和可维护性就要差些，也不符合OO的原则。唯一的问题在于IntelliJ对于Maven模块的支持似乎不太好。在内建服务器上调试，不会自动导入更新的模块，哪怕重新启动服务器也不行。由于Maven的JAR包是通过拷贝，而不是直接倒入类路径，在IntelliJ上调试很麻烦。在Eclipse上就没有这个问题，项目依赖会优先于Maven的JAR，而且通过类路径导入Web应用。所以服务器调试还是使用Eclipse会更加方便一些。</description>
    </item>
    
    <item>
      <title>阿里的售后支持</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-02-19-212/</link>
      <pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-02-19-212/</guid>
      <description>早上发现WP的php-fpm线程卡死了，有30多个，不停的进行IO读写。冲动之余，我重启了服务器，没想到再也不能访问了。我先尝试了阿里的在线帮助，等了十分钟，上面一直显示我是队列第一个，但是没见客服。放弃之后，我又访问了一次，发现原来是过了在线支持的时间。唉，早点说不好嘛。随后，我就提了一个ticket，想今天估计是没戏了。没想到技术支持反应的很迅速，而且很快解决了问题，前后两个小时。估计那边的工程师午饭也没吃好，这边谢了~
可惜我对php也不是很熟，不知道是什么原因造成大量的php-fpm线程卡死，而且还造成大量的IO。莫不是被黑了？</description>
    </item>
    
    <item>
      <title>代码中的定时炸弹</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-02-17-210/</link>
      <pubDate>Sun, 17 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-02-17-210/</guid>
      <description>代码里会有很多定时炸弹。只要代码不改动，这些炸弹就很难被发现，而一般的测试也似乎没什么问题。可是只要代码需要改动，就要特别当心了，一不小心就会触动他们。也许最好的策略是不去动他们，可是天知道哪天运行的好好的，就会出现这样或那样奇怪的问题。重复代码和循环依赖是我经常可以看到的。
如果团队里来了新的成员，或者现有的开发人员本身经验不足，为了应对紧张的进度，他们往往会选择复制粘贴一些现有的代码来实现某些功能。这种短视的选择会产出相当多的重复代码。任何对该代码的改动，都会面临多重修复，而单元测试也无法预防这种能够情况。有些工具可以帮忙扫描重复代码，可是对于已经部分修改过的代码却无能为力。
循环依赖是重构者的大敌。比如说我想把一个Web应用的核心抽出来做分布式应用，来针对不同服务器角色进行优化。如果代码依赖是个有向无环图，那么总能够从最底层的节点进行抽取。可如果代码之间引用过于复杂，出现环的时候，就必须使用各种设计模式来打破这种循环，要是还没有很好地单元测试保护，那么重构的代价就大很多了。</description>
    </item>
    
    <item>
      <title>不要在电子邮件里进行多人讨论</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-02-16-207/</link>
      <pubDate>Sat, 16 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-02-16-207/</guid>
      <description>今天是长假结束第一天，虽然我的长假要到下周五，但我还是很负责任地起床检查邮件，看看昨天晚上，也就是老外周五都在讨论点什么。果然没有让我失望，开发管理团队的领导们和几个社区的积极分子在很热烈地讨论一个问题。问题本身并不是让我觉得有意思的地方，三两句话也就说完了。有意思的是讨论不断被细节化和抽象，牵扯的人和方面越来越多。一开始的时候，大部分人还关注问题，但是随着有人提出一些实现的细节，整个讨论就开始转变成具体方案的比较，甚至是更高层次的辩论。比如说，自动化和手动，长期和短期，自主还是协同等等。讨论到后来，和整个业务流程有关，牵扯的关系人越来越多，直到项目经理喊cut，说另外找会继续讨论。
我的感受是，电子邮件真的不适合讨论，整个讨论树非常复杂。如果整个话题能够自动分析出讨论的焦点，然后根据焦点进行自动划分区域就好了。这样在讨论结束的时候，也比较容易做总结。</description>
    </item>
    
    <item>
      <title>出国工作</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-02-13-168/</link>
      <pubDate>Wed, 13 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-02-13-168/</guid>
      <description>我一直就很向往出国工作，而且最好是硅谷的公司。早在中学时代，我就因为弃C选择Java而错过了去日本交流学习的机会。在研究生选导师的时候，又因为本科班主任的关系，没有选择作为ACM教练的徐老师，而错过了去日本早稻田交流的机会。研究生的时候，又因为过早的去我现在的公司实习，而错过了自己最佳的竞技状态（面试谷歌微软必须的算法敏感度）。研究生导师本来拥有很好的海外关系，可过分偏向理论数学，并不十分对我的路子。似乎每一次，老天爷都有意跟我作对似的。
眼见着自己实力相当的同学和、甚至是家里的亲戚后辈们都个个在国外发展，我倒也慢慢放松了心态。也许，这都是锻炼我成为一个Clojure/Java/Go开发者，代码质量狂热者、用户体验和性能专家的考验。而我则要不停的磨练自己，为了不错过下一个出国发展的机会而努力。</description>
    </item>
    
    <item>
      <title>入手Windows 8</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-01-19-198/</link>
      <pubDate>Sat, 19 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-01-19-198/</guid>
      <description>本来是冲着Office 2013打折去的，但是发现是个漏洞有风险，所以就趁着月底前优惠，直接248买了个Windows 8升级版。目前用起来还不错，就是好多服务打开都挺慢的，没啥用。</description>
    </item>
    
    <item>
      <title>网速好快</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-01-10-193/</link>
      <pubDate>Thu, 10 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-01-10-193/</guid>
      <description>从长城宽带装好开始，名义上的6M就一直只有1.5M而已，除了360的测速软件。可是今天肿么了，速度快到不行。是长城宽带想通了，还是今天访问的网站都为长宽优化过了么？</description>
    </item>
    
    <item>
      <title>好老板</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-01-09-191/</link>
      <pubDate>Wed, 09 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-01-09-191/</guid>
      <description>我曾经很羡慕四大之类的事务所中，那些技术和管理集中的等级制度，也就是说经理以及经理的经理都必须要带手下干活，同时负责人员和资源管理。（当然这样的事务所里经理头衔的人也相当的多。）因为只有同样干活儿（不仅是能干活儿）的经理才是能够体恤和理解技术人员的，可似乎我错了。
老板就是老板，完成上面交代下的任务，努力往上爬才是他们所关心的。所以一个干活儿的老板可能更加可怕，因为他(她)可能拥有更强大的个人魅力和号召力，把那些羡慕传统师徒制的傻傻干活儿的人压得死死的。反而，一个只懂管理的老板顶多只能拿个人评分吓唬人。
这当然不是绝对的，但我已经不再羡慕。不懂技术不干活儿的老板很多，但这也没什么，对于真正自发努力的人来说，会叫你回家多休息的老板才是真正难得。</description>
    </item>
    
    <item>
      <title>技术难题</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-01-07-187/</link>
      <pubDate>Mon, 07 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-01-07-187/</guid>
      <description>记得曾经在面试的时候经常被问到这个问题，你在工作中解决了什么技术难题。我一般的回答是，使用全文索引替代XPath强化XML数据的搜索能力，利用依赖注入改善固有系统架构，采用流处理来加速XML转化，异步缓存视图（类似固化表）提升性能等。虽然当时觉得自己还是挺牛的，但是现在细想起来充其量只是些工程方法的小技巧，并不算真正的难题。
所谓技术难题，其实考察的方面很多，并非是要解决超难的问题而已（我的理解），而是从多方面看被考察对象的工作范围，思维方式和方法等。从我的回答只能看出我是个挺纠结于底层细节的人，而且也都不是啥了不起的难题。这种脱离项目需求和背景的描述估计无法给面试官留下什么好印象吧？
话说我最近三周花了巨多的时间在用Java实现了一个专为内存和闪存优化的键值存储系统，唯一的材料就是一篇2012年的论文，其间果然遇到无数的实际问题，像是编码效率、Java内存管理以及各种不同的优化策略。到目前有小成，也把过去那些所谓“难题”远远甩在了身后。嗯，下次再有人问我技术难题，我就说这个吧，嘿嘿~</description>
    </item>
    
    <item>
      <title>十二新作</title>
      <link>http://blog.zhouyiyan.cn/blog/2013-01-06-183/</link>
      <pubDate>Sun, 06 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2013-01-06-183/</guid>
      <description>久等的CD终于来了，这是我有收入以来第二次买杰伦的CD。去年的也是杰作，可惜错过时间后也就没动力收藏了。第一遍听完，比较喜欢较早释出的《明明就》和《红尘客栈》，以及比较fit我的《哪里都是你》和《乌克丽丽》，不过也比较期待《傻笑》和《比较大的大提琴》的MV啦。
另外吐个槽，foobar2000竟然还在用磁盘（SSD伤不起啊）缓存CD播放内容，让我想起varnish的架构师说的，1975年的设计。</description>
    </item>
    
    <item>
      <title>Linus又暴怒了</title>
      <link>http://blog.zhouyiyan.cn/blog/2012-12-30-176/</link>
      <pubDate>Sun, 30 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012-12-30-176/</guid>
      <description>Linus又暴怒了，无论是因为什么原因，感觉他正在走向暴君的道路。一个人的帝国能走都多远呢？</description>
    </item>
    
    <item>
      <title>为最差情况做优化</title>
      <link>http://blog.zhouyiyan.cn/blog/2012-12-29-172/</link>
      <pubDate>Sat, 29 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012-12-29-172/</guid>
      <description>在做KC第一个版本的时候，为了让原先几百个系统实例运行在一台服务器上，我只把目录服务留在了内存，其它衍生数据都采用运行时计算的方法生成。同时为了达到给定的延迟指标，我大量使用了缓存。结果是不言而喻的，性能测试的结果非常好，但是实际运行起来却总是不太稳定。
缓存并不总是好的。首先缓存占用了内存，即使看起来常驻内存的量不是很大，可是一旦发生内存不足，虚拟机开始回收缓存所占内存的时候，就可能会发生内存颠簸和缓存命中率急剧下降的情况。其次缓存干扰了文件系统缓存。现代操作系统的缓存机制已经相当强大，像KC这种依赖大量IO的系统，与其大量缓存易于生成的数据，不如把宝贵的内存还给文件系统作缓存来的更有价值。而且缓存也影响了算法，有些时候对数据生命周期很清晰的时候，用栈内存比堆内存更加高效。
问题的实质是我把性能压在了概率上。缓存是非常依赖工作负载性质的，换句话说就是缓存命中率。命中率越高，性能就越好。可是真实世界的工作负载是很难预估的，缓存命中率就会波动，或者工作负载上去了，但是内存不可能弹性上涨，限制了系统的可扩展性。所以系统设计的时候，应该为最差情况做优化，避免过早的使用缓存，而改用可清晰估计的算法来做实现。</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA 12 入手</title>
      <link>http://blog.zhouyiyan.cn/blog/2012-12-21-165/</link>
      <pubDate>Fri, 21 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012-12-21-165/</guid>
      <description>上一次用信用卡买的是Diablo3，现在想想很难说值不值，只能算是偿还了D2的债吧。IDEA12的Dracula主题的确不错，一看到就喜欢上了。考虑到我在IDE上花的时间，花钱买一个License还是划算的，毕竟Eclipse Juno的表现实在是太差了。</description>
    </item>
    
    <item>
      <title>代码审查</title>
      <link>http://blog.zhouyiyan.cn/blog/2012-12-21-163/</link>
      <pubDate>Fri, 21 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012-12-21-163/</guid>
      <description>为了培养团队对代码质量的重视，我组织了一个长期的代码审查计划。每次审查，我都精心挑选400行左右的代码，邀请一名开发人员预先阅读代码，控制会议时间在一个小时，同时通过角色互换让每个人都有机会担任主持人、代码作者、以及评审人员的角色。尽管如此，效果却极有限，也暴露出许多的问题。
首先是前后台脱节的问题。项目采用前后台分离的组织架构，通过约定服务接口，分别对各自的架构、组件和代码负责。后台开发人员有四个人，为了促成代码审查，我邀请了两个前台开发人员一起参与代码审查。结果是前台开发人员对于后台代码审查几乎没有什么贡献，而当我提议审查前台代码时，对方也极力推托，不十分配合。
其次是代码分布不均衡的问题。事实上后台代码的80%都是我写的，所以为了让每个人都能感受到审查的好处，我不得不选择那20%的代码作为审查对象，可那些代码本身又很简单，所以最后也没看出什么需要改进的地方。这是我遇到的最严重的问题，毕竟如果代码都是以两个人写的，那就完全不需要什么正式的审查，结对检查或者代码阅读或许都更有效率一些。
最后是对发现问题的跟进和反馈不及时。三次代码审查以后，以发现了20多处问题。可除了我负责的部分，其他代码基本上没有什么改动。由于功能开发还在进行，那些代码随时都会被改动，那么原来记录的行号什么的就都没用了。
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>不听劝告的小朋友</title>
      <link>http://blog.zhouyiyan.cn/blog/2012-12-18-161/</link>
      <pubDate>Tue, 18 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012-12-18-161/</guid>
      <description>在公司呆久了以后，就会看到一批一批的小朋友进来。有些小朋友真的很谦虚，很懂事，愿意跟年长一些的前辈学习。其实谦虚不代表示弱。那些待人诚恳，又很谦虚的小朋友，其实是很厉害而且又讨人喜欢的。我今年年初带的一个小朋友就很不错，别的不说，他会很安静的听你把话说完。这一点其实是很重要的，既能够理解对方的意图，又让对方感受到尊敬，达成有效沟通。后来才知道，这个小朋友其实已经是他所在部门的备选主力，而且现在已经是主要的技术骨干了，对此我一点也不感到奇怪。
相反，另一些小朋友则很怪，反应有些慢，还搞不清楚状况，被“管理人员”左右，没有技术人员应有的独立性。我曾出于好意提点他，可反馈却很一般，让我有些失望。不过我也在反思，或许是自己头上的光环还不够吧。</description>
    </item>
    
    <item>
      <title>阴沉的周六</title>
      <link>http://blog.zhouyiyan.cn/blog/2012-12-15-158/</link>
      <pubDate>Sat, 15 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012-12-15-158/</guid>
      <description>这个月过得很充实，充实得有些过头。三次专利评审，改而再改的需求规格，其他后台开发人员那种不顾全局和统一的“闯劲”，加上SSD和PGP全盘加密的折磨，即便是上周的苏州泡温泉，也没能让我缓过劲来。终于引来了一个阴沉的周末，我把暖气打开，房里只剩下我一个人，手上的难题也迎刃而解。
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>专利评审</title>
      <link>http://blog.zhouyiyan.cn/blog/2012-12-13-154/</link>
      <pubDate>Thu, 13 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012-12-13-154/</guid>
      <description>在IBM里每个发明专利都要经过一个资深评审委员会成员的预审，审查诸如原创性、方法创新性、商业价值和技术可行性等方面，通过的话就能上正式的专利评审会接受包括至少四名评审委员会成员以及一名专利律师的更加全面和严格的审核。评审委员会成员一般都是由发表过一定专利数，且愿意为社区服务的资深技术工程师组成。专利律师在专利评审中的作用巨大，一般是最后拍板的人。但是评审会的目的不仅仅是简单的判断一个想法是否可以申请专利，参与评审的技术专家通常能够给发明人一些切实的建议，帮助那些“欠缺”的想法得以成长。
公众对专利的看法褒贬不一。但是对于个人技术成长，在我看来，却是必不可少的。很多人硕士毕业之后，在工作中，基本上是用不到以前学到的研究方法。所以找一个课题，积累工作中的小发明小想法，写下来提交专利评审是个不错的方法。这样，既锻炼了研究能力，又积累了经验和成果，对个人的成长大有益处。
今天我所在小组的一个想法被评审委员会定位为公开，这说明想法本身有一定的商业价值，但无法形成有效的专利，所以予以公开，以保护IBM将来使用这种方法的权利。评审意见很中肯，给的建议方向正确。话说那个涵盖我们的已有专利很“无赖”，问题和领域都不同，但是方法用了一个超级抽象的说法，近乎毫无破绽⋯⋯残念⋯⋯</description>
    </item>
    
    <item>
      <title>Pebble迁移至WP数据库后文章读不出</title>
      <link>http://blog.zhouyiyan.cn/blog/2012-11-25-148/</link>
      <pubDate>Sun, 25 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012-11-25-148/</guid>
      <description>在基本实现了Pebble的BlogEntryDAO之后，已经能够从WP的数据库中读取相应的Post，但实际上线测试后却发现WP的文章读不出来。
一开始以为是索引的问题，因为Pebble为了快速访问文件系统上的内容，自己实现了一套基于事件动态更新的索引机制。在删除了索引后，Pebble竟然重新重置了所有的文章内容，返回到最初的欢迎文章。仔细阅读代码后才理解，Pebble内部约束了文章的状态，当索引不存在的时候，默认创建一篇帮助文章，然后以此为初始状态，用事件来更新索引。也就是说Pebble并不会对系统外的内容变化作出反应，换句话说， Pebble只索引在Pebble内部创建的文章，这和我所熟悉的内容管理机制是不符合的。
由于目前的WP数据库支持只是单向的，所以并不打算通过Pebble向WP数据库写入或者更新数据。只能通过改变文章索引机制，将初始状态设定为从现有DAO中读取数据来解决这个问题。
补充：又一轮debug过后，发现原来是页面索引干扰了文章索引的重建，是个隐藏的问题。考虑到原来Pebble的设定应该不会遇到类似的问题，我就不报问题给原作者了吧。</description>
    </item>
    
    <item>
      <title>What is New in JAX-RS 2.0</title>
      <link>http://blog.zhouyiyan.cn/blog/2012-11-22-143/</link>
      <pubDate>Thu, 22 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012-11-22-143/</guid>
      <description>What&amp;rsquo;s New in JAX-RS 2.0 | Javalobby.
过滤器是Servlet API在2000年2.3版本里面引入的，可是JAX-RS在2008年的第一个版本里面，竟然还是不支持，实在让人匪夷所思。在实际的项目中，我一般不得不借助Servlet的过滤器来执行一些独立于业务逻辑的功能，比如说安全认证模块。过滤器和曾经很火的AOP的拦截器其实很相似，都是在遵循OO开闭原则的基础上，提供了一种扩展系统的方法。当然，像WP那种完全构建于拦截模式之上的架构，尽管优雅且强大，但可维护性和代码可读性却大打折扣。在我看来，无论是过滤还是拦截，都只能作为模块分隔的方法，而不应该成为可扩展性架构的实践。真的要增加功能，就请在慢慢整合进核心系统，或者采用插件系统这种专注于可扩展性的架构选择。
从另外的角度来看，拦截和过滤本身已经在不同抽象层次有所重复，比如说服务器底层NIO对消息的处理，Servlet本身的过滤器，加上应用架构自己的过滤和拦截。过多的抽象对于性能关键的系统不是很合适，我一直希望能打通这个体系，构建从socket到socket的REST应用架构。</description>
    </item>
    
    <item>
      <title>大额转账</title>
      <link>http://blog.zhouyiyan.cn/blog/money-transfer/</link>
      <pubDate>Sun, 18 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/money-transfer/</guid>
      <description>平时网上支付些三五百元的事情也很平常，并没有什么特别不方便的地方，但是一笔较大数额的转账却让我费了不少功夫。首先支付宝快捷支付免费上限20000元，超过的部分是千分之五的手续费。为了节省这个手续费，我选择了银行转账。招行金帐户异地转账手续费封顶10元，但是我周一赎回的基金却遇到了到账不能用的尴尬情况。换了一个建行网银，也由于没有办理USB Key，只能每笔2000支付，而且每天封顶5000。想打电话通过建行电话银行支付，被告知必须在柜台预输入过账号才行。于是不得不到ATM做人工转账，然后通过我自己的网银转账，而且建行也是千分之五的手续费，不过封顶25元。我只好再经过支付宝充值的方法，更寸的是我把建行网银的密码忘记了，还得通过快捷充值（建行单日2000元）配合卡号支付（单日1000元）把我最后一笔钱转进去。令人欣慰的是，最后一笔转账支付宝竟然没有收我的手续费（明明超过20000元的说）。总之，这次经历让我认识到：支付宝和招行是可以的；尽量不要做大额转账，真的很麻烦！</description>
    </item>
    
    <item>
      <title>Pebble解析 － BlogEntry的事件处理</title>
      <link>http://blog.zhouyiyan.cn/blog/blog-entry-handler-in-pebble/</link>
      <pubDate>Fri, 16 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/blog-entry-handler-in-pebble/</guid>
      <description>在实现WP的PostDAO的时候遇到了一个情况。为了决定是做一个从Post到BlogEntry的适配器，还是转换器，我看了BlogEntry的源代码。Pebble的BlogEntry继承于PageBasedContent和Content，设计上使用了很多JavaEE的方法（毕竟Pebble本来就是JavaEE的博客系统），其中最有意思的是在Content这个类上同时使用了Bean的PropertyChangeSupport工具类以及Pebble自己的事件处理。

&amp;nbsp;
PropertyChangeSupport的作用主要是收集字段值的变化，方法也相当的土，在每个子类修改属性的时候加一段代码： public void setValue(String newValue) { String oldValue = this.value; this.value = newValue; this.pcs.firePropertyChange(&amp;ldquo;value&amp;rdquo;, oldValue, newValue); } 而最终这些属性变化的事件集会统一在更新BlogEntry的时候以Pebble标准的事件被重新插入BlogEntry里，并通过Pebble的EventDispatcher来触发响应的监听器，这其中包括对BlogEntry添加、删除和修改所引发的簿记工作，以及响应衍生数据的变化。
事件监听和触发是一个很棒的设计，围绕在基本的核心系统周围，给现有的系统带来近乎无限的可扩展性，如同ServletFilter给Servlet带来的影响一般。只是目前Pebble的这种实现方式还是有些怪，毕竟平白增加了这么多需要理解的方法。</description>
    </item>
    
    <item>
      <title>一次IT支持的经历</title>
      <link>http://blog.zhouyiyan.cn/blog/it-support/</link>
      <pubDate>Mon, 12 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/it-support/</guid>
      <description>在经过几近一年的Notes真空期之后，我今天终于下定决心要解决我的Notes ID无法访问国外服务器的问题。虽然问题最终解决了，但这次经历让我感受颇多。
我最先问的是坐在我旁边的一个同事，他是我们大部门的SCM管理员，也管着众多云服务器的维护工作，和IT很熟。他对我的问题不是很明白，不过给我的建议是打内部IT支持热线。在经历漫长的等待之后，一个香港的MM（反正不是大陆或者台湾的）接听了我的求助电话。在解释了各种症状，并说服她这不是一个简单授权问题之后，她给我的建议是写信给Notes ID管理员，并且很贴心的给了澳大利亚和大中华区两个管理员的地址。我根据她的建议，给上述两个管理员写了信。澳大利亚的管理员在一个小时内给我回了邮件，没有说什么原因，直接给我解锁了ID并重新颁发了证书，然后转发给IT部门，让他们重新给我申请新的ID文件，并说明整个过程大约两到三个小时。过了两个小时以后，大中华区的管理员也给我回了邮件，不过这次是直接转发给了IT部门。又过了一个半小时，收到大中华区ID管理员邮件的IT给我发了一封信，说我的Notes ID因为迁移到了Web邮件系统，所以不可以（注意，不是不能）访问普通的Notes应用，并给了我一个链接让我申请转回普通的Notes系统。我很是惊讶，想到自己为了公司的利益，率先做小白鼠尝试Web邮件系统，结果落了这个结果，很是不甘心。正在百般抱怨之时，IT部门另一个同事给我发了邮件，说是已经帮我重新申请ID文件，让我稍等。几分钟后，我便收到了新的ID文件，而且Web客户端还是能够正常使用。
这次经历让我明白几件事情：  寻求帮助一定要选对渠道，而且要找真正有经验的人。 用户只注重结果，如果解决不了问题，哪怕给出再看似合理的解释，也不可能被好好的接受。 要保持乐观的态度，说不定会有惊喜！</description>
    </item>
    
    <item>
      <title>本地WP安装完成</title>
      <link>http://blog.zhouyiyan.cn/blog/support-wp-data-in-pebble/</link>
      <pubDate>Wed, 07 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/support-wp-data-in-pebble/</guid>
      <description>鉴于pebble-clone改写基本完成，只剩下几个action页面，估计也都是不打紧的功能，我开始计划的下一步，WP数据支持。
再一次安装Wordperss，竟然是两个多月以后了。想到当初没有搞个脚本什么的，很后悔。万一服务器挂了，迁移，或者别的什么情况，想要恢复网站，还得费一番功夫。可惜我本地也不是Ubuntu，而是Mac，所以只能在网上找了一篇文章，用homebrew来安装相应的软件。另外八卦一下，这个安装方法所在的网站本身也就维持了半个月，看来要长久写作，真的要靠坚持了。
安装过程也不是一帆风顺的，期间因为安装php54失败（libxml配置失败⋯⋯），安装了Xcode Command-line Tool，又重新安装了homebrew才好；而且nginx的配置也一波三折，先是照着人家的方法安装完后发现静态资源找不到，后来模仿原来的配置搞路径又失败，接着该回根目录，发现php又不工作了（原来php-cgi不能后台运行），总之这两天时间算是报废了。现在我很能理解为什么客户愿意花这么多钱请我们做LBS，自己搞确实太浪费时间了。
另外发现访问我的网站首页失败了，发现原来是Ubuntu升级nginx的时候改写了index.html。下次再升级一定要记得备份了。临时用了同事的js转移方案，也不记得原来是怎么转移的了。</description>
    </item>
    
    <item>
      <title>Why Pebble</title>
      <link>http://blog.zhouyiyan.cn/blog/why-pebble/</link>
      <pubDate>Tue, 23 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/why-pebble/</guid>
      <description>Sometime I&amp;rsquo;m asking myself, why I chose Pebble at the first time? I already had Wordpress as my blogging software. It&amp;rsquo;s a lot easier to go with WP, instead of fooling around the Pebble, right?
The truth is that, I&amp;rsquo;m not a pure blogger. I&amp;rsquo;m a developer. I need something as my pet project, which is more free from legal restriction, more free to use cutting edge technologies, and more fun to do so.</description>
    </item>
    
    <item>
      <title>Last Resort</title>
      <link>http://blog.zhouyiyan.cn/blog/last-resort-the-tv-series/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/last-resort-the-tv-series/</guid>
      <description>太精彩了，好久没有看到像“Last Resort”这样的剧集了。前两集的节奏非常紧凑，几乎是立刻进入主题。而一艘核动力攻击潜艇对抗一个国家的设定，也十分新颖，虽然有些秀科技的意味。但是各种矛盾冲突，不同的利益方，让我有一种Lost的感觉。演员看上去也可以，有几个熟面孔，应该是老戏骨配戏，也没有很抢风头。</description>
    </item>
    
    <item>
      <title>从评论系统看性能</title>
      <link>http://blog.zhouyiyan.cn/blog/comment-moderate-in-pebble/</link>
      <pubDate>Sun, 14 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/comment-moderate-in-pebble/</guid>
      <description>在迁移Pebble的评论系统的时候，发现了个有趣的事儿。在用户提交评论，过了一般性的黑白名单检查以后，系统会返回一个页面给用户进行确认。让我感兴趣的是，这个页面没有包含任何和评论相关的内容，只有一个确认而已。细看代码才知道，用户提交的评论已经被存放在了session，当确认以后，评论会从session里面被取出，存到相对应的博客条目里。
这样的设计现在看来是值得商榷的。使用session存储临时对象对于可扩展性来说是一个灾难，姑且不说负载均衡中session复制的问题，如果短时间内被spam攻击，那么session里的临时评论很快就会把内存耗尽的，这个有些类似利用TCP三次握手的一个安全漏洞。在我上一个项目里，也有一个使用session来保存用户数据的设计，后来也是因为安全上的考虑，而改成了直接存储数据库。其实如果使用了粘性session，配合缓存系统来存储中间数据的话，这个设计还是可以接受的。
其次，两步骤的评论确认设计，在用户体验上也有些欠妥。毕竟Pebble的设计现在看起来是有些老了，目前看到的应该是capcha之类的校验比较多。除此之外，在评论提交的时候，原来的文章可能还会过期，或者状态变化，造成断链之类的问题，给设计带来了复杂性。
一个现代的设计，应该是尽量少用session的吧。</description>
    </item>
    
    <item>
      <title>停车</title>
      <link>http://blog.zhouyiyan.cn/blog/parking-problem/</link>
      <pubDate>Fri, 12 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/parking-problem/</guid>
      <description>原先我每个月在公司停车要花230元。可是最近以来园区内车越来越多，我经常停不到车位，只能选择10分钟外的街边停车（10元一天）。而且周一基本上连最近的街边停车也没位子，只能到15分钟以外的另一个地方混⋯⋯这样算起来虽然每个月只需要130元了，不过每天也浪费了20－30分钟时间。</description>
    </item>
    
    <item>
      <title>Controller迁移</title>
      <link>http://blog.zhouyiyan.cn/blog/migrate-controller-in-pebble/</link>
      <pubDate>Thu, 11 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/migrate-controller-in-pebble/</guid>
      <description>在迁移了部分JSP至VM（如首页、博客属性、创建文章等）之后，我开始准备改造Controller和Action映射部分的模块，以引入REST框架。Pebble是标准的MVC架构，每个页面对应一个Action模块，页面转换通过DefaultHttpController来进行，页面通过Action获得数据然后通过JSP按照模板来生成，而且支持主题。
从MVC转到REST是有些困难的。我做的项目里，后台部分使用REST将领域模型暴露成Web服务，为前台控件提供各种数据，而应用本身的用户交互和状态变化，则完全依靠HTML＋CSS＋JS来完成，并不需要后台参与。即使是用了VM，也只是为了Dojo框架提供一些全球化参数而已。把基于MVC的Pebble完全打散，使用REST＋页面的方法是我的Vision，但在目前阶段来说，困难过大，毕竟要重新理解和设计领域对象，还要把多个页面整合成单页面应用，对于一个业余项目来说，风险太大了。于是我尝试了一些渐进的改动方法。
首先是把DefaultHttpController用JAX－RS的资源类改写。将原本的Servlet改写成资源类还是比较简单的，逻辑基本没什么变化。但是Controller作为动作映射的模块，未免有些过于简单，也没有利用到REST的URL路由功能，所以准备拿些Action模块继续尝试。
REST＋VM的组合我是使用过的。在曾经一个Wiki项目里，我写过一个资源类，根据给定的路径载入相应的页面，动态的转换后，加载Wiki页面框架后返回。Pebble的设计有些类似，每个Action会根据博客的实际属性，声称一个视图，每个视图（原来是JSP，现在是VM）根据Action给的数据，填充并返回最终HTML页面。所以我也就仿照这个做法，创建了一个Blog的资源类： @Path(&amp;ldquo;/blog&amp;rdquo;) public class Blog { @GET @Path(&amp;ldquo;/pages/{pageName}&amp;rdquo;) public View page(@PathParam(&amp;ldquo;pageName&amp;rdquo;) String pageName) { &amp;hellip; }
@GET @Path(&amp;ldquo;/entries/page/{page}&amp;rdquo;) public View entriesByPage(@PathParam(&amp;ldquo;page&amp;rdquo;) int page) { &amp;hellip; }
&amp;hellip; } 因为是渐进的改动，所以每个方法基本上都返回了Pebble原来自己的视图对象。当然我也提供了相应的ViewWriter（实现MessageBodyWriter接口）来渲染这些视图。
至此就完成了Controller和Action模块的改动设计，接下来就是体力活了。不过困难也是有的，还需要将认证和Pebble的安全令牌机制通过Servlet过滤器来实现，同时MultiBlog的概念也要相应保留。不管怎么说，距离我自己的博客系统又进了一步。</description>
    </item>
    
    <item>
      <title>长城宽带和暗黑3</title>
      <link>http://blog.zhouyiyan.cn/blog/no-d3-for-my-isp/</link>
      <pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/no-d3-for-my-isp/</guid>
      <description>我装的长城宽带是不能玩暗黑3的。究竟是升级错误，还是长宽有限制，我还不确定。</description>
    </item>
    
    <item>
      <title>程序员的十大谎言</title>
      <link>http://blog.zhouyiyan.cn/blog/ten-lives-told-by-programmers/</link>
      <pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ten-lives-told-by-programmers/</guid>
      <description>关于程序员的十大谎言，我经常说的是：   这只是临时的办法，发布版本中我当然不会这样写。 基本上我会改变设计，以适应这种临时方法。原因有很多，大部分是因为临时方法产生背后的灵感，可能比我设想的所谓“最终”方案更好或者更实用。 这很简单，我几天就能完成。 这个很难，但是也许我也没有说谎，只是假设在完全没有外部干扰的情况下吧。 TODO。 大部分TODO都会因为设计变动而被消灭，只有少数会在下个版本的开发周期前期看。 只需要改一行代码，不会影响其它程序的。 是的，我真的只是改了一行代码，而且单元测试也过了。当然，单元测试是无法保证完全的质量的。</description>
    </item>
    
    <item>
      <title>PLUGINS_ROOT</title>
      <link>http://blog.zhouyiyan.cn/blog/plugins-root/</link>
      <pubDate>Mon, 24 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/plugins-root/</guid>
      <description>PLUGINS_ROOT used by Eclipse help system to reference resources located in other plugins, which looks like &amp;ldquo;href=&amp;lsquo;PLUGINS_ROOT/plugin_id/path/to/resource.html&amp;rsquo;&amp;ldquo;. I can not really understand how it was created and I can not find any related mails or history discussions either.
Firstly, PLUGINS_ROOT is like a variable. But who would use a variable in an HTML page? We use variables in templates, like JSP, VM, PHP, etc. We don&amp;rsquo;t use variables in HTML. Maybe we would in the future but not now.</description>
    </item>
    
    <item>
      <title>Lucene和RMI</title>
      <link>http://blog.zhouyiyan.cn/blog/lucene-and-rmi/</link>
      <pubDate>Sat, 22 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/lucene-and-rmi/</guid>
      <description>从MarsEdit的角落里找到了这篇自己写的，但是没有发表的日志。稍加修改后，备份在这里。另外，日志里提到的Lucene in Actions的确是用搜索引擎必看的书。
I have been using Lucene for nearly three years. With self-google and various Java info sites&#39; help, I created a Lucene based search engine piece by piece, to allow incremental index build, concurrent index sessions, multiple index reuse and management, and various performance tweaks. But seriously, I haven&#39;t finished any Lucene related book yet. And I&#39;m reading one now, Lucene in Actions.
It&#39;s Chapter 6 now, and apparently I didn&#39;t use any filter to obtain the performance gain through filter reuse.</description>
    </item>
    
    <item>
      <title>病了-续</title>
      <link>http://blog.zhouyiyan.cn/blog/sick-son/</link>
      <pubDate>Wed, 19 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/sick-son/</guid>
      <description>小宝儿也病了，发烧。用了退热贴，效果是有了，但是闹得很啊。最后只能看喜洋洋了。所以说看动画片也是小孩儿治疗的必要一步。</description>
    </item>
    
    <item>
      <title>病了</title>
      <link>http://blog.zhouyiyan.cn/blog/sick/</link>
      <pubDate>Tue, 18 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/sick/</guid>
      <description>生病总是无法预料到的。而一旦生病，原先对于我十分重要的那些事情，也变得不那么重要起来。哪怕是所谓的“兴趣”，在生病面前，也老老实实的站成两排。那些真正不动脑经，没有什么好处，只是简单消磨时间的事情，变得自然而然起来。也许并非不是不想写代码，手疼也不见得是理由，毕竟我还在写博客，可是在真正的病痛面前，写代码绝不是我的第一选择。</description>
    </item>
    
    <item>
      <title>弃用MiniTemplator</title>
      <link>http://blog.zhouyiyan.cn/blog/template-in-pebble-deep/</link>
      <pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/template-in-pebble-deep/</guid>
      <description>尝试使用MiniTemplator来替代Pebble的JSP模板，发现有问题。因为Pebble允许主题自定制，所以模板可以使用的变量是相对自由的。但是MiniTemplator由于设计上的考虑，只提供简单变量，所以必须在模板生成的时候一次性将使用到的变量都注入才行。这违背了自定制主题可以自由使用变量的要求，因此觉得转向StringTemplate再试试看。
补充：StringTemplate似乎也不是我想要的东西，看到形式化定义我就晕了。也许它真的很强大，可是我只是想要一个HTML模板引擎而已。看来，还是回到我喜爱的Velocity算了。</description>
    </item>
    
    <item>
      <title>动态内容处理</title>
      <link>http://blog.zhouyiyan.cn/blog/template-in-pebble/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/template-in-pebble/</guid>
      <description>传统CGI类应用，如PHP或者模板引擎，会根据上下文生成完整页面，并根据用户点击响应新的页面内容。这类应用很适合使用MVC框架，以状态页面为单位处理用户请求，一般配合页面静态化技术提高性能。2.0应用则倾向单页面配合Ajax请求，避免页面刷新，状态则由网页地址哈希来完成，后台一般也是REST服务。实验室里一般也都是2.0引用为主，配合Dojo做前台。所以在接触了WP和Pebble之后，十分地不适应。其核心问题是对动态内容的处理方式。
从经验上来说，涉及交互的动态内容最好使用JS来处理，避免页面加载过慢而影响用户体验；不涉及交互的内容，则在平衡初次加载时间的考量下，采用模板插入，如JSP、Velocity或XXXTemplate之类。JS的方式，对搜索引擎优化是个考验，毕竟那些实际的数据都变成了一对JSON或XML，如果不能提供对搜索引擎友好的HTML链接，那就糟糕了。模板的方式，则要考虑页面静态化，否则会占用过多的CPU和内存，而且从代码可读性和可维护性上来说，模板对于复杂内容网站来说，其实是很难懂的。
Pebble采用了JSP 2.0的写法，没有使用Scriptlet，主要功能通过标签完成。我倒不是不喜欢JSP，而且本地访问JSP页面，有时候真的是飞快。但是每个JSP自定义标签都会成为一个Java类，看起代码来真的很累。这种不把功能写在页面内，但实际逻辑还是紧密不分的行为，让我觉得有些自欺欺人。</description>
    </item>
    
    <item>
      <title>纪念Michael的离开</title>
      <link>http://blog.zhouyiyan.cn/blog/about-michael/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/about-michael/</guid>
      <description>认识很多Michael，可这位算是我进IBM以来认可的少有几个高手之一。昨天查了他的LinkedIn才知道原来和自己一样大，为自己还没有达到下个世俗层次而感慨，于是有此文做纪念。
觉得他厉害，倒不是因为看过他的代码，而是因为人家是做AOP出身的，而且是整个大实验室里，做multi-tenency的大佬，同时他的老板又是IBM有名的社会知名人物。不仅如此，摇滚、羽毛球，以及平时一副酷酷的样子，让我不得不发自技术宅男内心的钦佩（残念……）。加上他的口碑也极好，记得May曾经说他每个周末早上5点爬起来写代码，这种毅力同样让人佩服。可惜我进这个部门的时候，Michael刚被前老板带走；当我觉得自己够好的时候，向他毛遂自荐，也被婉拒。总之是没什么机会一起共事，不免遗憾的很。
除去Michael，跟我同时代进IBM工作的人寥寥无几了。去年的时候，我还在感慨上一届师兄师姐们的分流情况，没想到今年便轮到了自己身上。有人成了经理，有人快要成为经理，有人顶着技术大牛的头衔做着项目经理的事情，而我则坚持的技术第一线，希望以我自己的方式继续前进。</description>
    </item>
    
    <item>
      <title>Pebble克隆日志</title>
      <link>http://blog.zhouyiyan.cn/blog/pebble-clone-security/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/pebble-clone-security/</guid>
      <description>终于移除Spring-security了，换上了自己的认证逻辑。虽然OpenID和Google账号还不支持，但是离完全移除不远了。但是Anyway，为什么个人博客登陆要用OpenID和Google账号呢？WP就没要求登陆啊？</description>
    </item>
    
    <item>
      <title>又搬家了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8F%88%E6%90%AC%E5%AE%B6%E4%BA%86/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8F%88%E6%90%AC%E5%AE%B6%E4%BA%86/</guid>
      <description>我又搬家了。
也就是现在这个地方。</description>
    </item>
    
    <item>
      <title>怎么确定是Java代码是老的？</title>
      <link>http://blog.zhouyiyan.cn/blog/old-school-java-code/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/old-school-java-code/</guid>
      <description>所谓老，是说用早期的Java语法来写的代码。重构这类代码是比较痛苦的，常常IDE里大量的编译器警告，对于我这样的Purist来说简直是灾难。下面是我发现的一些“特征”：  没有指定类型。很多代码为了兼容1.4特地不写类型，这是可以接受的。可是还有一些则是滥用Object类型，把Map当成C的Struct来用，改起来很麻烦。这类问题需要从OO的角度重新设计对象来取代原先的“全类型”map。 喜欢Hashtable。HashMap照理说是1.2就出现的对象，怎么不如Hashtable流行呢？搞不懂。 喜欢StringBuffer。这个不解释。 单元测试喜欢设计复杂的TestCase体系。估计是受到jUnit3的影响吧？  &amp;nbsp;</description>
    </item>
    
    <item>
      <title>依赖注入</title>
      <link>http://blog.zhouyiyan.cn/blog/dependency-injection/</link>
      <pubDate>Tue, 11 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/dependency-injection/</guid>
      <description>在移除Pebble的Spring安全模块之余，我不禁感叹起依赖注入来。我是在2009年接触到依赖注入的，当时主要是看了Spring的创始人Rod的一些文章，又结合了Google推出的Guice，深深为之所动。当时感觉这个依赖注入实在是太强大了，只要给定接口，相应的管理器就能根据具体配置返回实例，很方便。于是我开发了自己针对javax.inject的实现，并在项目里用了一段时间，可是效果却不好。总结下来，有以下的问题：  针对接口的具体实现常常只有一个，直接使用Java创建对象的方式更容易； 调试异常困难，特别是对参数sniff的逻辑和实例生命周期的管理，非常麻烦； 延迟加载的成员，往往需要显示的以来DI框架对象，造成更多的以来问题； 类和类之间的以来关系很乱，往往不知道先后顺序。  当然以上这些问题都可以通过一定的方法解决，但是维护的代价大过它本身解决的问题。移除依赖注入逻辑的过程也异常痛苦，感觉整个底层被重写了一般。好的框架在使用的时候应该毫无感觉，甚至能和应用本身融为一体。就目前而言，我用过的唯一符合这个标准的就剩下JAX-RS了，是我目前开发必用库之一。</description>
    </item>
    
    <item>
      <title>研究Pebble</title>
      <link>http://blog.zhouyiyan.cn/blog/study-pebble/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/study-pebble/</guid>
      <description>考虑到实验室里做的信息中心，从本质上来说也和CMS系统类似，所以决定研究下开源的项目，顺便汲取一些思路。为了不过分打击自己，就先从博客系统入手，挑了Roller和Pebble，最后选择了代码量稍小的Pebble。
首先从官网上下载了2011年发布的2.6.2，导入了我新建的pebble-clone项目。然后加上jetty-maven-plugin，指定版本为7.0.1.v20091125。接着利用&amp;rdquo;mvn eclipse:eclipse&amp;rdquo;创建了Eclipse项目的配置文件，并把pebble.tld移到了WEB-INF目录下。上面这步很重要，为了避免适应Struts的API变化，以及避免m2e插件的不足而导致的错误，用“mvn jetty:run”看下启动是否正常。一切ok后，最后用Eclipse导入生成的项目，大功告成。
Pebble从代码量上来说和我做的项目相当，功能上要更加丰富，而我的项目主要还是初级阶段，以应付T级数据和每天百万级访问量为首要目标。从包的组织上，Pebble也比较类似，相对于Roller的明显的插件结构，Pebble则更加Java一些。使用的技术也基本和EE符合，Spring+Struts+JAXB的技术栈也没有什么大问题。Lucene的使用让我对它多少有些好感，毕竟我也做了好几年搜索了。Ant的使用让我有些疑惑，需要更加深入的理解。除此之外，Pebble似乎还自己开发了一套和Struts相适应的框架，难道是我看错了？
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>如何向Executive问问题</title>
      <link>http://blog.zhouyiyan.cn/blog/how-to-ask-question-to-executive/</link>
      <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/how-to-ask-question-to-executive/</guid>
      <description>Executive一般就是老板的老板的老板，一般员工能见到的机会也就仅限于喝水和上厕所时候，所以每次和Executive级的老板见面，都要抓住机会表现自己。问问题可能是个好机会，既有机会介绍自己，又能借高超的问题让对方留下印象。可是，该问Executive什么问题呢？通过调研，我发现可以问的问题大概分成下面几类：
问战略。这是比较保守的一种方法，反正Executive就是研究战略的，问问其本职工作也无可厚非。不过也不能期望得到什么答案，估计都可以在PPT或者其他资料里面找出来，或者是些虚虚实实的说法。比较好的问法可以突出自己的能动性，比如说想问其下一步计划，不如问“我们接下来该怎么做”之类的。
问软实力（Soft Skills）。一般问技术，遇到技术背景的Executive（比较少）肯定会被鄙视，要么顶多是打打太极拳，毕竟是问错了对象，所以问问如何待人接物反而比较讨巧。比如说时间管理啊，导师啊，做演讲或者演示之类的。
问职业规划。一般Executive都是某个领域的领军人物，而且大多是有多年工作经验或者较为复杂的工作背景。问其职业规划，偏重个人经验的话，是很能留下深刻印象的，就此打下将来拜师的基础也说不定。
虽然做了些准备，不过问问题的时刻才使最关键，语速要放慢，口齿要清晰，表达要简练。好的问题，即便Executive留不下印象，你的老板肯定也会把你记住。</description>
    </item>
    
    <item>
      <title>获得暗黑3人物信息</title>
      <link>http://blog.zhouyiyan.cn/blog/d3-api/</link>
      <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/d3-api/</guid>
      <description>老实说，我很久没玩暗黑3了。但是闲来无事想学习一下jQuery插件的写法，就挑了暗黑3的社区API来练练手。整个过程很顺利，推荐JS新手都可以玩一下。
首先是暗黑3的API：http://us.battle.net/api/d3/profile/battlename-tag/。其中battlename-tag其实就是包含数字的战网名中，把#替换成-而已。返回的JSON对象基本构成是：
{ &amp;ldquo;heroes&amp;rdquo;: [ { &amp;ldquo;name&amp;rdquo;: &amp;ldquo;Yharr&amp;rdquo;, &amp;ldquo;id&amp;rdquo;: 1, &amp;ldquo;level&amp;rdquo;: 60, &amp;ldquo;class&amp;rdquo;: &amp;ldquo;Wizard&amp;rdquo;, &amp;hellip; }, &amp;hellip; ], &amp;ldquo;lastHeroPlayed&amp;rdquo;: 3, &amp;hellip; }
其中lastHeroPlayed对应的是Hero的ID。其他参数请详见官方API文档。获得Hero对象后，作为JS新手，我傻傻的输出了三行基本数据，代码如下：
$this.append(&amp;rsquo;&amp;lt;span&amp;gt;Hero: &amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;rsquo; + hero.name + &amp;lsquo;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lsquo; + &amp;lsquo;&amp;lt;span&amp;gt;Level: &amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;rsquo; + hero.level + &amp;lsquo;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lsquo; + &amp;lsquo;&amp;lt;span&amp;gt;Class: &amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;rsquo; + hero.class + &amp;lsquo;&amp;lt;/span&amp;gt;&amp;rsquo;);
因为过于简单，所以不解释，直接看代码。接下来想试试Wordpress的插件。</description>
    </item>
    
    <item>
      <title>写在前面</title>
      <link>http://blog.zhouyiyan.cn/blog/start-again-in-2012/</link>
      <pubDate>Mon, 03 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/start-again-in-2012/</guid>
      <description>开博陆陆续续也好多年了。借着曾经博客（博客网Bokee、MSN空间和谷歌Blogger）的资料，我也稍稍回顾了下自己开博的历程。
2005年4月～2005年7月，博客网Bokee上开博写了四个月； 2005年7月～2006年11月，第一份实习工作，真心喜欢同事们的MSN空间，所以转投了MSN； 2006年11月～2008年4月，迫于毕业的压力离开了花哨的MSN空间， 转向简单的谷歌Blogger，至于写了点什么，鉴于Blogger也不能访问，不能再探究了； 2008年4月至今，过分忙于工作，基本属于停博状态。
2010年12月，MSN空间关闭了。我“被”转移到了新浪博客。尽管也稍稍玩了下，但是因为分类的bug，我的文章总是出现在错误的分类下，于是作罢。停博以后还稍稍玩了下微博，觉得字数少了，内容也空了。无非就是发发照片，转转贴，没有了当初那种想回来看看的冲动，于是有一日冲动，清空了所有的微博。
2012年，我终于在花钱触网这件事情上迈出了坚实的一步，这也许是另一个开始也说不定。</description>
    </item>
    
    <item>
      <title>高效的Range Input在Android浏览器下的替代方法</title>
      <link>http://blog.zhouyiyan.cn/blog/efficient-range-input/</link>
      <pubDate>Sun, 02 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/efficient-range-input/</guid>
      <description>最近业余时间利用个人的一些专业资源，在做一个个税筹划的小工具，其中需要用户输入一些数字。我首先想到的就是HTML5新引入的Range Input，可是查了相关资料觉得这个控件的支持不是很理想。尽管也有一些跨浏览器的jQuery插件可以用，可是Android的默认浏览器却并不支持。又看了jQuery Mobile和jqTouch，虽然也有相应的控件，但是在Android默认浏览器上的性能实在是太差了，于是不得不寻求其他的方法。
受到优酷Android应用的启发，发现Scrollable DIV应该会在Android浏览器上表现不俗，可能是浏览器实现有相应优化的关系，配合scroll参数和简单的JS代码，可以完全替换所需的Range Input。比如下面这段代码：
&amp;lt;span id=&amp;quot;salary&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;div id=&amp;quot;salary_sel&amp;quot; style=&amp;quot;overflow-x: auto&amp;quot;&amp;gt; &amp;lt;img style=&amp;quot;max-width: 2474px; height: 200px;&amp;quot; src=&amp;quot;img/sunset.jpg&amp;quot; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; $(&amp;quot;#salary_sel&amp;quot;).scroll(function(){ $(&amp;quot;#salary&amp;quot;).text(this.scrollLeft); }); &amp;lt;/script&amp;gt;  配合上一张长背景图片（注：这里使用的是我在若尔盖草原拍的落日）就可以达到滑动输入的效果。鉴于没找到如何在新浪博客里使用JS的方法（注2013/11/14：MarkDown也不支持JS），所以并没有显示所拖动的位置。
   $(&amp;ldquo;#salary_sel&amp;rdquo;).scroll(function() { $(&amp;ldquo;#salary&amp;rdquo;).text(this.scrollLeft); }); 
下面也比较一下HTML5原生的Range Input在Android浏览器上的效果（苹果用户请忽略）：

就拖动输入而言，使用Scrollable DIV会比原生的Range Input控件快很多。如果是要做跨浏览器的滑动输入的话，不失为一个好的替代方案。</description>
    </item>
    
    <item>
      <title>2012准备重新开博</title>
      <link>http://blog.zhouyiyan.cn/blog/2012%E5%87%86%E5%A4%87%E9%87%8D%E6%96%B0%E5%BC%80%E5%8D%9A/</link>
      <pubDate>Mon, 02 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/2012%E5%87%86%E5%A4%87%E9%87%8D%E6%96%B0%E5%BC%80%E5%8D%9A/</guid>
      <description>玩了微博才知道技术贴是没有人评论的。可能因为我只有一个号，而且关注的人又大多是身边非同职业的朋友，大家更多关心的是彼此的境况，心情，或者奇遇。对于那种晒技术，卖弄文笔的内容，也大多不屑一顾。要不也可能是我人气不足，不过真的搞个上千的粉丝，BC也真记不住谁是谁了。
所以回过头发现，博客也许才是BC卖弄和记忆的真正好地方。2012开始重新开博了。</description>
    </item>
    
    <item>
      <title>我不会再使用九阳产品了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%88%91%E4%B8%8D%E4%BC%9A%E5%86%8D%E4%BD%BF%E7%94%A8%E4%B9%9D%E9%98%B3%E4%BA%A7%E5%93%81%E4%BA%86/</link>
      <pubDate>Sat, 11 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%88%91%E4%B8%8D%E4%BC%9A%E5%86%8D%E4%BD%BF%E7%94%A8%E4%B9%9D%E9%98%B3%E4%BA%A7%E5%93%81%E4%BA%86/</guid>
      <description>九阳榨汁机JYZ-6D有严重的质量和设计问题，电机和上层外壳的连接处没有密封圈，仅仅使用了一个塑料片封闭；而旋转连接轴周围也没有密封圈，果汁可以直接从外部流进去。虽然说明书上说有密封圈，但即使解决了旋转连接轴的密封问题，电机和上层外壳的连接口还是不封闭的。
这个榨汁机是朋友送的，估计也没有保留发票了。因为这件事，我对九阳产品的质量管理完全失去信心。所以包括豆浆机内，我再也不使用九阳产品了。</description>
    </item>
    
    <item>
      <title>dual class of rights</title>
      <link>http://blog.zhouyiyan.cn/blog/dual-class-of-rights/</link>
      <pubDate>Sat, 09 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/dual-class-of-rights/</guid>
      <description>大小非解禁应该是利好，说明投资人能够更好的影响公司的发展。现在就应该鼓励大小非解禁，等熊市过了，公司发展就会更好。</description>
    </item>
    
    <item>
      <title>固定利率和浮动利率</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%9B%BA%E5%AE%9A%E5%88%A9%E7%8E%87%E5%92%8C%E6%B5%AE%E5%8A%A8%E5%88%A9%E7%8E%87/</link>
      <pubDate>Thu, 24 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%9B%BA%E5%AE%9A%E5%88%A9%E7%8E%87%E5%92%8C%E6%B5%AE%E5%8A%A8%E5%88%A9%E7%8E%87/</guid>
      <description>银行推销员经常说服我们接受浮动利率，说可以避免利率风险。其实从分析角度看，贷款利率的固定和浮动应该根据收入的性质决定，如果收入是利率敏感的（比如说财务自由？），那么使用浮动利率进行贷款能够对冲自己的收益，避免利率对收入的影响。对于我们一般的工薪阶层来说，固定利率更好。如果真的发生贷款后利率下降，大不了再借笔钱换银行就是了，没什么关系的。</description>
    </item>
    
    <item>
      <title>不知道该信谁</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%8D%E7%9F%A5%E9%81%93%E8%AF%A5%E4%BF%A1%E8%B0%81/</link>
      <pubDate>Tue, 22 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%8D%E7%9F%A5%E9%81%93%E8%AF%A5%E4%BF%A1%E8%B0%81/</guid>
      <description>证监会说股市下跌不是大小非减持造成的，而是基本面问题。我怎么记得说股市基本面没有问题么？</description>
    </item>
    
    <item>
      <title>专利和版权费用</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%93%E5%88%A9%E5%92%8C%E7%89%88%E6%9D%83%E8%B4%B9%E7%94%A8/</link>
      <pubDate>Mon, 21 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%93%E5%88%A9%E5%92%8C%E7%89%88%E6%9D%83%E8%B4%B9%E7%94%A8/</guid>
      <description>根据US GAAP规定，专利和版权费用不得被资本化，除非它们是买来的。难怪IBM要把中国研发部门归到IBM投资有限公司，这样所有的专利和版权费用都能资本化了。这之中应该也存在转让定价的问题……有意思。那就挺奇怪的，IBM有这么多专利和版权，可市值才1500亿，微软有3000亿呢。</description>
    </item>
    
    <item>
      <title>收入税</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%94%B6%E5%85%A5%E7%A8%8E/</link>
      <pubDate>Sun, 20 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%94%B6%E5%85%A5%E7%A8%8E/</guid>
      <description>正在看一部关于美国抗争收入税的电影，有些共鸣。记得以前说教会的十一税是无情的剥削，再看现在收入税真是有过之而无不及。即使没有税，也会让你交社保，反正钱不会白白给你的。都说税收是为了支付国民服务，但到社保就不算国民服务？</description>
    </item>
    
    <item>
      <title>回来踩一下</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%9B%9E%E6%9D%A5%E8%B8%A9%E4%B8%80%E4%B8%8B/</link>
      <pubDate>Mon, 14 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%9B%9E%E6%9D%A5%E8%B8%A9%E4%B8%80%E4%B8%8B/</guid>
      <description>各个博客也多转了一圈，但都没有很多写博客的热情。今天回来发觉MSN Space的访问速度快了很多，可能会重新会来定居吧。</description>
    </item>
    
    <item>
      <title>Preparation before maternity</title>
      <link>http://blog.zhouyiyan.cn/blog/preparation-before-maternity/</link>
      <pubDate>Thu, 20 Dec 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/preparation-before-maternity/</guid>
      <description> exercises Ye Suan before maternity Anti-radiative equipment money  </description>
    </item>
    
    <item>
      <title>ODF, OOXML and CDL</title>
      <link>http://blog.zhouyiyan.cn/blog/odf-ooxml-and-cdl/</link>
      <pubDate>Thu, 01 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/odf-ooxml-and-cdl/</guid>
      <description>OpenDocument基金会放弃支持ODF，转投CDF。这意味着什么？意味着IBM试图推广LotusSymphony的计划将会受到一些影响，意味着MS的OOXML有了新的盟友。办公软件是个大奶酪，也是MS始终focus的大头，因此无论是Google还是IBM，想要争夺这个市场都会遇到困难，而且大家都在拉拢开源和标准化社区。用户的声音到哪里去了？</description>
    </item>
    
    <item>
      <title>300</title>
      <link>http://blog.zhouyiyan.cn/blog/300-the-movie/</link>
      <pubDate>Sat, 18 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/300-the-movie/</guid>
      <description>虽然是一部知道结局的片子，300的的导演还是在很多小细节上面给了我很多惊喜。比如说议会部分的阴谋、狼和满月的前后呼应、叙事替代单纯描述等等，特别是在最后漫山遍野的希腊军队，更是让人觉得牺牲得到了最好的回报。记得小时候看斯巴达三百战士，觉得一群人被万箭穿心的感觉很不爽。这边导演估计为了照顾到观众的感情，那段标枪镜头可能是一种创新（或者是我忘记了？）。</description>
    </item>
    
    <item>
      <title>信用卡还没有下来</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BF%A1%E7%94%A8%E5%8D%A1%E8%BF%98%E6%B2%A1%E6%9C%89%E4%B8%8B%E6%9D%A5/</link>
      <pubDate>Sat, 18 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BF%A1%E7%94%A8%E5%8D%A1%E8%BF%98%E6%B2%A1%E6%9C%89%E4%B8%8B%E6%9D%A5/</guid>
      <description>龙卡信用卡还没有下来，又狠狠的消费了一把，当然是没有信用积累的。
先是为了培养良好的运动习惯，采纳Forrest的建议，去买了一副Kason的羽毛球拍。然后又去买了一个威德的订婚戒指，当然也是在看过周大福和周生生的价格之后，无意中从网上搜到的。
现在现金管理的工具越来越多，银行卡、信用卡、小额无抵押贷款。但是只有最方便才是最好的，本来就不是为了省钱，如果管理成本很高（比如说XX银行的现贷派必须到浦东办理……），那肯定不是好的选择。
也许是购物的欲望被激起来了，又在自己的choice list上面添加了好多，比如手MiniPC、Wii、D40X等等……也不知道什么时候才能实现。</description>
    </item>
    
    <item>
      <title>AntBuster</title>
      <link>http://blog.zhouyiyan.cn/blog/antbuster/</link>
      <pubDate>Sat, 16 Jun 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/antbuster/</guid>
      <description>Antbuster实在太好玩了，玩过几轮如果还没有掌握要领，请看攻略。</description>
    </item>
    
    <item>
      <title>Sin City</title>
      <link>http://blog.zhouyiyan.cn/blog/sin-city/</link>
      <pubDate>Sat, 05 May 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/sin-city/</guid>
      <description>Pretty damn cool movie!
想不到更好的形容了！</description>
    </item>
    
    <item>
      <title>Windows下开源个人理财软件选择5</title>
      <link>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A95/</link>
      <pubDate>Tue, 01 May 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A95/</guid>
      <description>摘要：个人理财软件（Personal Financial Manager，简称PFM）目前在国内市场上可选择的不多，免费的大多功能很差，好一些的卖得又不方便（不是贵，只是不方便）。这里把BC选择PFM的 过程记录下来，方便各位选择一款适合自己的PFM，但是关键还在于自己坚持。
上文&amp;hellip;&amp;hellip;
其实也不是第五轮，因为jGnash和Money Manager Ex在实际的应用中都被淘汰了。本地化真的很重要，如果单纯记账的话，最好的应该是家财通和财智理财，而理财的话肯定是理财时空更胜一筹了。
所以如果算是一个结果的话，最终还是选择家财通+财智理财。有一些偏题，但是经历过无数惊喜和失望之后，这应该是一个能够接受的结果。</description>
    </item>
    
    <item>
      <title>医学需要和科学一样发展</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8C%BB%E5%AD%A6%E9%9C%80%E8%A6%81%E5%92%8C%E7%A7%91%E5%AD%A6%E4%B8%80%E6%A0%B7%E5%8F%91%E5%B1%95/</link>
      <pubDate>Sun, 22 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8C%BB%E5%AD%A6%E9%9C%80%E8%A6%81%E5%92%8C%E7%A7%91%E5%AD%A6%E4%B8%80%E6%A0%B7%E5%8F%91%E5%B1%95/</guid>
      <description>当一种生存必须的知识仅仅被社会中的一小部分人掌握的时候，那将是一种灾难。如同远古时代的巫医那般，懂得医术的人占有了社会的大部分财富和社会资源。如果任凭医院对医学的垄断，那么当今社会就很有可能会倒退，至少会倒退的“寡头”的阶段。可以想到的方法就是鼓励医科学院扩招，让医院无法吸纳那么多医务工作者，至少能够削弱医院对医学的垄断现状。
或者让医学知识进入中小学课本，破除低级医学垄断的局面。总有一天，人们会不再相信地球是方，也不会为了一般小毛小病而滥用抗生素。</description>
    </item>
    
    <item>
      <title>基金大跳水</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%9F%BA%E9%87%91%E5%A4%A7%E8%B7%B3%E6%B0%B4/</link>
      <pubDate>Fri, 20 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%9F%BA%E9%87%91%E5%A4%A7%E8%B7%B3%E6%B0%B4/</guid>
      <description>抛？还是不抛？</description>
    </item>
    
    <item>
      <title>开会的语速要慢</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%BC%80%E4%BC%9A%E7%9A%84%E8%AF%AD%E9%80%9F%E8%A6%81%E6%85%A2/</link>
      <pubDate>Tue, 03 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%BC%80%E4%BC%9A%E7%9A%84%E8%AF%AD%E9%80%9F%E8%A6%81%E6%85%A2/</guid>
      <description>刚刚开完会，发觉自己的语速实在太快。已经非常克制自己了，感觉已经每个音节都拖长了好多，但是效果还是不理想。老外比上次肯定听懂了不少，可反应还是很少。这种沟通如果继续下去，就会变成单向的，也失去了这个会本来的目的。
嗯，下次开会要再慢些，再慢些……</description>
    </item>
    
    <item>
      <title>忙是一种借口</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%BF%99%E6%98%AF%E4%B8%80%E7%A7%8D%E5%80%9F%E5%8F%A3/</link>
      <pubDate>Sun, 18 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%BF%99%E6%98%AF%E4%B8%80%E7%A7%8D%E5%80%9F%E5%8F%A3/</guid>
      <description>但是上个礼拜的Lab确实别了一副模样，那些许久没有使用CC的人开始出现问题。尽管都是一些配置上的小问题，但因为两个新手的原因，自己还是会需要进行on-site support。希望他们能尽快成长起来独当一面吧！
另外系统最近一次的出错让张江那边十分不满，起因只是磁盘空间的监控没有做好。虽然是发生在管理员交接的过程中，这种不是很professional的问题也让自己多少有些惭愧。毕竟那20%的时间要同时做好师傅、管理员和idea provider确实有些困难，不过也是证明自己能力的一次机会，要好好把握。
周五就是答辩了，距离人生阶段的交接只剩下不少的时间。提醒自己周一去给学报汇款和邮寄校样回执，钱就从农行出吧，老板估计没办法报销了……另外记得债券基金的事情。
唉，忙得记性都差了。</description>
    </item>
    
    <item>
      <title>电影快评</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%94%B5%E5%BD%B1%E5%BF%AB%E8%AF%84/</link>
      <pubDate>Wed, 07 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%94%B5%E5%BD%B1%E5%BF%AB%E8%AF%84/</guid>
      <description>时尚女魔头 公主+服装是最大的噱头；工作和生活的平衡则是本片的主题；可带女朋友一起看的片子。
皇家赌场 从哪里看出这是007前传？内心刻画比画面场景更出色，结局拖沓但有戏。
勇敢者游戏2 兄弟感情+小悬念，一部较好看的家庭娱乐片。
征服怒海 快进中发现：征服不是征服，只是毕业；怒海没有怒海，只有拳击。
魔术师 7.7分说明它是一部好作品，但在惊悚片中并非经典，结局不是很惊悚。</description>
    </item>
    
    <item>
      <title>请客吃饭</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%AF%B7%E5%AE%A2%E5%90%83%E9%A5%AD/</link>
      <pubDate>Wed, 07 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%AF%B7%E5%AE%A2%E5%90%83%E9%A5%AD/</guid>
      <description>如果老板不请客吃饭的话，那也不用指望Leader请客吃饭了。毕竟老板是所有人行为的导向，而且地方和中央总是在群众关系上存在着一些微妙的关系。所以，有一个经常请客吃饭的老板会是一件比较幸福的事情。</description>
    </item>
    
    <item>
      <title>如何杀死系统进程</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%A6%82%E4%BD%95%E6%9D%80%E6%AD%BB%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Mon, 05 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%A6%82%E4%BD%95%E6%9D%80%E6%AD%BB%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/</guid>
      <description>怎样杀死系统进程呢？就是那些System启动的进程。用任务管理器肯定是不行的了，网上也搜到很多的方法。最实用的就属XP自带的Taskkill工具了，直接按PID或者名字杀死，而且支持远程杀死。
酷~一键杀死！</description>
    </item>
    
    <item>
      <title>吸血莱恩</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%90%B8%E8%A1%80%E8%8E%B1%E6%81%A9/</link>
      <pubDate>Fri, 02 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%90%B8%E8%A1%80%E8%8E%B1%E6%81%A9/</guid>
      <description>从没有看过比这个更乏味的电影……一部IMDB评分只有2.5分的电影，BC生平从来没有见过。无论是道具、动作、剧情，看起来都不像是一部电影，而是某个电影学院不及格的个人作品。也许改编游戏是这部电影唯一的卖点，还有就是那些被Cut掉的镜头（BC看的是未剪切版……）。
再次回想起其中一个男主角有气无力的拿剑的动作，导演那个时候也许已经无语了吧。</description>
    </item>
    
    <item>
      <title>死神来了3</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%AD%BB%E7%A5%9E%E6%9D%A5%E4%BA%863/</link>
      <pubDate>Mon, 26 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%AD%BB%E7%A5%9E%E6%9D%A5%E4%BA%863/</guid>
      <description>一部经典系列的第三部。
尽管第一部创造了一个奇迹，那就是死神催命的概念，但是死神却仅会操控水，倒不如说是水操纵者。第二部没有跳出第一部的套路，但是却增强了死神的能力，在死法上有所增强，这显然是一种商业片的常用手段。显然第三部并不赞同第二步的商业片做法，而是更倾向于向第一部那虽然并不出彩，但是在电影手法上有所创新。因此第三部中的主人公们频频示意第一部的情节，有点抢镜头的感觉。
剧情方面稍显拖沓，一般都结束了才死了两个。后面的节奏来的紧凑，因此死法也有些太……突然了，没什么技术含量。要说剧情跌宕起伏，还是猛鬼街七步曲来的惊险刺激，死神系列重在对那个无法琢磨的死神的刻画，可能越是看不到，越来的恐怖吧。
死法虽然恐怖，但是缺乏想象力。比起第二步那个突然下降的救生梯，BC当时就感到头部有些异样。那种想象的样子，可比实际的恐怖画面更来的心惊肉跳。结尾的死法稍欠血腥，也没有前两部那种死亡前的领悟。
另外需要指出的是，整部片子充斥着苹果和摩托罗拉的广告（尽管BC很喜欢苹果）。这让BC想起一则新闻，IBM的刀片式服务器帮助欢乐的大脚赢得奥斯卡。尽管都有些怪怪的，但是幕后工作比锦上添花更好吧。</description>
    </item>
    
    <item>
      <title>新年上班第一天</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%96%B0%E5%B9%B4%E4%B8%8A%E7%8F%AD%E7%AC%AC%E4%B8%80%E5%A4%A9/</link>
      <pubDate>Sun, 25 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%96%B0%E5%B9%B4%E4%B8%8A%E7%8F%AD%E7%AC%AC%E4%B8%80%E5%A4%A9/</guid>
      <description>一早来到办公室，人很少，但是BC自己部门的人却都来得差不多了。Quality部门的人就是比别人勤劳啊！</description>
    </item>
    
    <item>
      <title>善于基因融合的民族</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%96%84%E4%BA%8E%E5%9F%BA%E5%9B%A0%E8%9E%8D%E5%90%88%E7%9A%84%E6%B0%91%E6%97%8F/</link>
      <pubDate>Tue, 20 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%96%84%E4%BA%8E%E5%9F%BA%E5%9B%A0%E8%9E%8D%E5%90%88%E7%9A%84%E6%B0%91%E6%97%8F/</guid>
      <description>中国也许并不是一个封闭的文化，因为中国是一个善于融合其他民族的地方，无论是文化上，或是基因上。所以所谓“流氓外教”的观点其实并不正确，血缘融合其实是中国的强项。</description>
    </item>
    
    <item>
      <title>V字仇杀队</title>
      <link>http://blog.zhouyiyan.cn/blog/v%E5%AD%97%E4%BB%87%E6%9D%80%E9%98%9F/</link>
      <pubDate>Mon, 12 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/v%E5%AD%97%E4%BB%87%E6%9D%80%E9%98%9F/</guid>
      <description>不愧是IMDB上8.3分的电影，同样分数的电影都是Crash、第六感、老男孩一类的大片。原本以为漫画改编的电影顶多像超人、X战警之类的所谓大作，原来V字仇杀队“是一部相当有内涵的片子”——Paige。前三分钟就让BC误以为这是一部标准的悬念片，而男主人公的出场，以及他那拗口的词汇和各种引用，让BC觉得更像是一部舞台剧。当字幕翻译者自以为是地使用各种描述前德国的词汇时，让BC多少有一些失望。娜塔莉波特曼的出演为这部黑色电影增添了不少亮丽，那粉色娃娃的造型让身为娜粉的BC看了心动不已（也招来了Paige的不满），光头的造型更展现了娜塔莉敬业的一面。可惜不知道原作中有没有这个女性角色，只觉得娜塔莉的戏份作为一种艺术手段尚可，而没有这个人物对于剧情的影响也不大。开场的烟火爆炸，让BC想起搏击俱乐部那个经典的结尾，最终的结尾也与开头起了呼应，所以这更是一部戏剧，而不是电影。内战、独裁、保守、舆论控制、秘密警察、自由、同性恋、宗教等敏感题材的加入，以及基督山伯爵和佐罗的影子，恰当的叙事手法，都使得这部片子几近完美。IMDB更是给V的观众推荐了搏击俱乐部，是对本片的极大推崇。
也许有人会问这么一部好片子为什么只有8.3分？其实不然，最低的8.4分是钢琴家，应该说8分以上的都是经典片子了，不看会抱憾终身的。</description>
    </item>
    
    <item>
      <title>Windows下开源个人理财软件选择4</title>
      <link>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A94/</link>
      <pubDate>Fri, 09 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A94/</guid>
      <description>摘要：个人理财软件（Personal Financial Manager，简称PFM）目前在国内市场上可选择的不多，免费的大多功能很差，好一些的卖得又不方便（不是贵，只是不方便）。这里把BC选择PFM的过程记录下来，方便各位选择一款适合自己的PFM，但是关键还在于自己坚持。
上文&amp;hellip;&amp;hellip;
Cycle 4:
上一轮选手还剩下GFP、jGnash和Money Manager Ex。
下面主要针对报表功能进行测试，因为报表才是真正帮助掌握财务情况的功能，输入方便只是一个方面。在测试之前出现一个小插曲，为了检测三个软件的Portability，特意将三个软件拷贝到了安装目录之外的地方。而在测试时，GFP竟然意外的打不开账簿了。最后发现，原来是GFP被打开了两次，虽然是个人的误操作，但也未免在BC心中降了很多分数。再说本来就是上个Cycle准备淘汰的对象，这个Cycle也没什么悬念了。
GFP 默认报表：无 报表生成：复杂 自动打开账簿：提示（偶尔会发生账簿无法打开现象） 每一个报表的出现，都会要求输入大量的参数，至少需要查询区间，并没有提供默认可供使用的报表。而且两次报表之间也没有记住参数，这样每次都必须重新输入。再加上GFP故有的慢动作，立刻封杀！
jGnash 默认报表：月余额、收支饼图、损益表 报表生成：简单可定制 自动打开账簿：支持 有一些默认的报表可以使用，但只有月余额和收入支出饼图是图形报表，其余都是文字报表。另外损益表这个功能不错，但是默认提供季度损益，并没有国内软件提供的月损益或者年度损益比较，也些遗憾。jGnash的输入功能很好，界面也中规中矩，但是报表功能略显单薄。
Money Manager Ex 默认报表：汇总、资金走向、收支、预算 报表生成：固定 自动打开账簿：支持 默认的报表很多，也比较有用，但都是文字报表，没有图形。除此之外，完全不可定制也是极大的弱点，不过操作简单也是好处。
报表功能的话GFP最强，独立的报表控件可以生成各种复杂的报表；而jGnash也可以做有限的定制，图形好看而且使用；Money Manager Ex的报表虽然无法定制，但默认提供的报表已经可以实现基本的需求。尽管如此，GFP的淘汰是情理之中的事，反应慢，报表Usability太差。
下一轮选手：jGnash和Money Manager Ex
由于只剩下两个候选软件，因此接下来BC会试用一段时间，尤其在本地化方面，看看这两个软件是否有Workaround能否实现诸如基金、保险等复杂的记账功能。
Cycle 5&amp;hellip;</description>
    </item>
    
    <item>
      <title>潜规则的表面化危机</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%BD%9C%E8%A7%84%E5%88%99%E7%9A%84%E8%A1%A8%E9%9D%A2%E5%8C%96%E5%8D%B1%E6%9C%BA/</link>
      <pubDate>Thu, 08 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%BD%9C%E8%A7%84%E5%88%99%E7%9A%84%E8%A1%A8%E9%9D%A2%E5%8C%96%E5%8D%B1%E6%9C%BA/</guid>
      <description>现在各种各样的黑幕以一种诱人的方式出现了，什么猎头详解、“毕业4年看我是怎样在人力资源部月薪从4K到15W”之类的……看起来只是个人的一种炫耀或告诫，但是仔细看来，确实一种潜规则的表面化。
什么是潜规则？潜规则必须要潜才行，而不能表面化也是其存在基础的致命伤。因此潜规则都有一种表面化的倾向，似乎表面化后，被人们认可后，就变成一种公认的规则。
要警觉啊！潜规则就是潜在的规则，尽管无法丢掉它，也千万不要认可。</description>
    </item>
    
    <item>
      <title>Novell付出代价，微软渔翁得利</title>
      <link>http://blog.zhouyiyan.cn/blog/novell%E4%BB%98%E5%87%BA%E4%BB%A3%E4%BB%B7%E5%BE%AE%E8%BD%AF%E6%B8%94%E7%BF%81%E5%BE%97%E5%88%A9/</link>
      <pubDate>Sun, 04 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/novell%E4%BB%98%E5%87%BA%E4%BB%A3%E4%BB%B7%E5%BE%AE%E8%BD%AF%E6%B8%94%E7%BF%81%E5%BE%97%E5%88%A9/</guid>
      <description>Novell为和微软联盟可能即将付出代价，开源组织FSF将考虑禁止Novell贩卖Linux系统，这是否也正和微软的意思，因为微软可能就快要成功的将Novell从Linux阵营拉到Windows这边了。</description>
    </item>
    
    <item>
      <title>我的电影周</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%88%91%E7%9A%84%E7%94%B5%E5%BD%B1%E5%91%A8/</link>
      <pubDate>Sun, 04 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%88%91%E7%9A%84%E7%94%B5%E5%BD%B1%E5%91%A8/</guid>
      <description>电影的第三部亦如人的七年之痒一般，无论是黑客帝国第三部的落入俗套，还是死神来了第三部与前情的毫不相关，抑或是黑夜传说第三部的枯燥乏味，就连指环王的第三部也远不及小说的精彩。于是杀死比尔两部解决问题，或者干脆像哈利波特、异形、侏罗纪公园那般将观众的胃口吊足到最终的乏味……阿汤哥的碟中谍就跨入了电影的三部之痒，不再是第一部里Rookey装扮，也不是第二部中的野性造型，第三部里教练式的模样不伦不类，情节上远不及致命ID续作精彩。连衡山宾馆都不知道在哪里的阿汤哥，确实应该退休了。
上周日看完碟中谍3，周二又去看了阿瑟和他的迷你王国。这部法国动画片又一次验证了电影动画的无敌。小人国的幻想，石中剑的冒险，Hipop音乐，好人必胜的孩童理念，以及那美丽的迷你诺伊人公主和有些擦边的“早恋”语言……绝对是一部值得观看的电影，让BC从头至尾对女主角充满着幻想。果然吕克贝松的电影是值得期待的。
周五晚上的赛车总动员也是一部好看的片子。拟人化、励志、时弊讥讽、人与自然的和谐等方法巧妙的结合在一起，构成了这不成功的商业动画片。最让人惊奇的则是细节的处理，无论是车轮胎印的云层，车模样的山丘，苍蝇也变成了长翅膀的小甲壳虫车；除此之外，日本女主播被描绘成微型车，美国总统则成了象征军事强权的悍马，还有意大利口音的法拉利迷，纽约女律师则是保时捷，都是相当形象的，而且个性鲜明。最终主人公麦奎恩认识到了团队精神、友谊、真正的荣耀感，又一次回到了商业必胜的美国式结局，有些令人遗憾而无奈。
如果对自己的想象力、判断力以及毅力有些自信，那么盲区行者则会是一个测试你抗抑郁和疯狂的好片子。整部片子不是纯正意义上的动画片，而是先拍摄好后再进行动画处理过的片子，因此基诺里维斯的样子还是很好辨认的。一部100分钟的片子，看了70分钟还不知所谓，而在最后15分钟和最后5分钟里几次的情节冲击，让人反反复复，这就是惊悚片的魅力。惊悚片不太好评论剧情，就留待自己发现吧。
最终总结一下IMDB评分，碟中谍3是6.9分，阿瑟和他的迷你王国只有4.9分，赛车总动员有7.7分，而盲区行者则有7.3分。因此只推荐赛车总动员和盲区行者。
补充一下，BC超喜欢惊悚片是有道理的。在IMDB上按照分类排名，惊悚片的前50名都在8.2之上。靠近的类型只有犯罪片8.1，TV短系列8.2和戏剧片8.3。戏剧片超越惊悚片是有道理的，毕竟电影也是充满戏剧冲突的，有机会的话BC会复习以下戏剧片的。</description>
    </item>
    
    <item>
      <title>改名</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%94%B9%E5%90%8D/</link>
      <pubDate>Fri, 02 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%94%B9%E5%90%8D/</guid>
      <description>这两天搬到了8楼，工作效率突然骤增，所以RSS也一直处于闲置状态。今天把5XX篇新闻一一看了过来，竟然发现IBM改名了！这怎么可能？CDL是一点消息也没有。也许是一条谣传吧？拭目以待了只好。</description>
    </item>
    
    <item>
      <title>IBM完善海量数据存储和管理产品线</title>
      <link>http://blog.zhouyiyan.cn/blog/ibm%E5%AE%8C%E5%96%84%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%92%8C%E7%AE%A1%E7%90%86%E4%BA%A7%E5%93%81%E7%BA%BF/</link>
      <pubDate>Tue, 30 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ibm%E5%AE%8C%E5%96%84%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%92%8C%E7%AE%A1%E7%90%86%E4%BA%A7%E5%93%81%E7%BA%BF/</guid>
      <description>IDGN在29号放出IBM计划收购Softek的消息，而在30号天极网的报道得到了证实，并且IT专家网给出了部分细节。Softek的透明数据迁移工具将进一步增强企业网络中数据存储和管理的能力，尤其是在Tivoli Storage Management上将会很有作为。尽管外界还在大肆宣扬HP取代IBM成为最大IT公司的消息，当IBM完成新的企业平台的产品框架后，BC相信一定能够超越HP的。</description>
    </item>
    
    <item>
      <title>IBM的新年机遇和挑战</title>
      <link>http://blog.zhouyiyan.cn/blog/ibm%E7%9A%84%E6%96%B0%E5%B9%B4%E6%9C%BA%E9%81%87%E5%92%8C%E6%8C%91%E6%88%98/</link>
      <pubDate>Mon, 29 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ibm%E7%9A%84%E6%96%B0%E5%B9%B4%E6%9C%BA%E9%81%87%E5%92%8C%E6%8C%91%E6%88%98/</guid>
      <description>收集了一周的IBM新闻，想做一个IBM新闻专题，也不知道做得好不好。题目俗一点，IBM的新年机遇和挑战。
IBM的2006是一个大发展的一年，这一点从年末大家对IBM的财报就能看出来，尽管已经获得了四个第一（服务器、存储、中间件、企业软件）和一个第二（咨询服务，因为麦肯锡的第一无人能够撼动），但利润依然无法满足人们过高的预期，结果竟然影响了整个纳斯达克科技股的表现。IBM的2006也是BC在IBM的第一个整年，见证着IBM成就客户、诚实守信以及创新的外溢文化。
IBM成功的收购了一系列IT基础设施的公司，如收购ISS，充实了Tivoli产品线（涉及IT监控到客户端的安全屏障）；在AMD2006四季度亏损的情况下，帮助AMD收购ATI，致力于CPU技术的研发，Intel和IBM在CPU技术的进步延续了摩尔定律，IBM俨然和AMD、Intel平起平坐，IBM并没有放弃硬件技术，只是放弃那些回报率低和回报周期长的低技术含量产品而已；在脱下PC业务的包袱后，IBM打印机部门又卖给了Recoh，这原本是一条传闻，但是经过来自腾讯、人民网和新浪的消息得到了验证；尽管有着HP号称第一IT企业的错误消息，IBM还是用事实证明自己同HP的竞争不在同一个领域（PC和打印机都卖掉了，这些都是HP的强项）；飞思卡尔离开摩托罗拉加盟IBM半导体联盟；牵制微软发展；轻装上阵的IBM在2007会给我们带来什么？新的CPU技术、更全面的企业客户软件以及更强的盈利能力。
有人说IBM转型成功了，但是BC认为这是一条永无止尽的创新之路，而且充满着困难险阻。IBM进军SNS，但在更广阔的企业应用中遇到挑战；Websphere之父离开去了微软；微软推出的Vista尽管受到了IBM等大公司的排斥，但是微软四季度财报超出预期；AMD尽管在同Intel的竞争中败下阵来，但是并不会简单受到IBM的影响，在AMD同国内PC大厂商合作中证明了自己的影响力；Google欲退出Metaverse与Second Life竞争虚拟世界；而基金市场的火热，也让私募基金对IBM目前较低的市值流出了口水。这些不稳定的因素，将给IBM未来的发展带来许多变数。</description>
    </item>
    
    <item>
      <title>Windows下开源个人理财软件选择3</title>
      <link>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A93/</link>
      <pubDate>Sat, 27 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A93/</guid>
      <description>摘要：个人理财软件（Personal Financial Manager，简称PFM）目前在国内市场上可选择的不多，免费的大多功能很差，好一些的卖得又不方便（不是贵，只是不方便）。这里把BC选择PFM的过程记录下来，方便各位选择一款适合自己的PFM，但是关键还在于自己坚持。
上文……
Cycle 3: 上一轮选手还剩下GFP、jGnash、Monex和Money Manager Ex。下面主要针对使用感受进行测试，记录下用户界面、响应速度等方面的资料。
GFP 皮肤：支持 语言：插件形式 插件：似乎支持（没用过） 智能：财务预测、信用卡最佳购买日期 主要模块：实体管理、账户管理、计划管理、类别管理、交易管理 使用感受： 启动缓慢（不知道在载入些什么） 任何操作都有进度条，但是感觉反应迟钝 文件打开还会失败！ 操作感觉很底层，很专业，很细节 翻译不过关 报表操作复杂 最终感受：复杂且慢
jGnash 皮肤：支持+主题 语言：默认 插件：不支持 智能：无 主要模块：账户信息、数据录入、提醒和报表 使用感受： 超简单，而且响应很快 操作方式简单明了 图表很好看 但是功能似乎很少，如果需要进行资产管理，可能需要相当的Trick才行 最终感受：简单实用
Monex 皮肤：不支持 语言：仅英语 插件：不支持 智能：无 主要模块：账户管理、数据录入、Schedule 使用感受： 同样简单，而且速度更快 输入的时候有一些小功能很实用 但是完全没有报表功能，只能看个大概 最终感受：太简单了
Money Manager EX 皮肤：不支持 语言：默认 插件：不支持 智能：无 主要模块：账户、股票、资产、预算和报表 感觉像是VB开发的，而且界面很漂亮，不同于jGnash的那种简洁 主要功能非常明显的列在左侧，清晰而直观 功能切换是有些慢 最终感受：简洁明了
本来是打算淘汰GFP的，但是Monex不支持英文，而且报表功能过于简单，所以还是把Monex淘汰掉了。不过Monex真得挺注意细节的，包括自动补齐和创建，而且如果只是简单记账，那Monex绝对可以击败任何的对手。这里也希望Monex能够继续好好努力吧。
下一轮选手：jGnash、GFP和Money Manager Ex
Cycle 4&amp;hellip;</description>
    </item>
    
    <item>
      <title>IBM会被收购吗？</title>
      <link>http://blog.zhouyiyan.cn/blog/ibm%E4%BC%9A%E8%A2%AB%E6%94%B6%E8%B4%AD%E5%90%97/</link>
      <pubDate>Tue, 23 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ibm%E4%BC%9A%E8%A2%AB%E6%94%B6%E8%B4%AD%E5%90%97/</guid>
      <description>IBM会被收购吗？有钱人太多了，如果想要收购点公司应该也是没问题的。问题是公众和各基金允许吗？还有就是法律会允许吗？美国法律应该有保护公众公司的相关条款吧。</description>
    </item>
    
    <item>
      <title>IBM进军SNS</title>
      <link>http://blog.zhouyiyan.cn/blog/ibm%E8%BF%9B%E5%86%9Bsns/</link>
      <pubDate>Tue, 23 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ibm%E8%BF%9B%E5%86%9Bsns/</guid>
      <description>IBM要进军SNS了。 这条新闻有些意料之中，因为BC在一两个月前已经开始注意到内网中上马了很多准SNS的工具和平台。通过分析用户的交互记录，并提供交互平台，SNS很好在企业平台上扮演了出色的粘合剂。Wiki、Blog、Podcast、杂志、新闻、Forum和形形色色Community构成了新一代企业SNS的舞台，希望能够早日用上这些fancy的东东。</description>
    </item>
    
    <item>
      <title>Windows下开源个人理财软件选择2</title>
      <link>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A92/</link>
      <pubDate>Mon, 22 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A92/</guid>
      <description>摘要：个人理财软件（Personal Financial Manager，简称PFM）目前在国内市场上可选择的不多，免费的大多功能很差，好一些的卖得又不方便（不是贵，只是不方便）。这里把BC选择PFM的过程记录下来，方便各位选择一款适合自己的PFM，但是关键还在于自己坚持。
Cycle 2: 上一轮选手还剩下GFP、Grisibi、jGnash、Money Manager Ex和Monex。下面逐一使用各软件完成初始化、帐户建立和第一笔交易建立，然后把基本情况简单记录下来。
jGnash 运行平台：Java 中文显示：Yes Portable：无需安装 货币支持：Wizard形式设置容易 主要功能：Account Info / Data Input / Reminder 支持帐户类型：共有基金、投资、支出/收入、现金、资产/资产净值/负债、贷方、银行 帐户结构：树 默认资料：无
GFP 运行平台：Java 中文显示：Yes 货币支持：自动设置成人民币 智能功能：预测 缺点：进度提示过多，反应有些慢 默认资料：无
Grisbi 运行平台：gtk2 中文：支持 货币支持：默认欧元，设置麻烦 界面：难看 响应速度：闪烁 文件系统访问：难看而且困难 支持帐户类型：现金、银行、资产、负债 默认资料：支出收入类别
Monex 运行平台：native 中文显示：不支持中文界面 帐簿管理方式：不支持多帐簿 货币支持：系统初始提示设置默认货币 帐户类型：现金、银行、借记卡、贷记卡、股票、基金、通用 默认资料：无 主要功能：账户管理、记账、定期事务
Money Manager Ex 运行平台：native 中文显示：支持 本地化：支持 初始化向导：包括帐簿初始化、货币选择 帐户类型：银行、投资 自动更新：支持 默认资料：收入支出
由于Grisbi货币设置过于繁琐，界面速度慢，功能简陋，所以没有进入下一轮。不过BC要补充的是，Grisibi的用户文档很完整，网站也不错，功能虽然简陋但实用，希望Grisbi能有新的发展吧！
下一轮选手：jGnash、GFP、Monex和Money Manager Ex
Cycle 3&amp;hellip;</description>
    </item>
    
    <item>
      <title>侦探们的镇魂曲</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BE%A6%E6%8E%A2%E4%BB%AC%E7%9A%84%E9%95%87%E9%AD%82%E6%9B%B2/</link>
      <pubDate>Sun, 21 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BE%A6%E6%8E%A2%E4%BB%AC%E7%9A%84%E9%95%87%E9%AD%82%E6%9B%B2/</guid>
      <description>柯南第十部《侦探们的镇魂曲》总算看完了，这个类似大逃沙的片名和设置（爆炸ID）在看了不到十分钟以后就让BC有一种不祥的预感。在接下去的两个小时里，众多角色悉数登场。大概除了新一的父母和黑暗组织，几乎全部出动了，感觉有点谢幕的味道。“开头的铺陈不错，可是结尾有些蛇”——Paige，BC双手赞同。
总结了一下，柯南剧场版的噱头主要有： 新一和小兰的羁绊——时计引爆摩天楼、十四番目标、瞳孔中的杀人犯、水平线上的阴谋 小兰父母的问题——十四番目标、水平线上的阴谋 怪盗基德——世纪末的魔术师、银翼之奇术师 黑暗组织——通往天国的倒计时 柯南父母——贝克街的亡灵 服部平次——世纪末的魔术师、迷宫的十字路口
经过十部的柯南也该到了创意尽头了，侦探们的镇魂曲硬是要把各种元素混合在一起，除了黑暗组织几乎都有了（其实最后灰原的那声恐怖的喝阻，已经够显示黑暗组织元素了）。
总之，这不是一部值得看的片子（同宠物小精灵的2006剧场版一样），柯南是该长大了，经典已经结束。</description>
    </item>
    
    <item>
      <title>大观园游记</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%A4%A7%E8%A7%82%E5%9B%AD%E6%B8%B8%E8%AE%B0/</link>
      <pubDate>Sun, 21 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%A4%A7%E8%A7%82%E5%9B%AD%E6%B8%B8%E8%AE%B0/</guid>
      <description>今天去青浦办事，顺便和Paige还有老爸去了大观园游玩。经过长途跋涉，在“水上酒家”吃过了一顿还算量足的饭后，终于到达了目的地。
大观园，红楼缘。这个曾经被众多重要领导视察的地方，这个在二十年前就开始兴建的地方，如今，也同红楼梦中的四大家一般凋零。缺少了游人的光顾，缺少了领导的照顾，也就缺少了最重要的维护资金。不再金碧辉煌的大观园，也就恢复了它本来的面目。
历史是不会发生改变的，改变的只是人们的心。</description>
    </item>
    
    <item>
      <title>Happy birthday!</title>
      <link>http://blog.zhouyiyan.cn/blog/happy-birthday/</link>
      <pubDate>Thu, 18 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/happy-birthday/</guid>
      <description>今天之所以快乐，是因为BC收到了有史以来最好的礼物，喜出望外。Paige的保密工作做得很好，以至于天天在一起，都没有发现一点端倪，Paige太棒了！BC是不是也能做到这样呢？总之，超高兴！至于礼物呢，则是BC期待了很久很久的PSP！前两天还在和同事探讨说呢！哈哈哈！估计晚上要睡不着了，反正这两天都在搞论文，没关系。
另外补充一下论文进展，明天的话再Review以下文字，打印好就可以GA了。接下来就是Movie月了，把错过的电影全部补上，争取多写影评出来。
本来不想再补充了，但这个消息太重要了，那就是WebSphere之父离开了IBM去了微软。只想Highlight一条，那就是Big companies needs big support，而BC就决心做个Big Supporter!</description>
    </item>
    
    <item>
      <title>Windows下开源个人理财软件选择1</title>
      <link>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A91/</link>
      <pubDate>Tue, 16 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/windows%E4%B8%8B%E5%BC%80%E6%BA%90%E4%B8%AA%E4%BA%BA%E7%90%86%E8%B4%A2%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A91/</guid>
      <description>摘要：个人理财软件（Personal Financial Manager，简称PFM）目前在国内市场上可选择的不多，免费的大多功能很差，好一些的卖得又不方便（不是贵，只是不方便）。这里把BC选择PFM的过程记录下来，方便各位选择一款适合自己的PFM，但是关键还在于自己坚持。
Cycle 0： PFM用的人不多，也算是一种小众产品，但产品种类却不少。最基础的是用Excel表格制作的，方便实用，但本文并不涉及（网上有一些传播版本，如微软MM的记账本、2007电子记账等）。免费的PFM大多是一些简单记账，没什么技术含量，缺乏维护。国外的收费PFM中文化和本地化水平糟糕，也不涉及。做得好一些的话只有家财通和财智了。财智不错，有着For Small Business般的界面，但并不免费。家财通简洁而且美观，但收费方式有待改进（BC个人比较喜欢，长期试用中）。所以决定从开源PFM中选择一款，看看能否替代BC的家财通。
Cycle 1： 从Wikipedia上面找到了6款个人使用的PFM：GFP、Grisbi、jGnash、GNUCash、KMymoney和JMoney；从Souce Forge上面按照下载数和排名找到了另外2款比较好的PFM：Money Manage Ex和Monex。
GNUCash在Windows下面并不稳定，所以立刻被枪毙； KMymoney曾经在Linux下用过，不错但不好，而且必须借助KDE，所以放弃； JMoney是Eclipse插件，没有提供简便的安装手册，而且BC不希望使用RCP，所以丢掉；
第一轮剩余选手：GFP、Grisibi、jGnash、Money Manager Ex和Monex
Cycle 2&amp;hellip;</description>
    </item>
    
    <item>
      <title>IBM帮助AMD收购ATI？</title>
      <link>http://blog.zhouyiyan.cn/blog/ibm%E5%B8%AE%E5%8A%A9amd%E6%94%B6%E8%B4%ADati/</link>
      <pubDate>Mon, 15 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ibm%E5%B8%AE%E5%8A%A9amd%E6%94%B6%E8%B4%ADati/</guid>
      <description>有一则传闻，不过BC不是很确信。因为IBM没必要增强CPU呀，PowerPC的定位不是娱乐家电么？不过如果AMD的CPU技术能够增强PowerPC的话也不错，毕竟AMD迟早被Intel甩掉的。</description>
    </item>
    
    <item>
      <title>IBM收购ISS和论文进展</title>
      <link>http://blog.zhouyiyan.cn/blog/ibm%E6%94%B6%E8%B4%ADiss%E5%92%8C%E8%AE%BA%E6%96%87%E8%BF%9B%E5%B1%95/</link>
      <pubDate>Sun, 14 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ibm%E6%94%B6%E8%B4%ADiss%E5%92%8C%E8%AE%BA%E6%96%87%E8%BF%9B%E5%B1%95/</guid>
      <description>IBM收购ISS了， 一个以“CHECKPOINT、CISCO、MCAFEE和SYMANTEC等”为竞争对手的公司。尽管ISS主要会以服务的形式为IBM利润做贡献，但也会并入Tivoli的软件产品线。由此不难想到IBM在迈向IT Architect的同时，也为自己的Infrastructure独立做着努力。如果ISS的产品能够取代目前Checkpoint的防火墙、Symantec的防病毒软件，然后再使用Open Client取代XP……那IBMer们的电脑上就不再需要任何非IBM产品了。大公司俨然就是一个独立的生态环境啊！
今天中午将第三稿论文交给了老师，还有最后的5天，希望顺利渡过！</description>
    </item>
    
    <item>
      <title>另一个Farewell，Apple和论文进展</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8F%A6%E4%B8%80%E4%B8%AAfarewellapple%E5%92%8C%E8%AE%BA%E6%96%87%E8%BF%9B%E5%B1%95/</link>
      <pubDate>Fri, 12 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8F%A6%E4%B8%80%E4%B8%AAfarewellapple%E5%92%8C%E8%AE%BA%E6%96%87%E8%BF%9B%E5%B1%95/</guid>
      <description>今天又收到了一封Farewell Letter，是BC的桌友Ellen。想当初这个MM是接替大宝工作来的，一开始还有一些思想上的抵制，毕竟不能取代大宝在BC心目中的地位。不过接触的时间长了，Ellen自称“天平座”的和善个性让BC感觉亲近不少。从812搬到1034以后，长达三个月的桌友生活让BC平添不少乐趣。桌上有共享的纸巾，有Ellen折的超小的会动翅膀的纸鹤，有一盆“抢”来的圣诞花，有两个节日气球，还有一大叠平日积攒的报纸……可惜曲终人散，BC也即将回到8楼开始新的任务。这不是生活，这是Business，所以BC只得去适应它。
Apple终于脱离了电脑。在摆脱了IBM的PowerPC后，Apple也大刀阔斧的向电子娱乐业进攻，iPhone、iPod、iMac、iWatch……如同Google在2006给我们带来的惊喜一样，Apple会在2007给我们带来什么呢？只得期待，绝对只得期待，因为Sony、Microsoft也许会给我们带来更多？
早上收到一个期盼已久的论文录取通知书，终于BC的小论文发表计划顺利完成。接下来就是在最后的8天里，完成一篇中高质量的毕业论文就可以了。期盼早日洗净自己的学生味道，走向新的人生阶段。</description>
    </item>
    
    <item>
      <title>K-Means聚类</title>
      <link>http://blog.zhouyiyan.cn/blog/k-means%E8%81%9A%E7%B1%BB/</link>
      <pubDate>Sun, 07 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/k-means%E8%81%9A%E7%B1%BB/</guid>
      <description>本来想用分类器实现自己论文中的一个监测功能的，但是发掘用于分类的训练样本的分类值没有定。想来想去就想到BC的老本行——聚类算法那里去了，不过以前的一些资料因为硬盘的原因丢失了，所以找了一些新的资料用Blog保存一下。BC研究的是中耳炎症检测，大概分成正常人、亚正常人、炎症患者和胆脂瘤患者，论文最大的好处是帮助医生找到亚正常人，毕竟已经是胆脂瘤的话，除了手术没别的办法了。因此选择K-Means聚类会比较好，但是懒得写代码了，这里有可以下载源代码的地方。</description>
    </item>
    
    <item>
      <title>石油价格</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%9F%B3%E6%B2%B9%E4%BB%B7%E6%A0%BC/</link>
      <pubDate>Sun, 07 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%9F%B3%E6%B2%B9%E4%BB%B7%E6%A0%BC/</guid>
      <description>正在看中国财经报道的石油价格特别节目。面对石油价格问题，某个穿绿色衣服的来自国际关系研究所的女士竟然发表了这样的观点，我们的价格比国际价格低，放纵消费只会放纵价格。BC无语……我们老百姓的收入怎么没人管，消费倒是已经开始被我们的公仆们抑制了。</description>
    </item>
    
    <item>
      <title>BEA被收购</title>
      <link>http://blog.zhouyiyan.cn/blog/bea%E8%A2%AB%E6%94%B6%E8%B4%AD/</link>
      <pubDate>Sat, 06 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/bea%E8%A2%AB%E6%94%B6%E8%B4%AD/</guid>
      <description>【赛迪网讯】1月6日消息，据金融分析师称，惠普在2007年可能会收购BEA系统公司以提高向企业销售技术产品的能力。转自这里。
HP刚刚完成同微软的联盟，凭借复印机、打印机和个人电脑在部分利于的销售额略超越IBM，可是这并不代表HP同IBM或Google一样有足够的闲钱去并购BEA。搜索了以下“BEA+收购”，发现BEA是一家以收购其他公司为传统的公司。HP即使购买了BEA，也只是将自己拉入了一个竞争对手更多的拳击台，除了IBM之外，还要面对Oracle、SAP，甚至自己的盟友Microsoft。对于HP自己刚提出的Office Infrastructure，中间件应该不是HP的强项。作为IBM来说，也不希望看到中间件商越来越少，毕竟IBM也不仅仅销售自己的产品，咨询收益总有一天会占更多份额的，因此需要更多的合作伙伴。</description>
    </item>
    
    <item>
      <title>流水账</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%B5%81%E6%B0%B4%E8%B4%A62/</link>
      <pubDate>Fri, 05 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%B5%81%E6%B0%B4%E8%B4%A62/</guid>
      <description>今天比较累，不想也不多写。
Update以下： 1/20前BC要闭关修炼，论文真的有些头大了； 现在每天开始锻炼身体，希望能够改善体型； 每天的RSS阅读习惯还在保持； 终于理解神经网络的好处，把不懂得东西往里面套； 基金关注中……</description>
    </item>
    
    <item>
      <title>Movie Day</title>
      <link>http://blog.zhouyiyan.cn/blog/movie-day/</link>
      <pubDate>Tue, 02 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/movie-day/</guid>
      <description>今天完成了大论文的关键算法，所以奖励自己去连看两部贺岁片。黄金甲自然是要放弃的，因为网上恶评如潮的关系，因此最后决定看伤城和大电影。
最先看的是伤城，一部据说拥有黑暗结局的悬念侦探片。梁朝伟和金城武的演技自然没有话说，刘伟强和麦兆辉也是传说的导演搭档，但是徐静蕾的戏份不足以突出其角色的特点和内心变化，舒淇也是花瓶角色，而剧情则不如BC预先设想的精彩，并没有超越无间道的水准，同Usual Suspects和Momento更是无法相比。总的来说有一些失望，既没有侦探片的离奇、也没有惊悚片的悬念，只是值得一看而已。
大电影主要是冲着Scary Movie以及曾经的一部韩国的模仿片，看看国产模仿片的水平而去的。应该说还算是一部模仿得不错的电影，但剧情方面除了揭露了一些时弊以外，并没有很出彩，甚至有些牵强。而为房产开发商托辞的部分，这种符合和谐社会标准的安抚，也令BC不是非常满意。尽管最终开发商被所谓的报应所“搞定”，有些血腥，有些无奈，有些拉部上调。最终的结局更是让人摸不着头脑。演员都很敬业，曾志伟、疯狂石头里的榔头猛男、以及武林外传里的那个方言妹都很不错，宁财神的编剧则稍显不足，毕竟模仿片也是一种艺术，不是单纯的恶搞。
看完只有一个想法，国片还不值得去电影院看。</description>
    </item>
    
    <item>
      <title>新年第一贴</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%96%B0%E5%B9%B4%E7%AC%AC%E4%B8%80%E8%B4%B4/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%96%B0%E5%B9%B4%E7%AC%AC%E4%B8%80%E8%B4%B4/</guid>
      <description>Happy New Year!
第一贴说点什么呢？BC也不知道，但突然想起来忘记给去年作总结了，就给自己先总结后定目标吧。
 2006是悲伤的，来来去去了好多人，甚至有去天堂的； 2006是辛苦的，论文、工作、项目，一个都不能少； 2006是幸运的，拿到了Offer，甚至曾经有出国的机会…… 2006是幸福的，参加了好友和好友的婚礼，憧憬着自己的未来； 2006是不爽的，生了好几场病，从头到脚都不舒服过了； 2006是遗憾的，错过了好多电影、好多书和好多动画片；  但2006年是BC积累的一年，顺利从学生过渡成为一名IT工人。
 今年一定要多积攒RP，少冒险； 希望论文能顺利通过，早日脱离学生生活； 工作上能够顺利接收新的任务，并考出CC Admin证书； 把去年错过的三十部电影看掉，还有几本书和几部动画片并新开一个系列，当然还有PB和DW； 继续坚持记帐和写Blog； 资产能够增长100%以上； 至少参加2次志愿者活动； 争取发一篇文章并参加一个社团活动；  不知道这些目标是否能够完成，尽量争取吧！
^_^</description>
    </item>
    
    <item>
      <title>BC的党性分析材料</title>
      <link>http://blog.zhouyiyan.cn/blog/bc%E7%9A%84%E5%85%9A%E6%80%A7%E5%88%86%E6%9E%90%E6%9D%90%E6%96%99/</link>
      <pubDate>Sun, 31 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/bc%E7%9A%84%E5%85%9A%E6%80%A7%E5%88%86%E6%9E%90%E6%9D%90%E6%96%99/</guid>
      <description>以下是BC过去的党性分析材料。党性分析是从更高Level审视自己党员性质的一种方式，使现在这个环境没有的精神花园。虽然为有些人所不屑，但是经常总结和回顾自己的言行，敢于宣扬自己的共产主义精神才是应该自豪的。
我为我是一名共产党员而骄傲！
自我剖析，保持先进 ——党性分析材料
我于xxxx年x月xx日加入中国共产党，成为一名光荣的共产主义战士，在这三年半里的学习和工作中，我一直以先进的思想和远大的目标来激励和指导自己的发展，并且经常针对世界观、人生观和价值观进行思考。在组织的关心培养和自己的努力下，我的能力、思想和信仰得到了长足的进步和发展。 在最近参加由研究生部组织的先进性教育的系列活动后，思想上收获不少，在各个方面都有了新的认识，尤其是在理论方面，我认识到党的先进性体现于先进的理论和思想，而一心为他并非一种绝对先进的思想，创造一个人人为人人的社会制度才是最根本的，发展生产力不能解决全部问题，物质和利益的协调发展是推动历史发展的动因，因此保持思想和能力上的先进非常重要。党员不单单是品质高尚的人，更是意志坚强的铁人，是狂热宣扬自己信念的传教士，是勇于对抗反对思想的战士，是能够领导他人共同进步的领导者。经过这次先进性教育，更是认识到自身还是存在许多不足，现在进行自我分析与批评：
一、 存在的主要问题
 政治理论功底不够扎实。 转正以来虽然一直保持着积极的态度进行政治和思想学习，十分关注国家的发展，对于时政大事或者组织上的一些问题总能有自己的想法，但是往往停于此地，并不作深入的研究，也不能总结出自己的思想。并且对于支部组织的学习兴趣度也不高，不能积极地参与，只是被动的接受。同真正有思想的人交流起来，反而暴露出自己理论功底非常不足，评论至于表面，不能加以引申和总结。 联系群众的能力还有待加强。 工作上我曾经一直担任着各种学生工作，并时刻认识到自己身为一名党员，并且是一名以优秀党员为目标的党员，应该注重培养自己领导群众的能力。但是面对新的同学和新的学习环境，没有更主动去联系群众，也没有及时调整自己的心态，加上研究生学习生活本身的隔离性，使得同群众的联系和交流便少了。 有时过于自我，忽视“协调发展”。 通过理解“先进生产力”，我认识到自身业务水平提高的重要性，参与了许多为集体争荣誉的活动，坚持创新和理论联系实际，学习上一直保持领先，但是进入研究生学习以后，过于集中于自身能力的培养，忽视了对自身信仰、集体主义和团队合作精神的培养，思想上也渐渐有了一些懈怠，工作上则因为过于专注学习和研究，没有积极参加学生工作，使得自己同集体的步调有些不协调。  二、 问题原因的剖析
经过这次先进性的教育活动，使自己能够从各方面重新认识自己，本着认真对照先进性体现的原则，通过认真思考，理性分析，我认为自己的不足产生的主要原因有以下几方面：
 理论学习态度不正确。 经过自我剖析，我认识到自己进入研究生阶段后的变化，主要原因在于还没有摆正研究生阶段学习的态度，也没有清楚地认识到本科同研究生阶段学习的不同，没有及时做好调整。虽然认识到“先进生产力”理论，但是过多的将业务水平的培养摆到了自己面前，认为研究生阶段最重要的是培养业务水平，忽视了自己思想上的进一步发展。 忽视集体主义等其他优秀品质的培养。 虽然认识到群众基础的历史作用，但是面对当前的环境，不懂得去有效利用时间和空间，去巩固自身的群众基础，与人打交道的能力欠缺，这一方面是因为自身性格所致，有的时候比较自我封闭。另外一方面在于自身的能力还是有所欠缺，没有坚实的基础有的时候也是没有办法通过合作来提供效率的。 忽视物质和精神的平衡。 从世界观、人生观和价值观的角度分析，过度的物质性认识使我轻视了精神的培养，虽然看中自我发展，但是没有摆好天平。虽然信仰上还是坚持共产主义思想，但是对于实现共产主义、国家发展、党的发展以及自我发展的关系上，有了模糊的想法，认为自我发展最重要。事实上，利益驱动和信仰驱动自马克思以前就已经形成，世俗社会和教会本身就是两股相互牵制、相互配合的势力。国家现在处于发展中，利益驱动的影子无处不在，而党的发展也是对党员信仰的一种考验。在这样一种社会，如何处理好利益和信仰，也就在处理好物质和精神的关系上至关重要。没有物质的信仰只能造成红色巨人的陨落，没有信仰而只要物质的驱动使得历史进行不停的循环，两者的统一才能推动历史的发展。  三、 关于群众的意见和建议答复
通过与身边的党员、群众谈心以及征求意见，使我更清楚的了解到了自己身上存在的不足。经过总结归纳，大家对我不足的评价主要有以下几点：道德素质、专业研究、创新精神、关心同学和服务奉献多与群众交流，主要的意见是注意在同学中发挥党员的作用，团结同学，多与同学沟通。 从这些意见中可以看出，群众对自己的评价还是很客观的，而且我自己也已经发现了。因为自身性格存在的一些缺点，有的时候有些偏执，固执己见，专注于自我，忽视了集体，这对于自身的发展和巩固群众基础都是很不利的，也是不符合集体主义和团队合作精神的。至于在专业方面，进入二年级后，钻研方面欠缺耐心，有的时候虽然有很多的想法，但是静不下心来做研究，有些浮躁，这点我会更加注意的。创新精神是我比较欠缺的部分，有的时候过于死板，不够灵活处事，注重知识而轻方法，今后要改正过来。实习以后在学校的时间明显减少，这更加不利于我与同学沟通，我会找出更好的办法关心同学、为集体服务的，也希望身边的同学和老师继续对存在的缺点和不足进行指正。
四、 整改措施和努力方向
 首先还是要坚持共产主义的理想信念。 认识到国家物质发展的同时，还必须坚定建设有中国特色社会主义的信心，同时也要坚定有党员特色的自我发展的信心。有这样一种说法，共产党人不懂马克思，意思就是许多体现马克思精髓的著作并不为共产党人所重视，像是资本论和政治经济学都是西方资本主义经济学必学的科目，可是我们的同志们真正看过的也没几个，认识到精神和物质的统一，但忽视对经典的学习还是没有用的，所以要继续积极学习各种经典理论知识，扎实提高实践“三个代表”重要思想的本领。 要时刻坚持党的根本宗旨，始终不渝地做到为人民群众服务。 不仅要为当下的人民群众服务，更要着眼未来，看到长远的发展，为未来的人民群众服务。要坚持勤奋工作，兢兢业业地创造一流的工作业绩，同时将好的经验和本事同其他人分享。要发掘各种为人民服务的方式，不要拘泥于单一的方法。 坚持遵守党的纪律，积极参加党的组织活动，融入集体。 在组织活动中积极发挥自身的能动心，身体力行地维护党的团结统一。树立无私奉献和艰苦奋斗的精神，保持先进党员的良好形象。我要牢固地树立科学的世界观、人生观、价值观，由此入手，牢固地树立为党为人民无私奉献的精神。要把个人的追求融入党的事业之中，坚持党的事业第一，坚持人民的利益第一；要个人利益无条件地服从集体利益、国家利益，为党和人民的事业甘愿奉献毕生精力 要保持思想道德的纯洁性，生活上同群众看齐。 正确对待金钱、名利，努力做一个无愧于党，无愧于人民的人；要在生活上艰苦朴素，勤俭节约，不奢侈浪费，不追求享受；在思想上自觉抵制腐朽思想文化和生活方式的影响；在工作上吃苦耐劳，不畏艰险，始终保持那么一股勇气，一股锐气，不屈不找，勇往直前；在用权上克己奉公，廉洁不以权谋私，不贪污受贿，坚决同腐败现象作斗争；在工作作风上，深入实际，联系群众，倾呼群众意见，想群众之所想，争群众之急，忙群众之所需，同群众建立起水乳交融的关系，决不高高在上，脱离群众。  通过这次保持共产党员先进行的教育活动，认识到自身的不足，要发扬有点，努力改正工作中的不足之处，通过这次活动是自己的各方面的综合素质，在原有的基础上得到进一步的提高。总之，面对新的要求、新的任务，自己要振奋精神，加倍努力，出色完成各项工作任务，力争为党为人民多作贡献。</description>
    </item>
    
    <item>
      <title>来来去去</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%9D%A5%E6%9D%A5%E5%8E%BB%E5%8E%BB/</link>
      <pubDate>Sun, 31 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%9D%A5%E6%9D%A5%E5%8E%BB%E5%8E%BB/</guid>
      <description>请假归来第一天（昨天），就听说Jacketason要走了。又是一个曾经的饭友，BC一直以为进了大公司就会获得比较稳定的工作环境，但来来去去的现象也很普通。可能其他地方更厉害吧，只好这样安慰自己。另外还听说坐在自己边上的Ellen也要走了，这才来了多久呀？年终了，怀念一番。</description>
    </item>
    
    <item>
      <title>从存单看银行的用户体验</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BB%8E%E5%AD%98%E5%8D%95%E7%9C%8B%E9%93%B6%E8%A1%8C%E7%9A%84%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Fri, 29 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BB%8E%E5%AD%98%E5%8D%95%E7%9C%8B%E9%93%B6%E8%A1%8C%E7%9A%84%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/</guid>
      <description>今天因为个人的原因必须到浦发银行去存钱，尽管柜员小姐很热情，可是拿到存单的时候却很Depressed。为什么呢？这存单也忒单薄了，拿在手里就像普通的复印纸那样没有质感，轻轻折了一下就出现一个很深的印子；而且存单有些大，尽管对于信封来说还行，可是皮夹里是放不下的；存单表面白白的很干净，越看越像复印纸……回来以后翻皮夹，差点把存单当成发票，晕！
再看看上海银行的，同样是地方性银行，存单就是酷！印花表面像Money一样，厚厚的捏在手里就不一样，大小放进皮夹正合适。所以说用户体验真的很重要，像浦发这样，BC是不会再去存钱的，至少不会用存单了。
PS. 上次让BC有同样不放心感觉的时候，是在第一次拿到美元的时候。靠！老美的钱真破，难怪说他们印钱买军火打仗活该贬值呢，感觉就是复印机印出来的。</description>
    </item>
    
    <item>
      <title>Everyday is deadline</title>
      <link>http://blog.zhouyiyan.cn/blog/everyday-is-deadline/</link>
      <pubDate>Tue, 26 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/everyday-is-deadline/</guid>
      <description>论文、论文、还是论文……
什么时候能够是个头？</description>
    </item>
    
    <item>
      <title>Say Hello to My Friends</title>
      <link>http://blog.zhouyiyan.cn/blog/say-hello-to-my-friends/</link>
      <pubDate>Tue, 26 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/say-hello-to-my-friends/</guid>
      <description>最近很多以前的和现在的朋友光顾这里，所以想对大家说声好！
由于不是很善言辞的人，这样的形式请大家多包涵哦。
只想对你们说，打心眼里是记得你们的！
^_^</description>
    </item>
    
    <item>
      <title>Merry Christmas</title>
      <link>http://blog.zhouyiyan.cn/blog/merry-christmas/</link>
      <pubDate>Mon, 25 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/merry-christmas/</guid>
      <description>-=[ Santa w/ reindeer ]=- 10&amp;frasl;00
 _____ .-&amp;quot;` `&#39;. /, \ / /``&#39;--..--&#39;``\ | \__.__.__,___/ \_ {/ e e \} { `}() (__) ()| `/,_.-&amp;quot;)(&amp;quot;-._,\ { `--`==`--` } .&#39;{ } }&#39;. \/ \/ .&#39; { } } \ -|` `|- / { { } ; ,_\| |/_,  ; , &amp;lsquo;-..__..-&amp;rsquo; , | \ / | ; : ; | .-..)&amp;mdash;(.&amp;ndash;. | &amp;lt;;._ _:_ _.| .-\\_.-/_ _ \-._/ | |&amp;rsquo;|.</description>
    </item>
    
    <item>
      <title>中国人寿股票发行了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%AD%E5%9B%BD%E4%BA%BA%E5%AF%BF%E8%82%A1%E7%A5%A8%E5%8F%91%E8%A1%8C%E4%BA%86/</link>
      <pubDate>Mon, 25 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%AD%E5%9B%BD%E4%BA%BA%E5%AF%BF%E8%82%A1%E7%A5%A8%E5%8F%91%E8%A1%8C%E4%BA%86/</guid>
      <description>中国人寿A股26号发行了，这将继续推动“牛市”的发展，上证指数可能又要创新高了。不过考虑到人寿股的特别情况，证交所还是给出了一些特别的规定，比如缩短申购时间、扩大发售面、加强统筹等。金融开放了，人寿也开放了，老百姓要抓紧呐，国有资本不知道还剩多少？</description>
    </item>
    
    <item>
      <title>Lawful Action</title>
      <link>http://blog.zhouyiyan.cn/blog/lawful-action/</link>
      <pubDate>Sun, 24 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/lawful-action/</guid>
      <description>高亚洲的事情告诉我们，想要耽误一个人学生的前途，可以先让他保送，然后收掉他的准考证，再宣布他不合格，全都是合法的。</description>
    </item>
    
    <item>
      <title>RP问题</title>
      <link>http://blog.zhouyiyan.cn/blog/rp%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 24 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/rp%E9%97%AE%E9%A2%98/</guid>
      <description>今天又一次体会了RP的威力。早上把MM的VAIO借来玩，突发奇想要享受一下双显示器，于是又把MM的SyncMaster拆下来接到VAIO上。爽了一会就没劲了，因为两个屏幕大小不一样，头扭来扭去也不舒服。正在把SyncMaster接回去的时候，问题就来了，黑屏，BIOS报警一长两短，绿灯闪烁……
查了很多资料都没有好办法（主要是Baidu我知道），也有一些帖子建议积攒RP以后再开机，BC一笑而过。但是搞了几个小时以后，还是找不到原因。
MM体检归来，BC只好装可怜，承认错误。谁知MM把SyncMaster重新接了一下，一开机——就好了。BC顿时无语……
原来RP还是很重要的！
后记：世上万物都有道理，其实BC改过双显示器的显示模式和分辨率，估计LCD比较智能，把这些设置记住了，所以接回去以后无法使用了。MM回来前，BC又改过设置，可能那个时候改回来了。
后记&amp;rsquo;s后记：后记纯属YY，没什么科学依据，建议还是不要随便改动设置比较好。</description>
    </item>
    
    <item>
      <title>Smart Search, War Film and Google Doctor</title>
      <link>http://blog.zhouyiyan.cn/blog/smart-search-war-film-and-google-doctor/</link>
      <pubDate>Fri, 22 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/smart-search-war-film-and-google-doctor/</guid>
      <description>搜索引擎可以变得更加人性化和个性化。搜索引起除了具有复杂的排名系统，当我们给出一个关键字的搜索结果时，收集用户点了哪些结果和没有点哪些结果也很有意思，甚至能够判断用户的需求，自动排除我们不希望的结果。这多少有些sns和推荐的味道，但有的时候这个功能真的很重要。比如说BC想找IBM的新闻，但是对于Thinkpad没什么兴趣，因此那些包含Thinkpad的条目一个也没有点，如果Google够聪明的话，应该在后续的搜索中也相应降低或者去处Thinkpad条目。
Flags of Our Fathers记录了历史，这部电影试图讨好美国和日本。遗憾的是，当这部电影成为一种强国荣耀的时候，那些弱小的国家不知有何感想。不过这一天一定会来，毕竟现在日美已经是联盟了。除了日本动漫、IT产品和美女外，BC一点也不喜欢日本。
有一些医院是不能去的，有一些手术是不能做的，最起码的是，自己要会Google成一个赤脚医生。千万要记住，宁可死掉，也不要做别人的实验品。</description>
    </item>
    
    <item>
      <title>下基层就业，XNA和工资</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%8B%E5%9F%BA%E5%B1%82%E5%B0%B1%E4%B8%9Axna%E5%92%8C%E5%B7%A5%E8%B5%84/</link>
      <pubDate>Fri, 22 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%8B%E5%9F%BA%E5%B1%82%E5%B0%B1%E4%B8%9Axna%E5%92%8C%E5%B7%A5%E8%B5%84/</guid>
      <description>大学毕业生就业找不到工作就可以去基层实习。 安徽省的这一“创新”动作也许是一种信号，那就是新时期下乡运动。我们这个年纪的人太多了，无论是求学、就业还是将来的职业发展，遇到的竞争都是最多的。不仅如此，我们对我们的兄弟姐妹的影响也非常大。没有需求，就没有工作，没有工作，就只好下乡了。说不定将来还会规定找不到工作就发配边疆之类的，这就不好说了。
微软推出了XNA，准备一统Windows/XBOX的游戏开发环境，使得中小游戏开发者能够着重于游戏性的创新，这里还有一些新手FAQ。坦白说，游戏是让BC唯一还继续留在Windows的唯一理由。曾经有一段时间已经完全脱离Windows了，在Linux上面开心的用着各种工具，上网、看片子、写程序、写文章……唯独游戏是永远的痛。没有游戏，生活实在是太无聊了，最后只得一次次的重返Windows的怀抱。如果微软能够牢牢地把游戏控制在自己的手里，那么Windows就安全了很多。毕竟习惯D版的国人，还是喜欢用Windows来玩游戏的。
看着MM很得意的说她的工资三年内就比BC高的样子，心里真不是滋味儿。可不是么，BC就是一个IT民工，跟金融、经济什么的快速发展的东东一点便也搭不上。不过回过头来想想，四大还有其他大公司到中国来，花了那么多工资把中国的高智商人才网罗起来，可做的事情一点也不高智商。看了《世界是平的》才知道，原来美国人造已经把重复劳动人给了我们，自己去做创造性工作了。这不是一个好信号！科技发展是国家的原动力，如果中国的高智商人才都没有为中国的科技发展作贡献，只是发展了市场、管理等非核心的东西，尽管可能大家的生活上去了，可是将来呢？也许很快就没有将来了，当我们的飞机大炮都要通过进口，当所有的核心技术都来自美国，平的世界将会回归圆形的。</description>
    </item>
    
    <item>
      <title>Partner, ZZ and Shares</title>
      <link>http://blog.zhouyiyan.cn/blog/partner-zz-and-shares/</link>
      <pubDate>Thu, 21 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/partner-zz-and-shares/</guid>
      <description>看了这篇文章才知道原来IBM的GBS曾经吸收了PWC的咨询部门，难怪IBM的审计使用PWC的服务，而不是KPMG的。为什么说KPMG？因为BC的MM在KPMG，比较遗憾两个人的公司不是合作伙伴。
BC不是很喜欢转贴，前两天的转贴也导致了访问量的下降，因此以后要坚决改掉这个坏毛病。不过还是要推荐大国崛起和相声陨落这篇文章，有些许意思的。
IBM不再向董事会发放股票期权了。这条新闻让BC感兴趣是因为很想要自己公司的股票，可是很多外资中国公司似乎不提供员工股认购。而且按照公司策略，加上股票价格，BC每个月顶多1股，30年退休以后也只有360股。这又让BC想起Google的股票，难怪Google员工工资高呢，也就这么几股，哈哈。另外，Google股票降了很多，因为500美元已经是人们的底限了。原本BC也想买的呢……</description>
    </item>
    
    <item>
      <title>Memorize our Ma-Ji</title>
      <link>http://blog.zhouyiyan.cn/blog/memorize-our-ma-ji/</link>
      <pubDate>Wed, 20 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/memorize-our-ma-ji/</guid>
      <description>马季走了， 又是一代相声大师的陨落，相声事业也走向了新的低谷，或者陷在泥潭了。BC是听相声长大的，认识BC的人都知道BC的许多特点都是继承于相声作品。
好人一路走好……</description>
    </item>
    
    <item>
      <title>Spyware</title>
      <link>http://blog.zhouyiyan.cn/blog/spyware/</link>
      <pubDate>Wed, 20 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/spyware/</guid>
      <description>又看到一篇有关国家安全的文章，一定要贴出来，不好意思又不知道作者，请作者一定与我联系。
BC只想说，真的不希望发生战争，不然你我的家园都将是一片废墟，特别是在世界导弹到期数量最大的时候。
转贴：Google 公司，正在露出獠牙的美国间谍公司
现在很流行用Google Earth 查看世界各地的面貌，我也如此。
我用Google Earth 看到了日本离中国较近的小小的那霸群岛居然有四个机场（弹丸 之地呀，震惊！当然，大部分战机都掩藏好了），看到了东京填海造的机场和n多的垮 海大桥和海底通道，法国巴黎的机场更是豪华壮观。
但是，我用Google Earth 查美国的地图时却发现大部分地区都是错位的卫星地 图。仔细比较过美国的地图和其他国家的地图之后我发现，即使是美国大城市的地 图，也大都打上了很多很多很多的马赛克（多到让你懒得看下去，很花眼睛）。 如果仅是如此，我仍不能断言Google Earth是美国的阴谋，因为保护自己国家的秘密 是任何一个公民和企业应具备的基本素质。
随后，我用google搜索了一下&amp;rdquo;酒泉&amp;rdquo;，却查到了被用文字标注出来的&amp;rdquo;酒泉&amp;rdquo;的卫星图 片和文字标注&amp;rdquo;酒泉神州号的发射台&amp;rdquo;的卫星图片。用百度也能搜出来类似的图片。这 时，我不得不考虑考虑美国人的居心了。
使用过Google Earth的人大概都有体验，在范围广大的地区搜索象卫星发射台这样小 面积的建筑并不容易，即使看到了，如果没有文字特殊标注、如果对周遍情况不熟 悉、如果没有相关知识，即使是军事专家也很难分辨出到底是什么建筑，更难以知道 该建筑的用途。大家都知道一个著名的案例：美国的军事专家曾经将福建省的传统民 居客家土楼误认为是核设施是核基地群，吓得美国军方乃至里根总统紧张了很久。
Google Earth的阴谋到底是什么？美国人的阴谋到底是什么？！
Google 公司的小算盘是这样打的： 第一步：通过公布&amp;rdquo;免费&amp;rdquo;的Google Earth&amp;rdquo;间谍软件&amp;rdquo;，公布出除美国之外的世界其他 国家的要害城市清晰的卫星图片，或者是从卫星图片上观察确定或怀疑是军事设施的 清晰的卫星图片； 第二步：诱导和鼓励大家使用Google Earth的&amp;rdquo;地标&amp;rdquo;功能，进一步细化，有好奇心的 人会利用对自己周遍建筑比较熟悉的特点，处于自我表现或其他目的，对熟悉的要害 城市、要害地区、新奇设备（如战斗机、舰艇的型号、飞机场的名字和所在地区、国 家单位的名称和建筑、部队番号等）进行文字标注、注释。 第三步：美国的Google Earth和政府就可以通过这些注释进行快速对比分析，从而得 到这个国家的大量经济地理信息和军事地理信息。
这样，美国仅付出公布部分卫星图片的微小代价，就可以换取很多间谍专家不能轻易 完成甚至根本不可能完成的收集军事地理信息的目的。
美国很聪明，认识到即使强大如美国，也不能徒步丈量世界各地每寸土地，更何况世 界的很多地方外国人并不能轻易入内。所以，就企图通过这种用诱欺的手段来骗取我 们大脑中的信息。
此外，我在使用Google Earth的过程中，还发现每次放大地图时，Google Earth都会 自动记录新放大的图片。 验证这种情况的方法很简单：打开Google Earth；搜索放大一个新的自己感兴趣而没 有搜索过的地区，特别是反复拍了很多张卫星图片的地区；然后断掉网络连接；然后 在关闭Google Earth。这时Google Earth会跳出对话框提示你是否保存。 当然，这样可以让使用者下次使用时更便利。但是，这同时也说明Google Earth在记 录使用者的使用习惯。 从事IT行业特别是网络行业的人都知道&amp;rdquo;点击率&amp;rdquo;和&amp;rdquo;关键词&amp;rdquo;这两个名词意味着更多的 财富，Google公司和美国政府更知道这两个词在Google Earth中意味着更多的秘密和 财富。 我有理由相信，正在飞速扩张服务器的Google公司和美国政府正在记载每一个使用者 的每一次点击，我们每一个存储图片的同时该图片也同时存在了Google公司和美国政 府的服务器上。 所以我在前面说了两条原则：不用任何别人看的懂的文字（或字母、符号）标注中国 的地图建筑，不论是军用的还是民用的；看了就看了，就不告诉你是什么。 只要我们不用常用文字标注地图，虽然Google公司和美国政府也可以记录我们点击的 热点地区，但是没有明确文字类注释，Google公司和美国政府想知道这些热点到底是 什么地方，到底是什么建筑，就必须通过实地验证才能得到准确的中国地理信息，他 们就必须付出更多的代价。 而让他们付出更多的代价总是我们所乐于看到的。</description>
    </item>
    
    <item>
      <title>Economic War</title>
      <link>http://blog.zhouyiyan.cn/blog/ecnomic-war/</link>
      <pubDate>Tue, 19 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ecnomic-war/</guid>
      <description>这里一定要转贴一篇文章，由于不知道作者，请作者一定告诉BC加注。
需要Highlight的几点： 人民币汇率表示人民币的价格，汇市如同股市，波动只会给外国人赚钱； 经济是维系国家稳定的根本因素，要相信政府，特别是关系国家存亡的一定要相信； 经济战争是全球战争，需要大量盟友；
BC需要提出的几点： 如果美国人撤资，总会有接手的人，此时国内适度的通过膨胀能够降低过强人民币的购买力，而中国的跨国企业比较少，受到的影响会小些； 和平发展是主旋律，但敌人永远是敌人； 虽然BC很崇洋媚外，但企图亡我祖国的敌人，BC永远都不原谅！ 转贴：有关人民币升值的有力说法
35年来中国及其它世界各国GDP排名
　1970年世界各国（地区）GDP总值排名（除苏联外，按当时汇率）
　01&amp;mdash;-美国&amp;mdash;&amp;mdash;&amp;ndash;1,0255亿美元
　02&amp;mdash;-日本&amp;mdash;&amp;mdash;&amp;mdash;-2068亿美元
　03&amp;mdash;-西德&amp;mdash;&amp;mdash;&amp;mdash;-2037亿美元
　04&amp;mdash;-法国&amp;mdash;&amp;mdash;&amp;mdash;-1470亿美元
　05&amp;mdash;-英国&amp;mdash;&amp;mdash;&amp;mdash;-1236亿美元
　06&amp;mdash;意大利&amp;mdash;&amp;mdash;&amp;mdash;1077亿美元
　07&amp;mdash;加拿大&amp;mdash;&amp;mdash;&amp;mdash;-851亿美元
　08&amp;ndash;澳大利亚&amp;mdash;&amp;mdash;&amp;mdash;429亿美元
　09&amp;mdash;墨西哥&amp;mdash;&amp;mdash;&amp;mdash;-396亿美元
　10&amp;mdash;西班牙&amp;mdash;&amp;mdash;&amp;mdash;390亿美元
　11&amp;mdash;-瑞典&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;357亿美元
　12&amp;mdash;-荷兰&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;351亿美元
　13&amp;mdash;-中国&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;272亿美元★★★★★
　1980年世界各国（地区）GDP总值排名（除苏联外，按当时汇率）
　01&amp;mdash;-美国&amp;mdash;&amp;mdash;&amp;mdash;2,7956亿美元
　02&amp;mdash;-日本&amp;mdash;&amp;mdash;&amp;mdash;1,0279亿美元
　03&amp;mdash;-西德&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;8261亿美元
　04&amp;mdash;-法国&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;6824亿美元
　05&amp;mdash;-英国&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;5367亿美元
　06&amp;mdash;意大利&amp;ndash; &amp;mdash;&amp;mdash;&amp;ndash;4546亿美元
　07&amp;mdash;-中国&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;3015亿美元★★★★★
　08&amp;mdash;加拿大&amp;mdash;&amp;mdash;&amp;mdash;-2689亿美元
　09&amp;mdash;西班牙&amp;mdash;&amp;mdash;&amp;mdash;-2218亿美元
　10&amp;mdash;阿根廷&amp;mdash;&amp;mdash;&amp;mdash;-2090亿美元
　1990年世界各国（地区）GDP总值排名（除苏联外，按当时汇率）
　01&amp;mdash;-美国&amp;mdash;&amp;mdash;&amp;mdash;5,8033亿美元
　02&amp;mdash;-日本&amp;mdash;&amp;mdash;&amp;mdash;3,0522亿美元
　03&amp;mdash;-德国&amp;mdash;&amp;mdash;&amp;mdash;1,5470亿美元</description>
    </item>
    
    <item>
      <title>Fax Machine</title>
      <link>http://blog.zhouyiyan.cn/blog/fax-machine/</link>
      <pubDate>Tue, 19 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/fax-machine/</guid>
      <description>今天用传真机大出洋相，连发了三次才成功。
No.1 经过：把材料放进传真机后，心想可能需要先拨号吧，就把话筒拿起来拨了号，还挺得意的。听到传真信号后犯了愁，找不到发送按钮，只好随便找了一个最大的绿色按钮，按下去正合适。看到材料“飞快地”进进出出，BC就“挂了电话”等。 感受：不就一个传真嘛，挺容易的。 结果：对方说没收到
No.2 经过：肯定是提前“挂电话”的问题导致没发送成功，于是BC这次乖乖的等材料“飞快地”发送完成后才挂下电话。 感受：这传真还真方便，这么大一张纸发送比复印还快哩。 结果：空白内容
No.3 经过：对方提示说传真必须有内容的一面对着复印机，天哪！只好再来一次。 感受：再不成功就Call Help Desk 结果：成功！
为了让和我一样比较“笨”的人能够不再犯同样的错，这里给出复印机的使用方法：
 放纸——要当心两张卡住，有内容的一面对着传真集 拿起电话拨号——等待传真信号 听到传真信号后按最大的那个按钮——千万别挂电话 听到挂机信号后挂机  The secretary is powerful because he or she knows how to use machines. :)</description>
    </item>
    
    <item>
      <title>小鸟，加勒比海盗2和股市</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%B0%8F%E9%B8%9F%E5%8A%A0%E5%8B%92%E6%AF%94%E6%B5%B7%E7%9B%972%E5%92%8C%E8%82%A1%E5%B8%82/</link>
      <pubDate>Mon, 18 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%B0%8F%E9%B8%9F%E5%8A%A0%E5%8B%92%E6%AF%94%E6%B5%B7%E7%9B%972%E5%92%8C%E8%82%A1%E5%B8%82/</guid>
      <description>中午在下岗吃完饭后必做的一件事，就是趁Allen付钱时看看老板养的两笼小鸟。老板养着两对鸟，平时中午就看见小鸟挂在厨房旁边房子的房檐下。两对小鸟都很可爱，时而叽叽喳喳，时而上蹦下跳，BC也不禁时常跟它们对话。说是对话，其实就是陪着它们叽叽喳喳。说来也奇怪，BC的话它们似乎听得懂，经常朝着BC看来看去，仿佛它们在笼子外面似的。不过上海已进入冰点，小鸟们虽然有羽毛，但还是冷得挤在一起取暖。心中一热，便取出手机拍起照来。不想手机的拍照声把小鸟吓倒了，原本蜷作一团的小鸟们伸出头看着手机。有一只头上的毛也树立起来，估计是毛了。BC拍完立刻走开，不想再打扰小鸟们了。
终于把加勒比海盗2看完了，虽然一开始没看懂，而且对于变回普通海盗的黑珍珠有些担心，但随着剧情的深入，充分感受了一番冒险的乐趣。具体的就不说了，怕影响别人看电影的感受，反正结局是很惊人的，要等3出来一起看就更好了。细细品味吧。
股市真的疯了，2300点了！BC很担心股市会崩盘，然后引起大萧条，这样刚找到的工作说不定就保不住了。不过回过来想，至少房价可能会跌了，因为房子可以用来套现。</description>
    </item>
    
    <item>
      <title>MSN Space is Faster</title>
      <link>http://blog.zhouyiyan.cn/blog/msn-space-is-faster/</link>
      <pubDate>Sat, 16 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/msn-space-is-faster/</guid>
      <description>刚才在Julia的Space上看到自己Space上的连接，很高兴但自己的Space已经不再更新了，怎么办呢？于是好奇一下上自己的Space看了一下，突然发觉速度快很多！是不是因为K-Meleon的关系？反正是速度奇快。要不是当初MSN Space速度太慢，也不会转向Blogger阵营的，毕竟看的人还多点。
BC要不要转回Space呢？What if I go back to MSN Space?</description>
    </item>
    
    <item>
      <title>Simple Classifer</title>
      <link>http://blog.zhouyiyan.cn/blog/simple-classifer/</link>
      <pubDate>Sat, 16 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/simple-classifer/</guid>
      <description>这两天在修改论文，导师说要多加一些深度和创新点，可以补充一些模糊推理、神经网络之类的东东。虽然本科学习过一些数据挖掘的算法，而且数据挖掘也是一种机器学习，但绝不是AI之类的范畴，因此说起模糊推理和神经网络，也会比较感冒。曾经想要好好学习一个Java下的分类器，但是工作和论文让BC无法分心，而且目前又在开发一个帮助Support更快上手的基于Excel的报表生成器。在经过来回踱步四五次后，想到一个最简单的基于01神经网络的分类器改进，丰满论文之余贡献与此。
前提：一个基于模型的分类器，输出为M(p)，p为离散参数。如果可以确定M(p)能够起到分类作用，但无法确定参数p，可以使用01神经网络进行二次分类学习。以下全部变量均属于[0,1]。
设新的分类器C输出[0,1]，结构如下： 0&amp;mdash;&amp;mdash;-&amp;gt;J0&amp;mdash;
M(P1)&amp;mdash;&amp;gt;J1&amp;mdash;-
M(P2)&amp;mdash;&amp;gt;J2&amp;mdash;&amp;ndash;
. .&amp;mdash;&amp;mdash;-X&amp;ndash;&amp;gt;C . .&amp;mdash;&amp;mdash;/ M(Pn-1)-&amp;gt;Jn-1&amp;ndash;/ 1&amp;mdash;&amp;mdash;-&amp;gt;Jn&amp;mdash;/ 其中Pi为p的可选参数，Ji为权值，且Sigma(Ji)=1.0，输出为C=Sigma(M(Pi)Ji)+J0+Jn。反馈方法为： {Ji=Ji(1+S), if M(Pi){Ji=Ji(1-S), if M(Pi)&amp;gt;C {Keep(Sigma(Ji)=1.0) 其中C*为训练结果输入，S为学习速度。
将01分类器C接到模型分类器M后，就能够确定M分类器的参数p了。虽然p参数可以通过改进模型获得，但是这样能够增加模型M的复杂度，同时给论文增加篇幅，呵呵^_^，不好意思咯。</description>
    </item>
    
    <item>
      <title>Firefox and Eclipse</title>
      <link>http://blog.zhouyiyan.cn/blog/firefox-and-eclipse/</link>
      <pubDate>Fri, 15 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/firefox-and-eclipse/</guid>
      <description>Eclipse是一个成熟的、精心设计的以及可扩展的体系结构，也是迄今为止最成功、最受开发者欢迎的的开发框架。通过插件扩展，Eclipse能够成为完成各种功能的桌面应用程序。作为同样成功的、以插件扩展功能成名的软件，Firefox也是浏览器领域的佼佼者。从Firefox诞生起，插件和扩展架构便成为FF最引人注目的技术，而XUL更是让FF雄霸了各个OS平台。如今，各种FF扩展让FF不仅是一个浏览器，也能完成许多桌面应用。
Eclipse和Firefox越来越通用了。但是谁更强一些？
毫无疑问，Eclipse的架构是其引以为豪的资本，Eclipse甚至能够实现RCP浏览器。但是SWT和Java的效率让人不敢恭维，号称解决垃圾回收的Java并没有解决内存消耗的问题，交互速度也随着插件的增多和快速下降。如果Eclipse的RCP崩溃了，只能看到Java抛出的异常，保存的机会都没有，难怪Eclipse要自动保存和编译。
丰富的Web应用让Firefox大展拳脚，直接在Firefox上面就能完成修改网页和察看的功能。但是XUL和脚本扩展是其软肋，跨平台的代价是效率，常常用着用着就没响应了。扩展如果装多了，速度也会受到很明显的影响。
两者的效率都很难恭维，因此K-Meleon的非XUL实现以及控制Eclipse插件效率的机制都很让人期待，毕竟对于应用来说，用户体验很重要。
FF的一些缺点对基础概念介绍的比较全，如XUL和FF4Win的调用方式 为Eclipse实现FF的简单扩展方式</description>
    </item>
    
    <item>
      <title>KFC is more expensive(肯德基涨价)</title>
      <link>http://blog.zhouyiyan.cn/blog/kfc-is-more-expensive%E8%82%AF%E5%BE%B7%E5%9F%BA%E6%B6%A8%E4%BB%B7/</link>
      <pubDate>Thu, 14 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/kfc-is-more-expensive%E8%82%AF%E5%BE%B7%E5%9F%BA%E6%B6%A8%E4%BB%B7/</guid>
      <description>看到Julia中午出去吃饭，没想到一会儿就提了一袋东西回来。一问原来是去了肯德基，而且知道肯德基涨价了。相比肯德基涨价的消息，麦当劳似乎反而在加大促销力度，不过仔细查了历史新闻才知道麦当劳很早就开始调整价格了，而且采用了高价店和低价店分开的新策略。仔细想想麦当劳这样的策略也是合理的，因为肯德基的供应链成本要低于麦当劳，无论是覆盖率和品牌效应都比麦当劳更胜一筹。尽管垃圾食品、苏丹红都给肯德基很大的影响，但是肯德基立刻做出了很多的调整，比如说本地化的食品和强化的供应链质量监督，都给我们带来了不少的实惠。相比之下，麦当劳的变化则少得多。因为原材料涨价以及人力成本提升的关系，此次的涨价也大多是无奈之举。这让BC又想起了GDP的一系列思考，也许会有更多的涨价，直到我们习以为常为止。</description>
    </item>
    
    <item>
      <title>又生病了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8F%88%E7%94%9F%E7%97%85%E4%BA%862/</link>
      <pubDate>Thu, 14 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8F%88%E7%94%9F%E7%97%85%E4%BA%862/</guid>
      <description>喉咙痛，发烧，虽然吃了两粒大力丸，都不见效果。
可能是太累了，但是论文还是很重要！</description>
    </item>
    
    <item>
      <title>Your IBM</title>
      <link>http://blog.zhouyiyan.cn/blog/your-ibm/</link>
      <pubDate>Wed, 13 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/your-ibm/</guid>
      <description>花了20分钟看了Your IBM的宣传片，看完之后无比兴奋，也深深地为自己即将成为IBMer而自豪。没有什么公司能够有这样的称呼，也没有什么员工会有这样的评论：一朝成为IBMer，毕生都是IBMer。Fortran语言、内存芯片、关系数据库、分形、五次诺贝尔奖，IBM为人类计算做出了无比的贡献。甚至阿波罗13号的顺利返回，都要归功于IBM工程师的手动修改全部数据。IBM并没有依赖垄断，无论是PC、操作系统、数据库还是程序设计语言，IBM一直遵循着开放的原则。通过不断创新、为客户的价值服务，这绝对是一家值得信赖的企业。
I want to think. I want to solve problems. I want to be an IBMer!</description>
    </item>
    
    <item>
      <title>抓虾</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%8A%93%E8%99%BE/</link>
      <pubDate>Wed, 13 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%8A%93%E8%99%BE/</guid>
      <description>终于从Google Reader转向抓虾了，因为才发现原来抓虾也能很方便的阅读RSS（以前怎么就没发现）。不过用下来还是有一些不习惯，毕竟已开始被Google Reade带坏了。 比较喜欢Google Reader那种不断往下拉就能很快扫描新闻的方式，抓虾也可以自动展开，但是会自动设置成已经阅读。 个人推荐的功能BC很喜欢，但是抓虾能否在统计收集我们的推荐数据时，为我们提供更加个性化的推荐服务呢？BC觉得这样会更容易找到想看的内容。 抓虾可以提供按照Tag排序的热文排行，那样可以让我们集中于某些内容的热文。 除了订阅数和推荐数外，抓虾对于频道又没有别的排名方式？或者可以给Blogger增加类似计数器的好看的小图标。 最后来句俗的，希望抓虾越办越好，呵呵。</description>
    </item>
    
    <item>
      <title>BC的博客变更历史</title>
      <link>http://blog.zhouyiyan.cn/blog/bc%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%98%E6%9B%B4%E5%8E%86%E5%8F%B2/</link>
      <pubDate>Tue, 12 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/bc%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%98%E6%9B%B4%E5%8E%86%E5%8F%B2/</guid>
      <description>一开始BC在博客中国建了个窝，想好好写文章；后来看到MSN Space很好玩，就搬过去并做了很多定制的东东，也坚持了挺长的时间，但是文章质量越来越差；后来尝试了网易博客和猫扑博客，总是感觉不对味道；看了公司里一个大牛的Blog，现在坚持在Blogger培养自己每天吸收和分解信息的能力，感觉还是这里不错，简简单单比较适合BC。</description>
    </item>
    
    <item>
      <title>KPMG半夜发Offer</title>
      <link>http://blog.zhouyiyan.cn/blog/kpmg%E5%8D%8A%E5%A4%9C%E5%8F%91offer/</link>
      <pubDate>Tue, 12 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/kpmg%E5%8D%8A%E5%A4%9C%E5%8F%91offer/</guid>
      <description>热烈庆祝PJ拿到了KPMG的Offer！
为了能顺利成为Golden Couple，必须努力写论文咯！</description>
    </item>
    
    <item>
      <title>又是GDP</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8F%88%E6%98%AFgdp/</link>
      <pubDate>Mon, 11 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8F%88%E6%98%AFgdp/</guid>
      <description>绿色GDP不被采纳。又是GDP，最近接近年底了，所以GDP也谈得比较多。谁用绿色GDP谁就不能晋升，为什么呢？因为GDP是政绩的考核指标。但是GDP只是收入，就好像公司考核只看销售额是不行的，成本和可持续增长能力很重要。05年CEO们普遍看重成本控制下的可持续增长能力，可我们的政府部门还是只看GDP，好像GDP越高就越好一样。刚才和朋友聊天，得出这样一个结论，中国的GDP=绿色GDP+资本自然增长率+通胀率。所以中国能够保持两位数增长是很自然的，毕竟国际资本市场目前也比较红火，加上我们通胀率又有增长趋势（可参考全国GDP和辽宁GDP和粮油价格）。其实服务的话还是要看客户满意度，那些一把手的满意度谁来评一下就好了。
原来的链接不知道怎么不能访问了，下面再给出两个链接。 http://news.sina.com.cn/c/2006-12-10/004110725652s.shtml http://wangpansh.blog.sohu.com/24551770.html</description>
    </item>
    
    <item>
      <title>纪念IBM张江一起拍照的伙伴</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%BA%AA%E5%BF%B5ibm%E5%BC%A0%E6%B1%9F%E4%B8%80%E8%B5%B7%E6%8B%8D%E7%85%A7%E7%9A%84%E4%BC%99%E4%BC%B4/</link>
      <pubDate>Mon, 11 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%BA%AA%E5%BF%B5ibm%E5%BC%A0%E6%B1%9F%E4%B8%80%E8%B5%B7%E6%8B%8D%E7%85%A7%E7%9A%84%E4%BC%99%E4%BC%B4/</guid>
      <description>今天David说要走了，昔日张江一起拍照的伙伴就剩下BC一个了。 </description>
    </item>
    
    <item>
      <title>GDP和电信业</title>
      <link>http://blog.zhouyiyan.cn/blog/gdp%E5%92%8C%E7%94%B5%E4%BF%A1%E4%B8%9A/</link>
      <pubDate>Sun, 10 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/gdp%E5%92%8C%E7%94%B5%E4%BF%A1%E4%B8%9A/</guid>
      <description>GDP增长又是两位数， 这只能说明今年的通货膨胀率又高了。曾经BC一直认为中国经济不可能永远保持两位数增长，而且近几年的数据也表明了这种趋势。个位数增长并不表明经济增长下降了，只是因为底数大了，而且单一的经济增长模式会有边际递减效应。但是BC错了，中国经济依旧很&amp;rdquo;热&amp;rdquo;。记得以前BC就对辽宁GDP有过疑问，现在中国整个局势就是如此，大家都互相比GDP，甚至不惜用通货膨胀来显示自己的政绩。你说不是通胀？BC现在出去买衣服，随便哪件都得好几百，工资每年增幅10%就不说了，资源企业纷纷涨价，房价就更不用说了，存款利率也在上调。也许是生活在上海的关系，原本生活水平就高，现在就更难过了。算算工作以后可以拿到的收入，BC觉得根本不够用呢，唉&amp;hellip;
微软、IBM都要进军电信业了。一个推广自己的整套软件平台，一个要推出自己全套的解决方案。双方似乎都把最多的好处留给了运营商和设备商，但不言而喻的是，对一些既有的想要有所突破的公司来说，它们都是危险的竞争对手。WTO五年过渡期结束，中国政府也即将在电信业、银行等领域实施新的策略，这无疑给那些外国企业更多进入中国关键部门的机会，赚钱机会是肯定的了。</description>
    </item>
    
    <item>
      <title>浏览器</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Sat, 09 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description>IE的替代品越来越少，微软正在真正意义上的统一整个Windows平台。而FF和IE都开始和Opera一样变得臃肿，没有什么轻量级的浏览器可以选择。BC只能寄希望于K-Meleon了。</description>
    </item>
    
    <item>
      <title>鑫诺，女足败了和证人</title>
      <link>http://blog.zhouyiyan.cn/blog/%E9%91%AB%E8%AF%BA%E5%A5%B3%E8%B6%B3%E8%B4%A5%E4%BA%86%E5%92%8C%E8%AF%81%E4%BA%BA/</link>
      <pubDate>Fri, 08 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E9%91%AB%E8%AF%BA%E5%A5%B3%E8%B6%B3%E8%B4%A5%E4%BA%86%E5%92%8C%E8%AF%81%E4%BA%BA/</guid>
      <description>鑫诺失败了，可是BC并不知道，因为这里一点消息也没有，再说失败的消息一定会被封锁的。风云二号成功了，报纸和新大肆宣传。究竟是知道明天下不下雨重要，还是让老百姓了解世界更加重要？答案是不言而喻的，风云能够成就奥运的面子，鑫诺只会增加监管局的麻烦（因为必须要设计新的过滤系统了）。况且国家发展总是更加重要，多看一个电视频道有的时候并不怎么样，而且老百姓要是通过看国外频道进行政府间的比较，那可就麻烦了。政府是最大的垄断机构，它可是最怕竞争的了，呵呵。
女足失败了，败得真好，以为自己不可一世，恰恰忘记了欺负弱小并不长能耐。其实从女足开始讲战略（避开韩国）就知道女足不行了，真正的强者无所谓谁是对手，第一需要靠不断的挑战和胜利来获得，没有经验怎么获得成功，怎么证明自己是强者？面对那些弱国，本来可以多尝试各种战术，各种人员组合。结果呢？为了净胜球，白白放弃90分钟的机会，笨！不过不要紧，反正等到大家都不关注女足了，那些企望在女足身上赚钱的人也远离女足了，女足会变回原来的铿锵玫瑰的，BC相信这一点。
证人为什么得不到保护？新闻里报道小偷团伙作案失败以后，围殴见义勇为的人，而受害者和其他目击者都不发一声，这是什么世道！第一个问题就是为什么证人不出来作证。因为怕被报复，证人不敢出庭作证，可为什么证人就必须出面呢？证人是否可以不出庭作证，比如说证词作证之类的，或者其他保护方式也可以，可惜我们的立法机关就从来没想过这事儿，或者他们有他们的理由。这也有了第二个问题，可不可以避免这些事情？比如说努力工作，不要住在治安差的地方，移民也可以，出门都长点心眼。除了避免危险外，遇到有人作案，想点更聪明的办法。反正BC不会为了便宜住在郊区了，便宜没好货，即使房价涨成一千万也要住在市中心。</description>
    </item>
    
    <item>
      <title>化妆品品牌和D版</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8C%96%E5%A6%86%E5%93%81%E5%93%81%E7%89%8C%E5%92%8Cd%E7%89%88/</link>
      <pubDate>Thu, 07 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8C%96%E5%A6%86%E5%93%81%E5%93%81%E7%89%8C%E5%92%8Cd%E7%89%88/</guid>
      <description>收到一封关于市面上护肤品的邮件（大家可以搜索&amp;rdquo;关于现在市面上的护肤品&amp;rdquo;）。所以那些快速消费品商们每年招聘那么多高端人才作为管理储备可不是盖的，以华制华的结果就是运用大量的商业广告让迷信品牌的国人们上当，误把次品当良品，误把良品当精品。改革开放至今，也不见我们的思维如何跟得上世界的步伐，大肆宣扬中国市场的人们是否意识到，我们正在成为被剥削的对象，被那些到中国淘金的人们忽悠。其实对老百姓来说最简单的还是一个办法，看看外国人用啥，看看医生献不献血，看看在联合利华上班的闺女用什么化妆品，看看保险推销商们是不是买保险，看看大老板们买不买基金，我们不如别人有本事，就先学着呗。
D版快要被自己淘汰了！D版和开源软件有类似之处，很大程度上因为破解者的兴趣，但是D版也是要成本的，破解者的荣誉、传播者的影响力、制造和售卖者的利润。可是现在大家都网上自己下载，制造者和售卖者的利润没了；网上盗链和搜索引擎，传播者的影响力没了；传播的时候不附上破解者的声明，破解者的荣誉没有了。什么都没有了，又要背负一定的风险，人家干嘛还这么积极？只要阻碍他们生存的条件不被推翻，D版最终会被消灭。不过也许又会有新一轮的发展，毕竟历史总是螺旋上升的。^_^</description>
    </item>
    
    <item>
      <title>全球化、赢球和挑战</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%85%A8%E7%90%83%E5%8C%96%E8%B5%A2%E7%90%83%E5%92%8C%E6%8C%91%E6%88%98/</link>
      <pubDate>Wed, 06 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%85%A8%E7%90%83%E5%8C%96%E8%B5%A2%E7%90%83%E5%92%8C%E6%8C%91%E6%88%98/</guid>
      <description>#####全球化开始明显了 全球化让世界变平了，首先就是分工变化，生产部分开始大量向低劳动力成本地区转移，而财富则向高资产地区转移，资本主义最重占领了整个世界。台湾地区已经不是成本优势地区，因此华硕资遣员工，而英国富人和贫富两极分化的消息，足以证明，资本世界越来越不平了！原本每个国家的综合实力由资源决定，但平坦的世界让资源更快的流向资本，最后资本发达地区得到了更多的财富，而那些希望依靠引进外资帮助自己成长的国家却并没有更多的优势。毕竟国外资本只不过帮助我们更快的消耗资源而已，无论是自然资源，还是人力资源，包括意识资源，我们已经容忍了高昂的低价、低廉的工资、紧张的时间、没有保障的生命，我们没有赢，资本赢了，赢得很光彩，我们还拍手叫好。
#####不光彩的赢球 女足赢了， 但赢得很不光彩，很不道德。为了净胜球，不惜破坏职业道德，女足已经不值得我们同情了。也许已经不是比赛第二，友谊第一的年代，但是即使在那个年代，中国的男篮依旧称霸世界，可现在呢？也许友谊也不重要了，因为中国发展了，中国需要更强力的伙伴了。或者中国人也从来没有把自己当成绅士或者淑女，所以道德不道德的都没什么意思。不过群众的眼睛是雪亮的，女足这样发展无疑也只会成为另一个男足，BC无话可说了。 #####DON&amp;rsquo;T HOLD BACK! 以前看过一条新闻HP&amp;rsquo;s allegedly &amp;ldquo;unseating&amp;rdquo; IBM，也被国内很多媒体大肆炒作了一番，深感耻辱。今天早上看到Bob Samson给我们发的信，总算有些舒坦了，而且准备在这里也说明一下。所谓的销售额说明不了问题，HP和IBM的竞争对象是一样的——企业客户，但手段不同。HP提出的PC、台式打印机和墨盒，根本不能同IBM的大型机、存储和Unix系统对“企业计算”的贡献相提并论，所以说“HP已经成为最大的IT供应商根本就是笑谈。但是HP或者其他一些人还是向IBM发起了挑战书……
没关系，IBMer喜欢挑战！
起来，不愿做第二的IBMer，卷起你的袖管，筑起我们新的长城！</description>
    </item>
    
    <item>
      <title>研究生薪酬、银河麒麟和封锁</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%96%AA%E9%85%AC%E9%93%B6%E6%B2%B3%E9%BA%92%E9%BA%9F%E5%92%8C%E5%B0%81%E9%94%81/</link>
      <pubDate>Tue, 05 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%96%AA%E9%85%AC%E9%93%B6%E6%B2%B3%E9%BA%92%E9%BA%9F%E5%92%8C%E5%B0%81%E9%94%81/</guid>
      <description>研究生薪酬一降再降，都跟本科生抢职位了。这也是很正常的，研究生毕业后做得又不是研究工作，所谓两年研究工作在企业来看并不能显示很强的竞争力。很多职位指名道姓要本科生，比如说带Trainee字样的，因为研究生太老了，可塑性不强，而且很有可能是工作以后的研究生，那对企业来说没什么潜力可挖了。人才也和股票一样，如果没有升值潜力，Title什么的就不重要了，反正我付一块钱，得到两块钱。本科生的升值空间很大，在很长一段时间内，企业少量的投入就能获得高产出，何乐而不为？所以说人才们啊，知道自己是才以后，就别读书浪费时间了，快点去学点有用的吧。
银河麒麟号称是国产的操作系统，BC抓了几个关键字：层次式内核结构、有效结合开源软件、基本内核层和基于FreeBSD改造的系统服务层、支持多种微处理器和多种计算机体系结构、与Linux目标代码兼容……这不就是一个Se-Linux嘛。还好麟麟是国家机密，也没人敢查。而且拥有自主知识产权是一句空话，只是比完全拷贝好一点。拥有多少自主知识产权，在核心技术上拥有多少自主知识产权，才是比较重要的问题。另外，使用了开源软件，按照协议必须也对自身开源，不过估计银河麒麟是不会开源的，因为那是“自主知识产权”嘛，而且国人向来喜欢D版的。所以BC不看好麟麟。
看到消息说，Google和MSN的搜索引擎搜对方关键字时加入了过滤机制。想想也实在不能责怪中国的“长城”计划了，为了自己的目的，任何网络、任何搜索引擎都能做出控制人们信息获取渠道的事情来。可惜BC的英文还是不好，不然直接从外国网站上看消息应该会快的多。讲来讲去，阅读速度是制约啊！</description>
    </item>
    
    <item>
      <title>实习生、论文和DOA</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%AE%9E%E4%B9%A0%E7%94%9F%E8%AE%BA%E6%96%87%E5%92%8Cdoa/</link>
      <pubDate>Mon, 04 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%AE%9E%E4%B9%A0%E7%94%9F%E8%AE%BA%E6%96%87%E5%92%8Cdoa/</guid>
      <description>IBM是很会“培养”人才的，记得以前“猎头谈高薪”那篇Blog里面已经说过，IBM培养的人才最适合IBM，却不是很被猎头看中。所以在IBMer们跳槽的平均年数在5~7年间。签下这么多实习生，无疑又为未来5~7年的人才仓库留下了充足的储备。
论文时间表~~~（怎么一个慌字了得）
 2006年12月1日前 学生完成论文初稿 12月2日&amp;mdash;12月24日 导师与学生共同完成论文修改 12月25日 学生将修改稿交学院自评组长 12月25日&amp;mdash;2007年1月7日 院内自评 2007年1月8日 自评评语反馈原导师及学生，并将该评语交学院（盛青处） 1月8日&amp;mdash;1月20号 督促学生进一步完成论文修改 1月20&amp;mdash;21日 学生将定稿论文交付力学所印刷 1月22日 学生交二本盲审论文给研究生部 3月19日&amp;mdash;23日 各组进行论文答辩 3月27日之前 学生归档结束 3月27日 整理材料并做授予学位表决票（盛青） 3月28日&amp;mdash;30日 召开院学位委员会议 4月上旬 召开校学位委员会议  DOA看完了，这部游戏改编的动作片真的不错，而且美女作为卖点，但是那个东方女忍者太娃娃脸了，娃娃的有点受不了。而且结局的大佛崩塌，颇有点别的意思，不过看在美女的份上也就算了。好了，大家晚安！</description>
    </item>
    
    <item>
      <title>战争、全球化和创意</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%88%98%E4%BA%89%E5%85%A8%E7%90%83%E5%8C%96%E5%92%8C%E5%88%9B%E6%84%8F/</link>
      <pubDate>Sun, 03 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%88%98%E4%BA%89%E5%85%A8%E7%90%83%E5%8C%96%E5%92%8C%E5%88%9B%E6%84%8F/</guid>
      <description>因为论文的原因，BC只在睡觉前翻了两页《世界是平的》，正好看到戴尔理论——供应链上的两个国家不会发生战争。这个结论让人不可置信但却很诱人，如果世界上每个国家都成为统一供应链的成员，那么世界就真的和平了吗？似乎这个结论并没有达到24K的程度。正在弗里德曼所说的全球化3.0之际，伊拉克不照样爆发战争了嘛，而且伊拉克还是石油出口果呢，没可能它不在供应链上吧。因此并不是单单在供应链上就可以，而是要在供应链上占据重要的地位。不过即使某个国家垄断了某种资源，就一定不会爆发战争了吗？说不定人家就冲着你垄断才去打你呢，就好比鸦片战争。除此之外，如果别的国家想要调整供应关系，也有可能发生战争的。所以和平并不像戴尔所说的那么简单，只要大家作生意就行了。真的这么认为的人，也太把国际关系不当回事了。
记得弗里德曼在报告里面提到，很多人要抢美国人的工作，这是全球化的一种挑战。不过美国人的就业率真的会有影响吗？平面化就好比海平面提升，即使已经升到了一定的高度，也只是初级工作变成了平面。比如说生产部门移向中国，呼叫中心会移向印度……也许最终美国人连研发中心都回移走，只要他们掌握了知识产权，掌握了资本。也许真的有一天，大多数美国人不只拥有自己的国家，还拥有其他国家公司的资产，成为了世界资本家。反正BC相信海平面不会永远上升，平面化会达到动态平衡的那一点。 本来想说移民会被平面化抑制，但现在看来，移民说不定是最好的选择呢。
今天去福寿园选址的时候，竟然幻想起来，如果网上有个墓园，那么我们每天都能去扫墓，也不用非常麻烦还被人赚钱。刚觉得这是个创意的时候，发觉网上已经有了（真的是只有想不到，没有做不到）。天堂在线就是BC搜到的一个网上公墓。有个性化配置、有搜索，甚至还有BBS、SNS和社区，真实全啊！最重要的还是免费了，也许BC将来会考虑给自己留一块地，又省钱又环保，又省了家人的麻烦。</description>
    </item>
    
    <item>
      <title>GDP，收购和好男儿</title>
      <link>http://blog.zhouyiyan.cn/blog/gdp%E6%94%B6%E8%B4%AD%E5%92%8C%E5%A5%BD%E7%94%B7%E5%84%BF/</link>
      <pubDate>Sat, 02 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/gdp%E6%94%B6%E8%B4%AD%E5%92%8C%E5%A5%BD%E7%94%B7%E5%84%BF/</guid>
      <description>GDP增长这么快，辽宁都13%，有多少泡沫被老百姓吸收了？GDP快速增长很大部分靠外商投资，所以说中国政府还是很聪明的，市场一步步开放，这样外资引入的速度也会得到控制，而且每年的GDP数字也会比较好看。但是投资必然是要求回报的，高投入的情况下，必然将来会有大量的回报被外资吃掉，如果税收还实行减免政策，那真的是得不偿失。更何况外国公司到中国来，并不急于培养技术力量（IBM肯定是个例外，IBM是第一个在中国建立研发中心的，同教育部、各高校都有很深的往来），而是希望通过销售、市场来赚我们的钱。最后谁会尝到发展的好处呢？希望是我们的孩子们。
同样是收购，IBM将各种品牌很好的整合入自己的IT Solution大框架内，当然有些产品依然不是很对IBM的味道，但发展还是很明显的，比如Rational的客户端已经并入了Eclipse框架，Tivoli正消化着各种新买入的产品。但是Google在买入各种产品后，却并没有将自身的创新理念整合入这些产品，不知道他们内部的合作模式如何。看了“Blogger团队成员离开”，感到Google也并不真的很神奇。正如在新闻中看到的，Google股价崩盘的时候，世界会怎么样？
新民晚报上报道好男儿在舞林大会上的风头盖过了大牌明星，可是那些明星却都不知道好男儿的存在。无论是超女还是好男儿，经纪人公司打得都是中国牌，着重发展这看似巨大的国内市场。记得也只有伦敦市长那条新闻算得上是国际事件了，所以经纪人公司一般都不会把好男超女们往国外送。毕竟，国内市场就能大赚一票了，何必花大钱走国际路线呢？不是科班出身的他们，有没有潜质还不知道，并不值得过多的投资。红过了也就红过了。</description>
    </item>
    
    <item>
      <title>帮助，猎头和记账</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%B8%AE%E5%8A%A9%E7%8C%8E%E5%A4%B4%E5%92%8C%E8%AE%B0%E8%B4%A6/</link>
      <pubDate>Thu, 30 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%B8%AE%E5%8A%A9%E7%8C%8E%E5%A4%B4%E5%92%8C%E8%AE%B0%E8%B4%A6/</guid>
      <description>自从成为Lancexia邮件圈成员后，经常会有各种“垃圾邮件”帮助BC打发无聊的时光。尽管BC已经渐渐养成看RSS的习惯，不过到Gmail上看“垃圾邮件”仍然是BC每天的必修课。Lancexia是一个很有头脑的人，在运作人际关系网上面有一套。最近收到这样一封标题为“帮助过你的人永远会帮助你”的邮件，大致是说有些朋友虽然从不需要我们的帮助，但是在关键时刻能够帮助我们的，反而使这些看似圈外的朋友。其实这也比较好理解，毕竟成为朋友的理由不同，有些朋友愿意付出时间，有些朋友愿意分享经验，有些朋友给予爱心，有些朋友会在危难时候伸出援手。但这不能成为衡量朋友是否“铁杆”的程度，毕竟是我们选择他们做朋友，是因为我们乐意这样做。所以BC不同意那个邮件作者的观点，也就是只有能借到钱的朋友才是真朋友。宽容一些，我们的朋友会更多，而我们精神上的获得更多。
猎头接触的都是社会的精英，或者说可以为他们带来效益的商品，因此从猎头的角度来看职业规划是不正确的，因为他们设定的道路只能成为一件很有价值的商品。人是商品吗？人为什么一定要成为商品？！被人需要的确很好，也能因此爬到社会的顶端，成为高薪一族，但真正依赖我们，体现我们不可替代性的，只有家庭。当然每个人价值观不同，因此在一起讨论什么年薪、职业生涯和发展都是无意义的。喜欢钱的人总向往高薪，喜欢名气的人总向往地位，BC则喜欢精神财富，喜欢效率，喜欢和家庭、朋友在一起，那对BC来说就是最幸福的了。
ynnny.com出了网上记账！虽然界面似乎没什么特色，而且功能也单一，安全性方面也有些隐患，但至少有了网上产品，也算是进步了。记账工具有很多，Excel的有微软MM版、AntonyLiaw版，软件的话就属家财通和财智理财比较出名了，其他的工具BC没有留下什么印象。其实记账关键是习惯，工具什么的并没有很大关系，BC坚持记了一年账，发掘对于掌握自己的财政状况非常有帮助，但很多功能都还没有用到。而且BC到现在用的都是免费版，也许工作以后会考虑买一个用用。</description>
    </item>
    
    <item>
      <title>真相永远只有一个</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%9C%9F%E7%9B%B8%E6%B0%B8%E8%BF%9C%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA/</link>
      <pubDate>Wed, 29 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%9C%9F%E7%9B%B8%E6%B0%B8%E8%BF%9C%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA/</guid>
      <description>真相永远只有一个 ，即使仍然模糊，但也不必再探究下去了。
她生活在极大的经济压力下，一方面担心财产损失，而把财产交给父母保管；一方面又受到父母的剥削，即使血肉也不放过；而另一方面，想给她爱的孩子一个承诺，帮助他建立自己的世界，这无疑又是一个沉重的负担。她不是一个善于理财的人，不是一个善于识人的人，更不是一个幸运的人。家庭，婚姻，错误，孩子，父母，工作，她是个历经艰苦生活的人，她甚至不是一个称得上幸福的人。少有人知道她的艰辛，少有人知道她的疑惑，少有人知道她的困苦，少有人知道她的寂寞。即使到现在，她仍然是个谜。这不是她的错，因为没有去关心她，没有去爱护她，没有去分担她的艰辛。她认义子义女，因为她寂寞，因为她深爱的孩子从不懂得去珍惜宝贵的时间，去爱她，去说出自己心里的感受。
眼睛湿润了。
人一旦离开了这个世界，秃鹫们便开始光顾。被保管的东西没有了，留下的东西没有了，爱也没有了，对孩子的承诺也没有了。但是孩子并不责怪她，只是觉得她一定有道理这么做，只不过她猜到了前头，没有猜到结局。
Death is a contract that we made when we were born.
I wish she is still alive, somewhere in this world. But I will move on because I already have another promise to keep, to give happiness to my love. May the love of the god show upon our spirits.</description>
    </item>
    
    <item>
      <title>Linux游戏，能人和开源</title>
      <link>http://blog.zhouyiyan.cn/blog/linux%E6%B8%B8%E6%88%8F%E8%83%BD%E4%BA%BA%E5%92%8C%E5%BC%80%E6%BA%90/</link>
      <pubDate>Tue, 28 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/linux%E6%B8%B8%E6%88%8F%E8%83%BD%E4%BA%BA%E5%92%8C%E5%BC%80%E6%BA%90/</guid>
      <description>Bioware想为Dragon Age开发Linux版本。经典的游戏的确能够让人们玩一辈子，甚至让人执著于某个平台之上，可是CS、无冬之夜都无法打动Linux用户的话，又有什么样的游戏可以呢。曾经疯狂的喜欢Linux，甚至尝试过所有著名的Linux游戏，但是真正好玩的游戏少之又少。无奈之下，最终只得回归Windows的怀抱，毕竟BC不能不玩游戏。Linux也许永远成为不了普通用户的操作系统，因为普通用户要求的是娱乐，而不是完全的掌握。
真正的能人在关键时刻最靠的住，他享受着作为导演的乐趣，不断去尝试、不断去冒险，连续的技巧造就了最终的成功。舌战群儒，团队支持，谈判技巧，各个击破……综合运用战术、个人魅力和商业技巧，他的成功俨然就能成为哈佛案例。我开始佩服这个人并感叹自己也流着相同的血液。
随着MS宣称Linux属于自己，到Novell离开Hula项目，标志着Novell-MS联盟更趋向于MS的设定方向。尽管Oracle、IBM依然对开源社区贡献有佳，但是开源这个词的确该冷一冷了。毕竟开源不是一个成功的商业模式，也许开源能够促进技术进步，但也意味着竞争更加激烈，而这又不是追求利润最大化的企业所希望看到的。最终开源成为开放标准，成为增加公众形象的面子工程。</description>
    </item>
    
    <item>
      <title>找工作，论文和敏捷开发</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%89%BE%E5%B7%A5%E4%BD%9C%E8%AE%BA%E6%96%87%E5%92%8C%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</link>
      <pubDate>Tue, 28 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%89%BE%E5%B7%A5%E4%BD%9C%E8%AE%BA%E6%96%87%E5%92%8C%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</guid>
      <description>明天就要签Offer了，今天BC想把把这两个月的辛苦历程记录一下。在没有拿到Offer前，BC曾经也尝试海投，什么咨询、管理培训生、银行和IT基本上都投了出去。可是结果却很不理想：
 Opera Solution：电话面试像突击检查一样，然后杳无音信； 华为： 第一轮技术面试因为没有充分准备，简单算法没有写出来就被淘汰了； MS ATC：四轮面试后被淘汰，算法都能给出，但是细节部分没有注意； Intel：同学帮我推荐后杳无音讯，对方经理对我简历过分谦虚而表示不满； IBM CDL：从Intern到Offer都很顺利。  所以作为一名普通大学硕士研究生，BC的经验是：
 不赞成海投，筛简历按学校、专业或者关键字的基本是没希望的； 专业很看重，做一名技术工人比转行找工作容易得多； 英语很重要，语言沟通有问题的，再厉害也没用； 不要太谦虚，简历要写得好一些，具体的能力由对方判断，不要输在筛选上； 准备要充分，基础要很扎实才行，而且去的时候不要太紧张，会影响发挥； 最好有实习，内部流程总会比外部流程要好一些，至少认识一些人。  今天Remy向我抱怨说他担心论文发在增刊上不能毕业，后来查了一下应该是正刊。这也算是上海大学的一种特色，研究生要毕业，论文必须发在核心期刊而且是正刊上。相比同济、浙大来说，这种规定真是要人命。总共两年半的研究升学习，一年是基础学习，半年至少留给大论文，而仅剩的一年时间要平均分给小论文、老师的项目和实习，实在是不够用。Remy已经很幸运了，导师帮助他发会议，结果中了个中国图象图形学报。可惜BC没这么好运气，老师也鼓励发会议，但是发什么会议、怎么发和什么时候发，这些问题就再也没跟BC提起。幸好最后BC发了计算机应用，也算满意。想想BC的MM到现在还没有发掉，虽然已经帮她改过投掉了，但总是没有100%的把握。没有小论文意味着没有学位证明，真该死的规定！
网上看到一篇文章提起敏捷开发宣言：
个体和交互 胜过 过程和工具 可以工作的软件 胜过 面面具到的文档 客户合作 胜过 合同谈判 响应变化 胜过 遵循计划  BC作为一个Technical Support，是一个绝对的Process和Tools的支持者，所以对于个体和交互不是很理解，至少在大型团队中，建立在Personal Bond基础上的认同总是不能信任的。Working Software和Complete Document不矛盾吧，Working Software和Perfect Software才矛盾呢，总之这是Tradeoff的问题，而且很多不是我们Engineer能够解决的。Customer Partner这个我同意，也是IBM一直宣扬的境界。变化是一种Risk和Choice，好的PM应该能够制定出解决变化的计划，这才是好的计划嘛。BC很想尝试PM，不过要学习的东西还有很多，慢慢来吧。</description>
    </item>
    
    <item>
      <title>推荐系统，Sametime和长尾效应</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9Fsametime%E5%92%8C%E9%95%BF%E5%B0%BE%E6%95%88%E5%BA%94/</link>
      <pubDate>Sun, 26 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9Fsametime%E5%92%8C%E9%95%BF%E5%B0%BE%E6%95%88%E5%BA%94/</guid>
      <description>看到一篇关于推荐系统的文章，认为用户推荐将比单纯机器搜索得到更人性化的信息，也将取代现有的大多数社会化网络。BC表示非常赞同，正如同Web2.0标志着数据输入从网站管理员转向用户，搜索引擎也会受到连带作用，那些原本有各种爬虫、各种模式、各种规则组成搜索来源，也至少会整合入用户的选择。让用户对信息有更进一步的控制权，让每个用户感受到新的交互模式，这也印证了地球越来越平的推断。
企业级即时通信要什么？Usability，Security和Capability。用户使用起来要尽量简单，因为白领们可不都是IT精英；安全要得到保障，谁是谁，谁可以是谁，都要分分清楚；视频会议、语音聊天、短信服务一个都不能少。可是这样的工具还必须价格低廉，不然用惯MSN和QQ的员工，可不会买你的帐。IBM的Sametime真的很不错，但是连带的庞大的IT Infrastructure，以及Sametime那个Eclipse框架都让一般企业用户望而却步，搞捆绑销售的话又要担心重蹈MS的Windows+IE的覆辙。不过话反过来说，MSN和QQ真的不能令人放心，重要的资料还是不要透过它们传递吧。
长尾效应又是现在讨论的一个话题。次级市场的开发，关注中小企业，也有市场前景，这不禁让BC想到IBM随需应变的商业策略。也许大企业做商业模式变革的确能从IBM那里学到很多，但是中小公司呢，他们能一味模仿大企业的模式吗？似乎是不行的，因此针对中小企业IT服务的公司也将有很大的商机，尤其在中国，许多市场里中小企业占优，真正竞争力大的企业很少，而推动市场活力的又是那些广大的中小企业。中小企业或者被兼并，或者成长为大企业，或者消失在历史的长河，也比那些缺乏动力成长的企业对市场的贡献多得多。</description>
    </item>
    
    <item>
      <title>神童，概率直觉和自动标签</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%A5%9E%E7%AB%A5%E6%A6%82%E7%8E%87%E7%9B%B4%E8%A7%89%E5%92%8C%E8%87%AA%E5%8A%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sun, 26 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%A5%9E%E7%AB%A5%E6%A6%82%E7%8E%87%E7%9B%B4%E8%A7%89%E5%92%8C%E8%87%AA%E5%8A%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>早上听新闻，说上海曾经有个神童，13岁进中科大读书，毕业后专业不对口，后来历经沧桑，终无所成。天资没有好好利用，拔苗助长反而浪费了高智商。其实资质好真的不必过快发展，跳级和少年班的只能避免让你和那些普通学生竞争，而不给大多数人心理上产生阴影，你得到的却是更严峻的挑战，无论是心理还是生理的。所以作为高智商人群（或者资质较好的人群），完全可以走普通人的道路，你损失的只是那充满风险和压力的成功之路，换来的却可能是无尽的幸福感、优越感和轻松感。要成功(Succeed）还是顺利呢(Successfully）？BC肯定会选择后者。最后推荐一个高智商社团，如果对自己的IQ还有些自信的话，去看看自己的资质吧。
免费赠阅的私家地理上有篇文章探讨概率和直觉，其中提到人对事物的直觉和实际的概率是不同的，还例举了一个故事，说国王为了增加妇女人口规定家庭生完一个男孩儿后不得继续生育，希望将来女孩的数量将多余男孩。作者认为每次生育男女概率相同，所以这样的策略不能成功。但换个角度思考，如果每个家庭只有一个孩子，那国王的策略的确没有影响生男生女的概率，但是如果每个家庭可以有多个孩子，那即使单胎男女概率相同，多个孩子依然会影响概率。所以验证了作者的思路（尽管他没有举正确的例子），概率的确不是人们的简单知觉。
每次写完Blog都会头痛的一件事情就是写Tag。Tag是个好东西，方便我们整理、归档和检索以前的文章。但是为什么没有自动Tag生成呢？事实上也是有的，但是Tag是一个极以来数据库特征的东西，也就是一种依赖数据的数据处理系统。Tag Generator其实很容易实现，使用Labeled Suffix Tree对所有Blog进行分析，然后提炼出每个关键字及其频率。Google的广告应该也是类似的方法，不过为什么Google自己的Blog没有实现自动Tag呢？也许这是迟早的事情吧。</description>
    </item>
    
    <item>
      <title>水泡，不实排名和WPF</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%B0%B4%E6%B3%A1%E4%B8%8D%E5%AE%9E%E6%8E%92%E5%90%8D%E5%92%8Cwpf/</link>
      <pubDate>Sat, 25 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%B0%B4%E6%B3%A1%E4%B8%8D%E5%AE%9E%E6%8E%92%E5%90%8D%E5%92%8Cwpf/</guid>
      <description>可能是压力过大，可能是晚上睡觉时拳头紧握，可能是汗腺出了问题，BC的手掌上长满了小水泡。
看到一篇题为“中国10大最差跨国公司”的排名分析文章，很遗憾的是IBM竟然名列第一名。这篇不实的报道让BC很气愤，所以必须抓出来说两句。首先给IBM定的“罪”——服务问题，根本不能跟那些失去社会信任的事件相比。社会责任分数低也就算了，姑且当作鞭策，但诚信分数低就奇怪了，印象中IBM并没有做出什么很失去社会信任的事件，而且文章也没有给出任何的依据。其次，众所周知IBM是做大客户生意的，消费者调查本身就有问题，作者真的会去调查那些大客户的CTO们吗？不过看完之后也觉得还是有一点可能，那就是大家可能对Thinkpad的服务不满，这也没办法，服务是包给蓝快的，现在又卖给联想了，而且大家有习惯买水货，这服务问题么……呵呵。
记得程序员考试的时候学习过互联网七层模型，又叫ISO/OSI模型。当时只记得老师着重讲了网络、传输层和应用层，而会话和表示没有怎么说，也忘了问老师为什么这两层的协议没有仔细介绍，糊里糊涂的背着概念。后来想想，表示不就是用户界面嘛，有什么好规定的。再后来学习了MVC模式，认识到表示模型的重要性。但对于BC来说，presentation is no more than what users see and os understand, and always a hook where we put codes。WPF是微软推的下一代用户体验解决方案，让BC彻底改变了对表示层的认识，又要好好补课了。</description>
    </item>
    
    <item>
      <title>不能承受之痛</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%8D%E8%83%BD%E6%89%BF%E5%8F%97%E4%B9%8B%E7%97%9B/</link>
      <pubDate>Fri, 24 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%8D%E8%83%BD%E6%89%BF%E5%8F%97%E4%B9%8B%E7%97%9B/</guid>
      <description>Sometimes I just feel like a zombie, a walking dead, a talking machine.
今天没有三部曲，今天只有悲伤！
每一出悲剧总会有各种巧合和安排。商场失利，孤独的男主人公乘坐在最后一班地铁上，晚饭当然没有吃了。然后家里传来噩耗，男主人公掩饰不住的泪水当着地铁里所有人的面喷涌而出。走出地铁，磅礴大雨，雨水和泪水打湿了脸，白天的疲惫立刻显现出来。腰酸背痛手抽筋，步伐也小到最没有效率的程度。任何人的电话都不想接，任何人的话都不想听，世间最寂寞的事情莫过于自我封闭。拖着沉重的身体，眼神却空洞如死灰，俨然一副行尸走肉。女主人公的出现使得原本已经呆滞的男主人公立刻又放声大哭，两人互相依偎着以维持着挪大世界唯一一丝温暖的空间……
神情恍惚，头痛，目眩，手上也起了鸡皮疙瘩，不仅如此还说错了话（Mira真对不起啊）。</description>
    </item>
    
    <item>
      <title>OT，司法考试和面试</title>
      <link>http://blog.zhouyiyan.cn/blog/ot%E5%8F%B8%E6%B3%95%E8%80%83%E8%AF%95%E5%92%8C%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Thu, 23 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ot%E5%8F%B8%E6%B3%95%E8%80%83%E8%AF%95%E5%92%8C%E9%9D%A2%E8%AF%95/</guid>
      <description>IBM加班费之争有了结果， 但案子的细节并不清楚，估计也不能作为参考。不过OT一直是一种IT企业的潜规则或者说潜文化，在高增长的社会中担负更高增长压力的IT企业，除了技术创新、Business创新之外，员工为企业的付出也很重要。更何况IT人才的工资水平本来就很高，而且经济学原理告诉我们让人感兴趣的职业工资水平应该更低，那么这多出来的部分自然已经是对我们OT的一种补偿了。只不过有的人做得多，有的人做得少，有的人做得快，有的人做得慢，都是每个个人自己的选择。BC还是比较相信这样一句话，一个Professioanl的人能够Handle自己的问题，而OT可能已经是在计划之内的。
司法考试成绩出来了，MM终于以8分过了分数线（估计是她同学中最高的了）！前一阵还要死要活的，说考不过就没Career之类的，但现在呢，“考过也没什么，只是一块敲门砖”。所以说有时不要把一些事情当回事，看似很重要，实际上真的没什么。像这种入门级的考试本来就是刷不懂得人的，有基本素质而且花时间复习的人都是轻松过的，那些本来就不是和法律行业，有不好好复习，不过也是正常的。
MS ATC面试终于结束了，至少看到了自身的差距，首先测试基本功不过硬，然后解题速度依旧是大问题，再者就是客户需求获取能力不足，最后给的结论是BC最适合做Support，不适合ATC的SDE。这也难怪，已经有两年时间没有大规模的写程序了，只有断断续续的小工具，而BC的Intern又是做Support的，思路、方法什么的也慢慢变成Support了。只能说BC已经尽力了！回来的路上和另外一个很能侃的人聊，原来ATC的起始工资很高，所以对员工的素质要求也会很高，这样的地方如果真的不是牛人还是不去也罢，整天受刺激。不过最大的时候是回家的时候BC一直使用English思考问题，I just like this feeling!
Goodbye, MS! I&amp;rsquo;ll start my career in IBM now. Keep fighting and good things will happen!</description>
    </item>
    
    <item>
      <title>马斌，人才和Google股价</title>
      <link>http://blog.zhouyiyan.cn/blog/%E9%A9%AC%E6%96%8C%E4%BA%BA%E6%89%8D%E5%92%8Cgoogle%E8%82%A1%E4%BB%B7/</link>
      <pubDate>Wed, 22 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E9%A9%AC%E6%96%8C%E4%BA%BA%E6%89%8D%E5%92%8Cgoogle%E8%82%A1%E4%BB%B7/</guid>
      <description>前两天的马斌读报变成了刘磊读报，效果当然不好了，让BC突然失去了听读报的冲动，所以这两天上班也会来的比较早。所以说一个产品做的再好，客户体验最重要。而客户体验又是很难模型化的，这又对UE们有了更高的要求。马斌回来了，读报的收视率一定又恢复了，而BC也开始准时上班了。
一个人的Knowledge和Skill是最容易看到的，但是一个人的Values价值观、Self-image自我定位、Traits个性特点和Motives原动力不容易被发现，而这些不被发现的部分恰恰是人与人之间的真正区别。回顾一下自己，BC的Foundation Competency在哪里？只有通过面试才能验RP了。
Google股价终于如预期超越了500美元以总市值1536亿美元赢得了人们赞许的目光，可是这毕竟只是反映了人们对Google前景的预测，其中的泡沫呢？记得以前哪里看到说，一支股票如果长时间超过它的本来价值，会将未来的发展和信心都透支掉。也就是说，繁荣越久，下一个阶段的萧条可能也越厉害。不过这些规律毕竟不是很适合新型技术企业，谁知道Google是不是会创造奇迹呢？毕竟它已经创造很多了。</description>
    </item>
    
    <item>
      <title>母校，Initiative和Values</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%AF%8D%E6%A0%A1initiative%E5%92%8Cvalues/</link>
      <pubDate>Tue, 21 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%AF%8D%E6%A0%A1initiative%E5%92%8Cvalues/</guid>
      <description>我的母校是上海市第二中学和上海大学。偶然在搜索同学名字的时候搜索到了中学母校的网页，虽然简单，但在校友风采中看到昔日的同学有去JP Morgen的，有在市政府的，有在剑桥的，还有考古学家，除此之外还有无数出国的……难怪以前听说市二是有钱人去的学校，徐汇区的教育质量水平高也可见一斑。变化真是大呀，虽然自己曾经在另一条轨道上徘徊了好久，但想想自己现在在IBM，同学聚会的时候也不会太惭愧。而几个以前比较铁的同学也都在比较知名的IT企业，心里也平衡了不少。可惜大学的校友录没有记录这类信息，对BC来说是始终是一种遗憾。
第一次感到心有余而力不足，因为Process加上Team Voice必须统一，很多Initiative的事情总会被限制住。在Big Company做事是不容易的，不断学习的同时，你还得学习不断跟许多人沟通。平时发展先要跟Leader沟通，然后跟Manager沟通；做事要跟对方Leader沟通，然后跟对方PM沟通，最后跟双方的Sponsor和Stakeholder沟通。一直有人说IBM是一个Process繁多且内耗的公司，但他们不知道任何一家到达IBM规模的公司都会遇到这类的问题，但少有像IBM这样做的好的。很多公司在规模过度膨胀时，就会不负责任的裁员、砍部门；而IBM则会不断创新商业运作模式，即使不得不放弃某些部门，也会将它们很好的转让给一些能够照看好的Partner。学习好如何在大公司生存也是一门学问。
IBMer的Values是Client Dedicated，Innovative和Trustworthy Partner，Microsofter的Values是Honest Genius，光从这一点已经让IBMer非常骄傲了。可微软的光环依旧灿烂，毕竟那是一个让每个人上世纪计算机人才都心动的地方。</description>
    </item>
    
    <item>
      <title>魔力，再创作和软件融合</title>
      <link>http://blog.zhouyiyan.cn/blog/%E9%AD%94%E5%8A%9B%E5%86%8D%E5%88%9B%E4%BD%9C%E5%92%8C%E8%BD%AF%E4%BB%B6%E8%9E%8D%E5%90%88/</link>
      <pubDate>Mon, 20 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E9%AD%94%E5%8A%9B%E5%86%8D%E5%88%9B%E4%BD%9C%E5%92%8C%E8%BD%AF%E4%BB%B6%E8%9E%8D%E5%90%88/</guid>
      <description>魔力去斑，这种广告怎么会有人信。除此之外，还有什么包赚不赔的广告等等。其实要判断一种东西好不好很简单，看看外国人用不用就知道了。什么叫发达国家？就是Developed，他们的生活就是我们未来的生活。他们会放着好东西不用，给你们发展中国家用吗？发达国家不用，有钱人不用，这样的东西我可不敢用。
恶搞是否属于再创作，从点击率看来，老百姓喜欢这种艺术形式，可是知识产权正在阻碍老百姓享受他们仅有的一点权力，即使你可以消费（唱歌），但是你无权在网上发布修改的作品。BC不反对版权，但BC反对自我封闭和剥夺。更何况艺术怎么能版权化呢？什么时候语言也版权了，那大家都甭说话了！（BC觉得其实可以匿名发布那些所谓侵权的作品，因为匿名的话就不存在牟利了，也不违法了吧？）
FlashGet能够BT，BitComet可以HTTP下载，下载软件有一次遇到了发展的瓶颈。原本就狭小的中国软件世界，大家还偏偏要互相竞争。不过这种局面可能也是注定的，基本上所有软件的思路或者代码都是从国外来的，技术上总归要跟着外国人走，像HTTP下载和BT等思想级的产物不是这么容易被COPY过来的。</description>
    </item>
    
    <item>
      <title>程序员年龄、垃圾收集机制和久违的面试</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B9%B4%E9%BE%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6%E5%92%8C%E4%B9%85%E8%BF%9D%E7%9A%84%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Sun, 19 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B9%B4%E9%BE%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6%E5%92%8C%E4%B9%85%E8%BF%9D%E7%9A%84%E9%9D%A2%E8%AF%95/</guid>
      <description>看到一篇36岁软件工程师跳楼的文章，又惹来了大家对程序员年龄和转行的讨论。老实说这其实没什么可讨论的，因为这就是生活，每个人都在毕业的时候选择了自己的职业（甚至在进入大学之前），也就必须为现在的状况负责。不过中国的程序员真的很累！高增长的社会，快节奏的工作和生活，根深蒂固的传统官管观念，以及计算机本身带来的诱惑……程序员一直被认为是一个低级工种，缺乏完善的Career Path，在这个浮躁的年代，大年龄+低级工种=RP有问题。不过也对，都积累这么多经验了，你干嘛不多作些更有效率的贡献呢？唉，原本就以程序员为目标的BC，现在已经基本只是个文职人员，一天到晚写Analysis Report、Proposal、Plan和回Email。也许我该满足，因为我很容易就能转向管理，但是内心中对代码的那份执著却让BC多少有些伤感。
复习Algorithm和Data Structure时发现，Garbage Collection的方法在Lisp中就有，后来因为性能问题，给出了free函数让程序员自己处理内存问题。可是问题还是没有解决，硬件性能的提升使我们最后还得依靠垃圾收集器。而且现在垃圾收集机制可比以前先进了许多，很多时候只需要给出对应应用所需的策略就可以了。
下午在写论文，12月就是最后期限，工作也基本定了下来，决定好好为自己的蓝色生活努力。可就在这时，一个通知面试的电话打乱了原本计划的生活。MS ATC通知去面试，而且一开始还以为BC在MS实习。经过解释才知道，原来是去年Apply过MS的Internship。记得那个时候MS第一次在上海建立Windows开发小组，高兴雀跃的BC立刻报了名，不过因为从小都用中文学习数据结构和算法，最后连电话面试也没通过。如今BC已经对蓝色巨人产生了一定的感情，但因为种种原因，还是舍不得这次机会，至少是作为个人的一种展示，也是为了证明自己的代码功底。“我是个Supporter！但我也擅长写程序！”</description>
    </item>
    
    <item>
      <title>办公无纸化，装修和股市</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8A%9E%E5%85%AC%E6%97%A0%E7%BA%B8%E5%8C%96%E8%A3%85%E4%BF%AE%E5%92%8C%E8%82%A1%E5%B8%82/</link>
      <pubDate>Sat, 18 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8A%9E%E5%85%AC%E6%97%A0%E7%BA%B8%E5%8C%96%E8%A3%85%E4%BF%AE%E5%92%8C%E8%82%A1%E5%B8%82/</guid>
      <description>周博说办公无纸化的结果是更多的纸张浪费。的确，自从看到网上PWC被人恶搞成Paper Wasting Company，BC就深切怀疑这一点。办公无纸化是上世纪IT技术进步的幌子，我们真的离开纸张了吗？似乎还没有，合约、文件，除了一般邮件外，大多数的公文还是偏好纸张，白纸黑字暂时不会被改变了。也许有人要说，随着技术的进步（网络安全等等），公文用纸总会被消灭。但是总会有别的其他新的途径会消耗纸，技术进步并不会帮助我们拯救森林，只有当森林成为珍稀动物的时候才会得到应有的保护。而技术的进步，只是从一种消耗走向另一种消耗的过程。改进了铜器，我们用铁器；改进了煤气，我们用天然气；改进了水力，却永远改变不了我们浪费水的脾气。到最后，我们消耗的铜，消耗的铁，消耗的水资源，却比过往任何时候都要多。技术请发展慢一些吧！
从没有想过装修是这么挑战的事情，从设计、选料、施工到验收，从财务管理、人力资源管理到项目工程管理，交涉、会计、测试……如果BC能够完成这次挑战，绝对要把它写进Resume里，这实在是件fxxxing crazy和damn funny的事情。也许几年后BC会进修项目管理，所以一定要珍惜这次难得的机会，把它做的漂漂亮亮的！
股市疯了，上证指数从1500升到2000只花了这么短的时间！钢铁和银行受到投资者们的追捧，蓝筹股一路领军！也难怪，国家开放金融市场，中国的银行上市，花旗IBM等企业纷纷投资中国的银行，大家都对银行非常看好。记得看过四大给出的一份报告书中曾说，高增长是在中国的跨国企业所面临的一个挑战。中国经济飞速发展，两位数增长的市场必然给Shareholder们一种感觉，如果在中国的市场达不到两位数增长，即说明企业竞争力在倒退，因为其他公司或者其他行业都在快速增长。2005的CEO调查也指出，大多数CEO面临一个Commitment，就是成本控制下的高增长。因此但凡手里有钱的跨国公司，必然会寻找中国经济增长的热点，国有资产中银行必然成为宠儿！无限制的贷款，不怕倒台，这块肥肉谁都想咬上一口。可是大家不要忘记了，虽然GDP增长很快，通货膨胀率也很高。首先各种调价信息，然后工资水平增长也很快（大家可以参考各省市职工平均工资涨幅，上海居然10%），因为成本核算中工资占的部分最多，所以工资增长会直接推动通货膨胀。去除通货膨胀，中国经济的发展实际有多少？还不包括被外国人，被投机商人们赚走的钱，我们还有多少能够消费的？中国有世界上最大的市场，只要贫富差距大一些，那很多人都不会感受到压力（当然另外一些人就不同了）。多多少少有些担心呀……</description>
    </item>
    
    <item>
      <title>信仰，PM和Strategy</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BF%A1%E4%BB%B0pm%E5%92%8Cstrategy/</link>
      <pubDate>Fri, 17 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BF%A1%E4%BB%B0pm%E5%92%8Cstrategy/</guid>
      <description>昔日的同事开始研究分形，开始对做人开始建模，并说了一些莫名其妙的话。有人说他疯了，有人说他偏执，有人说他悟透了世间真理。BC觉得这是科学在作怪！周博说得好，信仰是个好东西，但这个好东西必须不容易获得，也不容易失去，人们有了信仰就有了做事的动力。人在没有信仰的时候无所畏惧，但有了信仰后却害怕失去信仰，因为那是他们赖以认识世界的基础。科学不是一个好信仰！因为科学太复杂，变化多端的理论和技术容易使人对科学产生迷茫。偏执、孤独、压力、科学主义和过度思考，人就开始从科学的层面上升至哲学乃至神学的境地，最终无法被人理解。BC希望每个人都能找到让自己幸福的信仰。
最近跟周博沟通很多，也开始对周博的很多想法产生兴趣。其实博士都很厉害，至少BC的同事当中，博士都是最有想法和见解的。PM是什么？PM既可以是Project Management，也可以是People Mangement，两者辩证统一，螺旋发展。当你每天早上进公司看到你的手下，你应当想，我要努力工作来养活这些人，我要为他们负责，为他们的发展负责，这样你就能成为一个好的People Manager。但是很多PM在刚刚担任工作的时候，往往只看重Project的进度，忽视团队的培养，乃至工作好多年后还带着这种习惯。但是作为PM的考评，Project的分数总是比People的更多，而People很多只是一个Survey了事，部门的人才流失，谁该为此负责？
下午忘记把同事和自己的考勤表交掉，直接导致BC和其他两个Intern这个月的工资被推迟，深感歉疚！想到如果以后要自己申报缴税就更麻烦了。言归正传，下午BC其实在学习Business Strategy，听了大段的Market、Customer、Revenue和Growth等等。CEO最关心他们的Commitment，所以主要会focus在成本控制下的持续增长；Shareholder则比较关心收益率，哪怕是即将出现的收益；投资者则比较看重增长方向。作为Strategist要分析各种相关的信息，给出许多建议和分析，实在是太厉害了。虽然现在HP的营业额首次超越IBM，但优势主要在PC上，IBM并不关心这个。估计PC不是未来的增长点，所以即使PC在中国是增长点，作为全球公司的Strategy还是会放弃PC的。其实曾经InBev也在一段时间放弃过一些非洲市场，以提升在欧洲市场的竞争力，所以说Focus和Leading很重要。</description>
    </item>
    
    <item>
      <title>吃炒菜、研究生教育和轻量级软件</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%90%83%E7%82%92%E8%8F%9C%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%99%E8%82%B2%E5%92%8C%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Wed, 15 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%90%83%E7%82%92%E8%8F%9C%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%99%E8%82%B2%E5%92%8C%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%BD%AF%E4%BB%B6/</guid>
      <description>晚饭吃得很郁闷，虽然今天难得很早去排队吃炒菜，但是负责烧菜调度阿姨的服务是在让我难以接受。先是许多菜没人要，大家挤在窗口前拼命抢菜；然后又无故降低BC青菜蛋汤的Priority，接着借口青菜没有只好换成番茄蛋汤，最后拿到手的是几片蛋花和两片番茄……身为Support的BC突然发觉，即使产品做得再好，如果服务跟不上，Customer一样会非常恼火。跟客户打交道的工作更是马虎不得，不仅要求基本功扎实（嗓门响亮、手脚麻利、记性好），还要很近人情（会不厌其烦的去帮你催菜），而且还得坚持原则（先来先得）。从小工作上就能看出一个人的能力，所以如果再去上大延长吃炒菜，推荐去那个胖阿姨的窗口，绝对服务一流。
下午BC参加研究室开会，有位老师发出这样的感慨，研究生就是自学的，老师给你指个方向就不错了，不要指望本科式的教学。BC在本科时也没指望本科式的教学，更不用说研究生了。但是自学实在是迫于无奈，因为根本没有人能给什么指导，大四时便觉得研究生论文十分的浆糊，没想到研究生阶段更是得不到一点前人的积累。正如周博所说，读研就是要看中团队。没有团队，一个人的研究谈何容易，都希望我们能够给下一辈留下积累，但对于我们一点好处也没有。当每个月应该属于我们的培养津贴变成了老师的施舍，当老师以指方向为荣耀，当双向沟通成为学生的责任，我们还能怎么样？写完论文毕业走人，已经是我们对学校最大的贡献了（毕业率）。
实验室的机器异常缓慢，照理说P4、512M内存已经是几年前的梦幻机了，可为什么开个窗口都这么慢呢？软件不是很复杂就是正在变得复杂，最明显的就是操作系统。Windows变得日益复杂还情有可原，Linux一定很快吧？装个桌面环境和常用软件，一样慢！就连读个PDF都得打开巨慢的Adobe Reader。所以BC痛下决心，以后只装轻量级软件，让机子快起来。下面列出几个BC用到现在比较满意的轻量级软件：
 K-Melion 和Firefox一样内核的浏览器 FixitReader 快速看PDF的软件 AntiVir 感觉最快的防病毒软件  </description>
    </item>
    
    <item>
      <title>社会化网络，国学辣妹和义务献血</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%A4%BE%E4%BC%9A%E5%8C%96%E7%BD%91%E7%BB%9C%E5%9B%BD%E5%AD%A6%E8%BE%A3%E5%A6%B9%E5%92%8C%E4%B9%89%E5%8A%A1%E7%8C%AE%E8%A1%80/</link>
      <pubDate>Wed, 15 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%A4%BE%E4%BC%9A%E5%8C%96%E7%BD%91%E7%BB%9C%E5%9B%BD%E5%AD%A6%E8%BE%A3%E5%A6%B9%E5%92%8C%E4%B9%89%E5%8A%A1%E7%8C%AE%E8%A1%80/</guid>
      <description>提供sns服务的网站太多太复杂，而且也没有一种能长时间留住BC，因为像BC这样不善于社会化交友的人，仅仅满足于小圈子就可以了。于是一个又一个，Spaces、Mop、LinkedIn、Orkut……最后BC一个组织都没有找到。其实通过分析一个人的Mail和IM联系人就能够研究出其社会网络了，何必这么麻烦注册来注册去呢？可是提供Mail服务和IM的服务的又不能统一共享数据，使得广大人民群众分散在各个独立的小空间里不能互相沟通。真希望什么时候能够通过六个人同美国总统好好沟通一下。
国学辣妹是前一阵子比较热的网络红人，网上关于她的消息也很多，不过还是在下面给了官方地址，免得信息在转载的过程中被人篡改和曲解。其实BC还是很欣赏国学辣妹的，为什么呢？身材好、文采好、可爱而且热情的MM谁不喜欢呢？这个时代有个性而且敢于展露的人越来越少了，所以这样的人BC是一定要赞一个的！至于评论就不给了，网络上这么多，反正喜欢的话就给她在网上留个名字，让Google Trend记住这个历史。
BC收到一封疑问无偿献血的邮件，因为文章比较激进所以不敢随便转载（不过肯定有地方贴出来的），不过也要发一些想法。无偿献血其实是一种垄断，因为垄断，所以才能将血液的价格压低到0，而用血则要花费大量的金钱：这车、这么多可爱的医护工作者、血库、血库管理员以及各种大大小小的管理层，谁不希望奔向共产主义？而且献血后普遍会发胖，至少BC周围的人都是这样的。国有资产管理都成问题，怎么能够相信血液管理能够做好？将来哪天血液管理中混入了私人资本（就像脐血那样），好人不都白献了。坚决质疑无偿献血，要求血液市场化！</description>
    </item>
    
    <item>
      <title>TonaGura，FlashPlayer和新书</title>
      <link>http://blog.zhouyiyan.cn/blog/tonagura-flashplayer-books/</link>
      <pubDate>Mon, 13 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/tonagura-flashplayer-books/</guid>
      <description>又一部后宫作品TonaGura看完了，同那些冗长剧情的片子比起来，擦边球和简单的主题是它的特色。回忆总是美好的，因此而用近乎苛刻的标准要求身边的另一半，最后发现自己才是被包容的对象，简洁明了的结局并没有让BC产生过多的遗憾。
FlashPlayer部分技术被开源了！这简直是天大的消息，Adobe此举是对开源社区极大的示好，对目前Ajax等其他脚本类语言有极大的帮助。媒体播放类工具基本上都已经是免费的了，有许多都能找到很不错的开源替代品，这对开发人员来说也是好消息，新的分类意味着开发人员可互相替代成本的提升，不过可怜了那些Web Developer了，他们又要学习新东西了。
奔跑的蜈蚣、世界是平的、撬动地球的Google、沃森父子与IBM王朝和Contributing to Eclipse。BC嗜书的老毛病又犯了，不过不知道这些书什么时候才能看完哟……虽然拿到了IBM的Offer，不再需要辛苦找工作，但是论文的压力还是很大，也不敢向Manager要求更多的事情。不过真佩服自己，发现自己最近半年的效率极高，过渡到Regular应该不会很难吧？像OT King致敬！</description>
    </item>
    
    <item>
      <title>把回忆锁进抽屉</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%8A%8A%E5%9B%9E%E5%BF%86%E9%94%81%E8%BF%9B%E6%8A%BD%E5%B1%89/</link>
      <pubDate>Thu, 09 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%8A%8A%E5%9B%9E%E5%BF%86%E9%94%81%E8%BF%9B%E6%8A%BD%E5%B1%89/</guid>
      <description>在整理证书的时候，发现一大摞信件、贺卡和收到的礼物，思绪便也随着这些东西飘向了远方。四川的新鲜还好么？小沁已快和高中时的好朋友结婚了。连续两年送我礼物的Lin，现在应该也和男朋友过得很滋润吧……呵呵，一直认为自己没什么MM缘，其实还是曾经和几个不错的MM擦过边。只不过不懂得珍惜，机会错过了也不知道，不过也许只是我的自作多情罢了。突然间很想知道她们的境况，但平和的生活又何必再起波澜？过好每一天，让美好的东西永远留在记忆里。再说，我身边也已经有了一个能够好好照顾一辈子的小宝贝，也觉得无比幸福了。</description>
    </item>
    
    <item>
      <title>时间计算</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Mon, 06 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/</guid>
      <description>为了要计算各地的时间，不得不去查下面的资料，有什么基于网页的工具呢？
GMT 格林威治标准时间 GMT UTC 全球标准时间 GMT ECT 欧洲中部时间 GMT+1:00 EET 东欧时间 GMT+2:00 ART （阿拉伯）埃及标准时间 GMT+2:00 EAT 东非时间 GMT+3:00 MET 中东时间 GMT+3:30 NET 近东时间 GMT+4:00 PLT 巴基斯坦拉合尔时间 GMT+5:00 IST 印度标准时间 GMT+5:30 BST 孟加拉国标准时间 GMT+6:00 VST 越南标准时间 GMT+7:00 CTT 中国台湾时间 GMT+8:00 JST 日本标准时间 GMT+9:00 ACT 澳大利亚中部时间 GMT+9:30 AET 澳大利亚东部时间 GMT+10:00 SST 所罗门标准时间 GMT+11:00 NST 新西兰标准时间 GMT+12:00 MIT 中途岛时间 GMT-11:00 HST 夏威夷标准时间 GMT-10:00 AST 阿拉斯加标准时间 GMT-9:00 PST 太平洋标准时间 GMT-8:00 PNT 菲尼克斯标准时间 GMT-7:00 MST 西部山脉标准时间 GMT-7:00 CST 中部标准时间 GMT-6:00 EST 东部标准时间 GMT-5:00 IET 印第安那东部标准时间 GMT-5:00 PRT 波多黎各和美属维尔京群岛时间 GMT-4:00 CNT 加拿大纽芬兰时间 GMT-3:30 AGT 阿根廷标准时间 GMT-3:00 BET 巴西东部时间 GMT-3:00 CAT 中非时间 GMT-1:00</description>
    </item>
    
    <item>
      <title>CFL结束</title>
      <link>http://blog.zhouyiyan.cn/blog/cfl%E7%BB%93%E6%9D%9F/</link>
      <pubDate>Thu, 02 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/cfl%E7%BB%93%E6%9D%9F/</guid>
      <description>周末收到了CFL的Offer Letter，原本应该很高兴的，毕竟能够获得一次去国外考察的机会，而且CFL这个名字本身就意味着什么什么。不过昨天晚上当联系人打电话过来的时候，或许是因为仅仅一次的面试不能够让我充分相信CFL的含金量，或许是因为经济上的原因（20K对我来说简直就是巨款），我还是放弃了这次机会。寒暄了几句，挂了电话。
或许报名CFL本身就是一种冲动，冲着Future Leader的Title而去的我最后却不得不考虑荷包。不过也让我清醒了许多，与其拼命想被承认，不如埋头好好提升自己。</description>
    </item>
    
    <item>
      <title>Pause here</title>
      <link>http://blog.zhouyiyan.cn/blog/pause-here/</link>
      <pubDate>Thu, 02 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/pause-here/</guid>
      <description>终于决心离开Space一段时间。图片，列表，各种花哨的东西，日志的质量确实越来越低。我会在这里开始新的生活，希望能有所改变吧，无论是对论文还是工作来说，少一些浮躁。
2013/11/13 注：我之前是在MSN的Space扇面</description>
    </item>
    
    <item>
      <title>什么是Archievement？</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BB%80%E4%B9%88%E6%98%AFarchievement/</link>
      <pubDate>Sat, 28 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BB%80%E4%B9%88%E6%98%AFarchievement/</guid>
      <description>昨天听了一个关于Career的讲座，主讲人Randall是个极有热情的人，BC听了也极有感觉。正如他说的，他是一个能够在Team中超常Productive的人，这种影响力是BC很久没有感受的了。Passion可以说是一种最好的影响力和Leadership，至少对于BC来说绝对是真理。
Randall问我们：什么是Archievement？BC想了半天，为别人开发工具方便别人的工作？拯救一次Server Down？在一上午时间完成30个OPC Record的分析外加40个User Profile的分类？为了一个Project的Deadline奋战到深夜？可是这些都是小事，又有些是BC的本职工作，似乎都不能称为Archievement……就在所有人陷入思考的时候，有一个人说：
“我发现了一个问题，并且说服别人认可这个问题。” “没错，那就是一个Archievement！”  的确，正如Randall所言，Archievement并没有衡量的指标，对每个人来说也都是不一样的，关键在于：Archievement changes something！事物因为你的作为而变得更好，这就是一种Archievement！当我们在不断做出Archievement并认识到它的时候，自我的价值就得到了实现。所以BC决定要不断去尝试创造Archivement，keep fighting and good things will happen!</description>
    </item>
    
    <item>
      <title>最终被CFL放弃了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%9C%80%E7%BB%88%E8%A2%ABcfl%E6%94%BE%E5%BC%83%E4%BA%86/</link>
      <pubDate>Tue, 24 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%9C%80%E7%BB%88%E8%A2%ABcfl%E6%94%BE%E5%BC%83%E4%BA%86/</guid>
      <description>虽然CFL又打电话来说重新预约一次面试，但那最后的机会并没有带来好运气。约定的时间过去了，“专家”的电话却没有再打过来。也许连一次电话面试都不能把握住的人，也不能成为China Future Leader吧。别了，两周的美国考察！</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://blog.zhouyiyan.cn/blog/my-first-post-at-blogger/</link>
      <pubDate>Mon, 16 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/my-first-post-at-blogger/</guid>
      <description>Hello, everyone!
Here comes my first post at blogger!
Maybe I should write something to celebrate?
Maybe next time. ^_^</description>
    </item>
    
    <item>
      <title>今天很郁闷</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BB%8A%E5%A4%A9%E5%BE%88%E9%83%81%E9%97%B7/</link>
      <pubDate>Mon, 16 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BB%8A%E5%A4%A9%E5%BE%88%E9%83%81%E9%97%B7/</guid>
      <description>本来今天上午约好CFL面试的，难得出国考察的机会，就因为不小心按错了按钮。BC本来只想把声音关掉以免影响别人，浪费了一次电话被BS的机会，可惜呀……看来BC在风险管理和应对上还要下功夫。</description>
    </item>
    
    <item>
      <title>不得不跳槽</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%B7%B3%E6%A7%BD/</link>
      <pubDate>Wed, 11 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%B7%B3%E6%A7%BD/</guid>
      <description>早上又听到一位即将达到权力巅峰人的离去，现实是残酷的。从BC与MBI的邂逅以来，已经至少三个人因为Career同上司的相交而不得不离开去其他地方发展。为什么就没有别的办法？为什么不能像政府那样横向调配？不清楚，也没达到清楚地层次，BC还得在基层多打拼才行。</description>
    </item>
    
    <item>
      <title>假期结束了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%81%87%E6%9C%9F%E7%BB%93%E6%9D%9F%E4%BA%86/</link>
      <pubDate>Tue, 10 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%81%87%E6%9C%9F%E7%BB%93%E6%9D%9F%E4%BA%86/</guid>
      <description>在163的blog上面转了一圈又回来了，感觉还是这里好。
论文外审已经结束，工作也正在等待结果，除了这些，似乎没什么值得期待的了。
今天收到计算机应用的退修信，说是背景介绍过多，算法实现细节欠详细，还提了很多格式上的要求。虽然不是录取通知，但至少没有被立即退掉，还是有希望的。嗯，今天回去BC开始改论文咯！
目前的任务还有：修改论文、大论文、工作、NomadPIM解读和一些英语Training。
论文已经送出去了，开始认真写PPT，都说PPT是世界上第一大开发工具了！</description>
    </item>
    
    <item>
      <title>Go or No Go</title>
      <link>http://blog.zhouyiyan.cn/blog/go-or-no-go/</link>
      <pubDate>Tue, 26 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/go-or-no-go/</guid>
      <description>无论是论文和工作，都到了Go or No Go的时候了。不过现在已经不是自己能够控制的了，只希望结果早点出来。感冒还是老样子，又有两个人被BC传染了，实在对不起亚！而今天唯一高兴的是给自己的小W买了硅胶套和屏幕保护贴，花了80元，BC现在还心疼呢……不过想到能长久看到小W清清爽爽的样子，这点开销还是值得的。</description>
    </item>
    
    <item>
      <title>无题</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%97%A0%E9%A2%98/</link>
      <pubDate>Sat, 23 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%97%A0%E9%A2%98/</guid>
      <description>这是一个射击游戏，玩家操纵一台战机在宇宙各种场景下进行战斗。从开始的狭小管道进入到广大的宇宙背景后，大量CG替代了战斗环境，仿佛置身在游戏当中，游戏变得非常好玩…… 一不小心被击中了，只好重新打。这时听到外面有人叫，昏暗的小房间里，游戏继续着，前面的部分进行很快，立刻就到想要的部分…… …… 被两个MM叫出去，发现自己的朋友也在，但是意识非常模糊，想自己肯定是睡着了在做梦，通常梦里遇到MM一定会有好事情发生，于是期待着…… 来到小巷，遇到把门的流氓，似乎进去必须要接受一种毒品注射，如果接受毒品则会昏睡，醒来后游戏结束（怎么这么清楚？） 不接受毒品则会被质疑，于是说自己有毒品过敏，但被毒贩揭穿，最后被痛扁和强制注射后昏过去。醒来发现自己的嘴唇肥大难以控制，可能是吸毒者的症状，在商店被很多人鄙视和唾弃，大哭，最后遇到游戏的Architect…… Architect给了一些建议…… 摇身变成了武士，目睹武田信玄被织田信长和上衫家暗杀，但似乎武田信玄躲过了灾祸，于是协助他回来报复…… …… 短信声起，没有战斗、没有游戏、没有毒品、没有MM…… 只觉口水四溢，似枕黄粱之上。</description>
    </item>
    
    <item>
      <title>Tips Siemens optiset E phone usage</title>
      <link>http://blog.zhouyiyan.cn/blog/tips-siemens-optiset-e-phone-usage/</link>
      <pubDate>Thu, 14 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/tips-siemens-optiset-e-phone-usage/</guid>
      <description>It is a way to protect company&amp;rsquo;s money by making use of advanced tools. ^_^
######Alternative call: If another call is coming when you are using the phone, just press &amp;lsquo;Alternate&amp;rsquo; to change to the other call in circle. This feature support more than two calls at the same time and is limited only by software settings.
######Call forward: When you are away, if you want others still use the same number to find you, use the call forward feature.</description>
    </item>
    
    <item>
      <title>tips install scrollkeeper-0.3.14 @ cygwin</title>
      <link>http://blog.zhouyiyan.cn/blog/tips-install-scrollkeeper-0.3.14-cygwin/</link>
      <pubDate>Wed, 13 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/tips-install-scrollkeeper-0.3.14-cygwin/</guid>
      <description>I want to install gnome under cygwin environment, so I followed the BLFS 6.1 guide book. But cygwin doesn&amp;rsquo;t provide scrollkeeper package and normal g-b-s method doesn&amp;rsquo;t work, either. After a lot of Google, I turned to cygport, a building system for cygwin. But cygport is still under development and it doesn&amp;rsquo;t provide the ebuild I need. I have to write it on my own. Here is my experiences:
 Create scrollkeeper-0.</description>
    </item>
    
    <item>
      <title>下雨了，总结一下</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%8B%E9%9B%A8%E4%BA%86%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B/</link>
      <pubDate>Sun, 23 Jul 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%8B%E9%9B%A8%E4%BA%86%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B/</guid>
      <description>######关于BC 很多人都对BC的名字很好奇，究竟是什么意思呢？BC心里也没底，就随便胡诌一下。BC中学时候有个英文名叫Balzac，这并非源自那个靠写书还债的小说家，而是一部动画片里面的任务（很幼稚吧）。后来用着用着就不想改了，但这个法国人的名字实在难念也难写，加上BC是机甲人的爱好者，所以改了个比较Mech的名字，把中间几个字母去掉了，就叫BC吧，或者BC19820118也可以。其实BC还有很多意思的，大家可以去字典查查，会有有趣的发现哦，hoho！
######聚会 同学聚会很开心，以前的女生们现在个个都更有女人味了，让BC大饱了次眼福。大家不是在从事神圣的职业（医生、教师、律师），就是在知名企业里面占有一席之地（虽然知名，但BC是不知道的，惭愧呀……BC只知道微软、Google、IBM，对于非IT界的大公司就不知道了），也让BC很佩服很高兴，说不定将来有机会合作吧。（毕竟IT也是为他们服务的，呵呵）
######伪球迷 带领Hull终于打进了英超，虽然现实中的Hull还是在冠军联赛，但是这支从03/04赛季就开始闪亮的队伍已经成了BC的最爱，一路过关斩将，毋庸置疑Peter Tylor的领导能力了。现在到了英超，老板给了我10M的预算，买个大牌明星恐怕是不够的，只好买那些二线明星了，实惠啊！
######Gentoo 看到又有人在辛苦装Gentoo，不免发几句评论。其实到了Gentoo装好才发现……原来配置是很重要的。除了内核之外，还有无数的应用需要配置，虽然速度要比其它发行版的Linux快很多（这是当然得了，除了编译参数外，少装了无数的服务啊），但是界面会相当的丑。如果用了美化方案，那恭喜，速度又下降了（Windows的霉化方案）。所以Gentoo真是让人欢喜让人忧啊，当成是游戏玩一下还是不错的。
######终结者 抽空把终结者123看完了，感受到经典的威力果然不同凡响，作为一部好莱坞三部曲，我个人认为是比较成功的，建议喜欢肌肉男和机器人的朋友回味一下。</description>
    </item>
    
    <item>
      <title>悲伤的日子</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%82%B2%E4%BC%A4%E7%9A%84%E6%97%A5%E5%AD%90/</link>
      <pubDate>Tue, 25 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%82%B2%E4%BC%A4%E7%9A%84%E6%97%A5%E5%AD%90/</guid>
      <description>每天打开MSN看Space是BC的习惯，可是今天却收到一个令人悲伤的消息，中学时最好的朋友的父亲去世了……不知道为什么好想大哭一场，毕竟那曾经让人留下回忆的面容，毕竟在那真正快乐的时代，毕竟那每个酷暑，BC总能在好朋友家里看到。有的时候BC甚至十分嫉妒有这样的父母……可是这一切都变了。人去了国外，至少还有再聚的希望，可是人要是离开了这个世界，那就永远也不能再见了。BC真的不想看到亲人分离！</description>
    </item>
    
    <item>
      <title>你是哪里美国人</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BD%A0%E6%98%AF%E5%93%AA%E9%87%8C%E7%BE%8E%E5%9B%BD%E4%BA%BA/</link>
      <pubDate>Wed, 15 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BD%A0%E6%98%AF%E5%93%AA%E9%87%8C%E7%BE%8E%E5%9B%BD%E4%BA%BA/</guid>
      <description>You Are Austin
A little bit country, a little bit rock and roll. You&amp;rsquo;re totally weird and very proud of it. Artistic and freaky, you still seem to fit in&amp;hellip; in your own strange way. Famous Austin residents: Lance Armstrong, Sandra Bullock, Andy Roddick
What American City Are You?</description>
    </item>
    
    <item>
      <title>人的成长和软件的成长有什么区别</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BA%BA%E7%9A%84%E6%88%90%E9%95%BF%E5%92%8C%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%88%90%E9%95%BF%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 03 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BA%BA%E7%9A%84%E6%88%90%E9%95%BF%E5%92%8C%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%88%90%E9%95%BF%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid>
      <description>人的成长和软件的成长有什么区别呢？
人的成长总是伴随着观念的更替，也就是社会化的过程，每个阶段人总有新的想法、新的世界观和价值观，这种变化帮助人类不断地去适应周围的环境和社会。人并没有什么最优化或者终极目标，因为人没有恒定的想法，正如没有永恒的真理一样。
而软件则不同。
每个软件的诞生之初，即被开发者灌输了一定的设计理念，最为根深蒂固的就是软件架构。这种架构在设计之处总能够体现最先进的理念，但是随着软件的发展，这种设计理念便有可能会过时或者被证明是不适合的。软件规模越大，越难改变其基础结构。于是一个软件还没有进入“生理”老年期，就有可能已经在“心理”上老化了。经常会看到国产软件重新核心，这种情况往往就是初始的设计考虑不周而造成。
所以现在很多概念软件都采用类似Linux的内核加扩展，这种结构固然是考虑到降低重写底层对软件其他部分的影响，但是这种结构不会过时吗？不得而知。看来软件结构还是很值得研究的。</description>
    </item>
    
    <item>
      <title>生病了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8F%88%E7%94%9F%E7%97%85%E4%BA%86/</link>
      <pubDate>Fri, 03 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8F%88%E7%94%9F%E7%97%85%E4%BA%86/</guid>
      <description>“今天最高15度”天气预报如是说着，BC便把羽绒服换下。都说春天要捂，可是BC怎么会这么不小心呢？这不，脑浆晃了一整天了……</description>
    </item>
    
    <item>
      <title>领导不能先走</title>
      <link>http://blog.zhouyiyan.cn/blog/%E9%A2%86%E5%AF%BC%E4%B8%8D%E8%83%BD%E5%85%88%E8%B5%B0/</link>
      <pubDate>Fri, 24 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E9%A2%86%E5%AF%BC%E4%B8%8D%E8%83%BD%E5%85%88%E8%B5%B0/</guid>
      <description>看过1994年12月8日新疆克拉玛依市剧院火灾事件（网上已经很难搜到，全都被封掉了）后，内心难以平静。300多名儿童的丧生，领导们却安然无恙，这样的结局令人难以置信。这杨悲剧都归因于一句话：“领导先走”……这样的话听得多了，但BC不想多加评论，因为每个人都有自己的生存之道，而且事情的起因是失火，并不能完全责怪人性的丑陋。为这些孩子们默哀吧……</description>
    </item>
    
    <item>
      <title>美女都一个样</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%BE%8E%E5%A5%B3%E9%83%BD%E4%B8%80%E4%B8%AA%E6%A0%B7/</link>
      <pubDate>Thu, 23 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%BE%8E%E5%A5%B3%E9%83%BD%E4%B8%80%E4%B8%AA%E6%A0%B7/</guid>
      <description>吃饭归来精神爽，淮海路上依旧美女如云，偶然一个头发颜色和围巾颜色一样的MM吸引了BC的眼球（围巾当然不是黑色的了）。BC驻足观看了许久，试图想象出这个MM不化妆的样子却未果……人们都说进了澡堂大家都一个样，是说人的穿着打扮才显示出人与人的社会区别（不是生物学区别，呵呵），美容化妆也能够起到重要的“两极分化作用“。一个MM极尽所能地将自己打扮得好看，而卸装后却通常平淡无奇（甚至惨不忍睹），对于大家的眼球来说总是值得的，对于用光纤亮丽换取幸福生活的MM来说也是值得的，但审美疲劳同样让BC感叹：美女都一个样儿！</description>
    </item>
    
    <item>
      <title>今天生病了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BB%8A%E5%A4%A9%E7%94%9F%E7%97%85%E4%BA%86/</link>
      <pubDate>Wed, 22 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BB%8A%E5%A4%A9%E7%94%9F%E7%97%85%E4%BA%86/</guid>
      <description>昨天已经涕流不止了，今天实在顶不住，于是去校医院看了病。医生嘱咐好好休息，于是便得了这一天的闲。感觉已经好久没有休息了，平时要忙着学习和工作，双休日又想着娱乐……小时候最希望的便是生病了，这样就不用上学不用做作业，而长大了呢，生病却逃不过很多琐事了。今天落下的，明天还要继续。</description>
    </item>
    
    <item>
      <title>粗糙产生美感</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%B2%97%E7%B3%99%E4%BA%A7%E7%94%9F%E7%BE%8E%E6%84%9F/</link>
      <pubDate>Thu, 05 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%B2%97%E7%B3%99%E4%BA%A7%E7%94%9F%E7%BE%8E%E6%84%9F/</guid>
      <description>今天在http://www.grand-illusions.com/上看到一张照片。
画面中的人随着距离表现出残暴和温柔的不同表情，原因是 人的眼睛在不同距离下对细腻(fine)和粗糙(coarse)的感觉不同所致。人们在相处时也是如此，close时比较注意细腻的表现，而一般则更多的 看到粗糙的一面。正如对那些成功人士，我们只会看到他们的一块又一块光晕，而不去在乎他们寻常人的一面。而对于我们身边的亲人，总是觉得他们对自己婆婆妈 妈，看不到他们的伟大。距离产生美感，因为从illusion理论上来讲，距离会让人不注意细腻或者细节，而正是这粗糙让人产生的美感呀。</description>
    </item>
    
    <item>
      <title>诸葛神算测字</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%AF%B8%E8%91%9B%E7%A5%9E%E7%AE%97%E6%B5%8B%E5%AD%97/</link>
      <pubDate>Tue, 13 Dec 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%AF%B8%E8%91%9B%E7%A5%9E%E7%AE%97%E6%B5%8B%E5%AD%97/</guid>
      <description>签诗：遇险不须忧，风波何足忌，若遇草头人，咫尺青云路 解签：吉祥，化险为夷，若遇贵人，将可发迹。(贵人或可注意姓名有草字头者)。
谁是BC的草头人呢 ^_^
在网上找到一个网址 大家一起分享
诸葛亮神算（马前课）
诸葛亮神算是根据《诸葛神薮》编写的抽签、测字游戏软件。蜀国丞相诸葛亮根据《易经》三百八四爻，所编写的签诗，巧妙地组成字盘供人卜算。其内容神秘而不可思议，小至个人荣辱，家庭得失，大至战役胜负，邦国荣衰，无不灵验如神。因此名声大震，代代相袭。明代后，该书被更名为《诸葛神薮》。
说明：凡占疑者，须沾水焚香，祝云：某弟子所为某事，敢告。随意书三字，填入下面对应的框中，按察看即可。</description>
    </item>
    
    <item>
      <title>十年编程无师自通</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8D%81%E5%B9%B4%E7%BC%96%E7%A8%8B%E6%97%A0%E5%B8%88%E8%87%AA%E9%80%9A/</link>
      <pubDate>Thu, 08 Dec 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8D%81%E5%B9%B4%E7%BC%96%E7%A8%8B%E6%97%A0%E5%B8%88%E8%87%AA%E9%80%9A/</guid>
      <description>BC看了一篇文章，感到自己好久没有培养编程能力了，惭愧惭愧……接下来要多写程序了，还要学习一些&amp;rdquo;能够影响我编程思想&amp;rdquo;的编程语言。
&amp;ldquo;…… 学会至少半打编程语言。包括一门支持类抽象的语言（如Java或C++），一门支持函数抽象的语言（如Lisp或ML），一门支持句法抽象的语言（如Lisp），一门支持说明性规约的语言（如Prolog或C++模版），一门支持协程（coroutine）的语言（如Icon或Scheme），以及一门支持并行处理（parallelism）的语言（如Sisal）。&amp;rdquo;</description>
    </item>
    
    <item>
      <title>BC的小龟要过冬</title>
      <link>http://blog.zhouyiyan.cn/blog/bc%E7%9A%84%E5%B0%8F%E9%BE%9F%E8%A6%81%E8%BF%87%E5%86%AC/</link>
      <pubDate>Mon, 05 Dec 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/bc%E7%9A%84%E5%B0%8F%E9%BE%9F%E8%A6%81%E8%BF%87%E5%86%AC/</guid>
      <description>养了两年的小龟又要过冬了，每年这个时候都会让BC十分担心，去年的冬天小龟们都是生活在BC家的旧电饭煲里，今年旧电饭煲彻底退役了，小龟们该在哪里过冬呢？而且它们曾经集体消失过一个月，没有补充足够的食物，冬眠的话家里也太吵了……可怜的小东西哦……</description>
    </item>
    
    <item>
      <title>Lord of War</title>
      <link>http://blog.zhouyiyan.cn/blog/lord-of-war/</link>
      <pubDate>Mon, 05 Dec 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/lord-of-war/</guid>
      <description>这可不是LoTR而是LoW哦，BC比较喜欢尼古拉斯凯奇的片子，而这种有点Legend感觉的片子更是大调BC胃口。片中尼古拉斯扮演的优力绝对称得上是战争之神，从苏联购买军火，买通美国政府中的高官，同非洲内战国家进行军火交易，一个军火走私商的成长之路被描绘的极富感染力，儿时的梦想、梦中情人、兄弟间的友谊、内战的残酷、政治丑闻和腐败、生命的脆弱（和黑人MM的性感^_^），各种元素都具备了，有点上帝之城的味道。不错不错，BC极力推荐！</description>
    </item>
    
    <item>
      <title>准备好进入梦境了吗</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%87%86%E5%A4%87%E5%A5%BD%E8%BF%9B%E5%85%A5%E6%A2%A6%E5%A2%83%E4%BA%86%E5%90%97/</link>
      <pubDate>Thu, 24 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%87%86%E5%A4%87%E5%A5%BD%E8%BF%9B%E5%85%A5%E6%A2%A6%E5%A2%83%E4%BA%86%E5%90%97/</guid>
      <description>刚才玩StumbleUpon，推荐给我一个网站，发上来分享一下，喜欢弗洛伊德的人可能会比较高兴了。</description>
    </item>
    
    <item>
      <title>冒一下头</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%86%92%E4%B8%80%E4%B8%8B%E5%A4%B4/</link>
      <pubDate>Tue, 22 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%86%92%E4%B8%80%E4%B8%8B%E5%A4%B4/</guid>
      <description>很久没有上来了，不是不想写，而是没次写了都不能提交。当然不是MSN的问题，而是BC我现在用的是Linux，而且用Konqueror上网，根本没办法提交。Firefox也不管用，只好用别的方法了。每次BC一投入什么东西，肯定会把别的都丢掉，唉……真是个坏习惯呢！</description>
    </item>
    
    <item>
      <title>张江的IBM</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%BC%A0%E6%B1%9F%E7%9A%84ibm/</link>
      <pubDate>Fri, 04 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%BC%A0%E6%B1%9F%E7%9A%84ibm/</guid>
      <description>上个礼拜BC去张江的IBM开部门会议，想想如果将来在浦东工作的话，一定会住在川沙或者南汇，又便宜环境又好，虽然不是很繁华，但是BC喜欢安静的地方。</description>
    </item>
    
    <item>
      <title>My make.conf for Gentoo</title>
      <link>http://blog.zhouyiyan.cn/blog/my-config-for-gentoo/</link>
      <pubDate>Mon, 31 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/my-config-for-gentoo/</guid>
      <description>These settings were set by the catalyst build script that automatically built this stage # Please consult /etc/make.conf.example for a more detailed example CFLAGS=&amp;quot;-pipe -O3 -march=pentium4&amp;quot; CHOST=&amp;quot;i686-pc-linux-gnu&amp;quot; CXXFLAGS=&amp;quot;${CFLAGS}&amp;quot; LDFLAGS=&amp;quot;-Wl,-O1&amp;quot; MAKEOPTS=&amp;quot;-j4&amp;quot; USE=&amp;quot;a52 aac acpi bash-completion bzip2 cdparanoia cdr cjk dbus dga divx4linux dvd exif fbcon ffmpeg flac ftp glut gtkhtml hal imlib2 immqt-bc javascript joystick kdeenablefinal kerberos kqemu matroska mmx mmxext moznocompose moznoirc moznomail mozsvg mplayer msn nptl nptlonly nvidia openal pic rdesktop sharedmem sse sse2 svg swat theora threads unicode v4l v4l2 vcd vim-with-x win32codecs xosd xpm xvid zeroconf -gnome&amp;quot; LINGUAS=&amp;quot;en zh_CN&amp;quot; FEATURES=&amp;quot;ccache distcc&amp;quot; CCACHE_SIZE=&amp;quot;2G&amp;quot; #CCACHE_DIR=&amp;quot;/var/tmp/ccache&amp;quot; DISTCC_DIR=&amp;quot;/var/tmp/portage/.</description>
    </item>
    
    <item>
      <title>换了标题</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%8D%A2%E4%BA%86%E6%A0%87%E9%A2%98/</link>
      <pubDate>Sun, 30 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%8D%A2%E4%BA%86%E6%A0%87%E9%A2%98/</guid>
      <description>好久没更新了，本来积累了很多的日志，但是突然被人告知可能会侵犯IP，所以就只好放弃了。最近工作比较轻松，所以也没什么可写的，出去又没时间。昨天去了次IKEA，发觉有钱真好，可以把房间布置的漂漂亮亮的，还有一个孩子的房间是BC梦寐以求的，可惜自己不能做自己的孩子……想象自己的孩子肯定会很幸福的……空间的副标题换掉了，因为最近BC要考认证，当然不是那种几K的，BC比较穷，只能考考零点几K的就很不错了，积少成多嘛。</description>
    </item>
    
    <item>
      <title>PJ生病了</title>
      <link>http://blog.zhouyiyan.cn/blog/pj%E7%94%9F%E7%97%85%E4%BA%86/</link>
      <pubDate>Thu, 06 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/pj%E7%94%9F%E7%97%85%E4%BA%86/</guid>
      <description>本来在电脑面前做这么长时间肯定会被PJ骂的，即使不骂也会二话不说被抢去玩祖玛，可是现在PJ病了，BC只能在旁边看着，一点办法都没有。虽然没有感冒，也吃了PJ吃的药，就让我一起头晕吧……</description>
    </item>
    
    <item>
      <title>王垠事件</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%8E%8B%E5%9E%A0%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Thu, 06 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%8E%8B%E5%9E%A0%E4%BA%8B%E4%BB%B6/</guid>
      <description>任何事件都会牵涉到四方的力量：激进派、保守派、中立派和无观者。—— Balzac
 关于这个事件的详细内容可以参考这里和这里两个网站。（2013年：这两个网站已经随着MSN去了）
我也曾经像王垠那样热衷于寻找真正的“研究”，可惜我第一不是个牛人，第二也不像王垠那么的自我，第三更不是在一个可以吸引眼球的学校，最终还是一个沦落世俗的凡人。本来想在这里为他打点不平，不过无奈自己说话没什么声音，也就随便写点聊以自慰。
各派战术分析（以下是看了大篇的帖子后得出的一点点结论）
1.激进派战术——升华
激进派的人总是擅长于利用某个事件为另一个时间作托辞，赞同王垠的人们大都会把问题从单纯的个 人发展升华到一个社会问题，什么大学学术环境啦等等，借此对自己不喜欢的东西进行攻击。人类是 奇怪的，一方面认识到自身的问题，一方面却情愿选择适应。
2.保守派战术
a.人身攻击
保守派最擅长的就是人身攻击了，如果你对他们的制度不满意，那么你就惨了，他们会把你形容成一 个地痞、流氓、精神病，或者是披着技术皮的地痞、流氓、精神病，极尽所能得让人们认识你的缺陷 （人都有缺陷的，或者说都有会被认为是缺陷的东西）。
b.社会化成熟
保守派的另一个武器就是社会化，如果你得罪了他们，他们就说你还不成熟，不会处理人际关系（也 就是不会处理和他们的人际关系，事实也是如此）。可是问题是谁成熟？什么标准算是成熟？最终回 到了一个结论，社会化的、或者说是屈服保守派的人就是成熟的。
c.地图兵器
保守派的最强武器就是地图兵器了，保守派总是最容易达成共识的（比如说反共联盟、保皇联盟等） ，他们说服你世界是保守的，在哪里都一样。呵呵，也许吧。
3.中立派战术——讲故事
中立派的人最喜欢讲故事，摆出一副同情的样子，各打五十大板，然后给你很多材料，似乎是要帮助 你的感觉，然后再不时的不痛不痒的骂上两句安慰安慰，让人觉得至少不是灌水……
4.无观者（无观点者）战术——灌水
反正跟自己没什么关系的事情，灌水又何妨。
结束语：做人有的时候真的很重要，因为保守派的力量实在太大了，保守是一个相对概念，可以说触 动利害关系的都会成为保守派，而人类一旦觉得自己被冒犯了，绝对不会轻易罢休的，总不能和大多 数为敌吧？共产党的群众路线其实非常先进的，但是如果不能很好发挥教育群众的作用，那么群众路 线最终也只会指向保守吧……不好意思偏题了。
补充：强人日记好久没有新文章的了，无奈BC不是强人呀，所以……</description>
    </item>
    
    <item>
      <title>下雨天</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%8B%E9%9B%A8%E5%A4%A9/</link>
      <pubDate>Tue, 04 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%8B%E9%9B%A8%E5%A4%A9/</guid>
      <description>看完亲戚后就一直在家里呆着，天气阴沉沉的，这两天还下雨，这种时候自己的身体又不太舒服，只能乖乖在家玩电脑。如果没有电脑，还真不知道生活会变成什么样子呢……这两天装了Linux玩，而且是Gentoo+KDE，嘻嘻，装了足足三天，霸占了无数爸妈看片子的时候，终于好了！果然比虚拟机里要快得多（这不是废话吗）！</description>
    </item>
    
    <item>
      <title>变化</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8F%98%E5%8C%96/</link>
      <pubDate>Tue, 20 Sep 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8F%98%E5%8C%96/</guid>
      <description>开学了，可是开学对我的意义是什么？除了卡里扣掉了1200元住宿费，支部书记催着我交党性分析材料，似乎再也没有什么了。的确，人一旦工作了，就很难回到学习的状态，或者说工作中的学习研究，和在学校中的学习研究是不一样的。可是实习的我就处于这样一个矛盾的状态，一边工作、一边又必须应付论文，还要处理学校里各种各样的琐事，也许这也是一种专业吧？毕竟，Professional就必须能够处理好各种各样的事情，不然怎么叫Professional呢？</description>
    </item>
    
    <item>
      <title>蚂蚁喝水</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%9A%82%E8%9A%81%E5%96%9D%E6%B0%B4/</link>
      <pubDate>Sat, 17 Sep 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%9A%82%E8%9A%81%E5%96%9D%E6%B0%B4/</guid>
      <description>平生第一次看到蚂蚁喝水，只见一群小蚂蚁围在一个指甲壳大小的水滴旁，探头探脑的，着实有趣。等过了一会再去看，就看到水没了，蚂蚁也没了，原来蚂蚁也喝水呢，哈哈。</description>
    </item>
    
    <item>
      <title>凄凉的午饭</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%87%84%E5%87%89%E7%9A%84%E5%8D%88%E9%A5%AD/</link>
      <pubDate>Mon, 12 Sep 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%87%84%E5%87%89%E7%9A%84%E5%8D%88%E9%A5%AD/</guid>
      <description>今天中午真的好凄凉啊，出差的出差，开会的开会，要走的被人请去吃饭，带饭的带饭，失踪的失踪。原本至少七八个人的桌子，只剩下两个人吃饭，冷冷清清的。少了平时的海阔天空、互相嘲讽，这顿饭吃得真没意思。可能是一个地方待得久了就会厌倦吧，是该换地方吃饭了。</description>
    </item>
    
    <item>
      <title>开会</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%BC%80%E4%BC%9A/</link>
      <pubDate>Thu, 08 Sep 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%BC%80%E4%BC%9A/</guid>
      <description>今天BC在开会结束后偶然瞥见墙上有这么一张纸，上面写着：
会议成本=每小时平均工资x3x2x参加人数x会议时间。x3是因为工作产值总是工资要高，X2是因为参加者必须中断日常的工作，中断造成的损失更大，所以请尽量减少参加人数和会议时间吧。
想想做学生干部的时候最多的就是开会，而且效率都极低，然后这些学生干部们把这种“习惯”带到了国企核心部门，怪不得国企的效率也这么低呢，原来是开会开得呀……</description>
    </item>
    
    <item>
      <title>换机子了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%8D%A2%E6%9C%BA%E5%AD%90%E4%BA%86/</link>
      <pubDate>Tue, 06 Sep 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%8D%A2%E6%9C%BA%E5%AD%90%E4%BA%86/</guid>
      <description>工作以后才发现，原来工作也是很影响心情的，总以为能够把生活和工作分的很好，但是原来工作上的不顺也会使得生活上的情绪受到影响。这两天是在没什么事情做，装完系统就是看文档，想练习练习，可是1.7G+1G的本本根本奔不动。同济的前辈要走了，就把他的好宝贝给了我，3.06G+2G，运行三个虚拟机都不抖一下，简直就是一台服务器的配置，哈哈！</description>
    </item>
    
    <item>
      <title>点名游戏：此生最大的遗憾是什么？</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%82%B9%E5%90%8D%E6%B8%B8%E6%88%8F%E6%AD%A4%E7%94%9F%E6%9C%80%E5%A4%A7%E7%9A%84%E9%81%97%E6%86%BE%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Tue, 06 Sep 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%82%B9%E5%90%8D%E6%B8%B8%E6%88%8F%E6%AD%A4%E7%94%9F%E6%9C%80%E5%A4%A7%E7%9A%84%E9%81%97%E6%86%BE%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>注解：这是一个点名游戏，即由一个人在自己的blog里出一题目，并点名由谁回答，被点到名的人在自己的blog上写下答案，并再出一题，然后把题目丢给另外五个人，类似于接龙游戏也有点象BBS的真心话游戏。
因为还没过完此生，所以就说说到现在最大的遗憾吧，^_^。
可是想来想去不同的遗憾也不能比较呢，那就分门别类来说吧。首先比较实际的遗憾就是进了上大，为什么这么说呢？因为本来是能够尽更好的学校的（因为某些原因，这些原因大概只有5个人知道），失去的不仅是前途，更是和曾经好友平等交流的自信，而现在不得不有些妄自菲薄了……
情感上的遗憾则是曾经没有对一个MM的暗示做回应，最后还弄到很糟糕的境地……不过还好，现在她也有男朋友，而我也有了喜欢的人，也不算特别糟糕了。
不过回过来想想，其实也没什么，也许是BC记性不太好吧（这是一个引以为豪的特点，比较不容易记住受伤的时候），尽管有那些很遗憾的事情，可是脑子里记得的总是开心和快乐，哈哈，为什么不快乐呢？
好了，现在我来提问题，点名下一个名了：
我的问题是： 那些是你生平最爽最露脸的时候？
被点名的人是: MyDream 小憨 小玮 FeltonKing JieJie</description>
    </item>
    
    <item>
      <title>喜新厌旧</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%96%9C%E6%96%B0%E5%8E%8C%E6%97%A7/</link>
      <pubDate>Thu, 01 Sep 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%96%9C%E6%96%B0%E5%8E%8C%E6%97%A7/</guid>
      <description>刚刚为了给妈妈下载《青青草》，一下子把很多老游戏给删除了，可是还不够，于是就把星球大战也删了。本来还想好好看完然后写观后感的，但是实在受不了那种70年代的风格，一切看起来都是那么做作和那假，于是就放弃了星球大战复习计划……BC就是那么容易喜新厌旧，也难怪，因为新的东西总是那么神奇和富有吸引力，新的动画片、新的电影、新的游戏、新的软件、新的操作系统……新的东西充斥着BC的电脑，可是也并非“年龄”小就算新，如果能够不断创新，还是值得看的。所以归结为一点，就是必须不断的发展和变化。</description>
    </item>
    
    <item>
      <title>开学没劲</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%BC%80%E5%AD%A6%E6%B2%A1%E5%8A%B2/</link>
      <pubDate>Mon, 29 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%BC%80%E5%AD%A6%E6%B2%A1%E5%8A%B2/</guid>
      <description>周一上班，怎么就这么困呢？BC趴在写字台上睡着了，口水已经流到键盘上了（Thinkpad以后应该防水），梦里面老板发钱了，厚厚一叠，BC数得正开心就被叫醒做事了……今天真的挺郁闷的，装一个软件装了一天，剩下的时间就在看文章。这个礼拜学校开学了，导师要招我们开会，BC要第一次请假了。开学真是麻烦，要还书、要开会、要交作业、要写文章……两个字：没劲！</description>
    </item>
    
    <item>
      <title>万能钥匙</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99/</link>
      <pubDate>Sat, 27 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99/</guid>
      <description>刚才看了一部惊悚片《万能钥匙》，首先告诉大家的是，这不是一部鬼怪片（不太喜欢看鬼怪类型的恐怖片），所以请大家放心，但是整部电影的基调还是挺恐怖的，^_^。一开始以为只是传统的谋财害命、贪图家产类型的片子，但是随着情节的深入，让观众（包括主角）一步步走向电影设下的陷阱，最后五分钟搞定全部内容……太喜欢惊悚片了，真是物有所值呀，而且这部片子好像还蛮新的，BC是全力推荐呀！详细介绍请见这里</description>
    </item>
    
    <item>
      <title>苏州阴云天，上海下雨天</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%8B%8F%E5%B7%9E%E9%98%B4%E4%BA%91%E5%A4%A9%E4%B8%8A%E6%B5%B7%E4%B8%8B%E9%9B%A8%E5%A4%A9/</link>
      <pubDate>Sat, 27 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%8B%8F%E5%B7%9E%E9%98%B4%E4%BA%91%E5%A4%A9%E4%B8%8A%E6%B5%B7%E4%B8%8B%E9%9B%A8%E5%A4%A9/</guid>
      <description>这种时候呆在家里玩电脑是最开心的事情了，虽然地铁涨价了，美女减少了（男女比例失调）、超女结束了、房价还是挺高，但至少现在这个时候，让BC好好享受清闲的时光。这两天疯狂寻找BC以前同学的MSN，一下子BC的MSN列表Double了，最尴尬的是很多人过来问我是谁的时候，我竟然连他们是谁也不知道，最后只能不好意思问，还好大家也不是特别计较这些。公司里面也随着超女的结束，恢复了往日的平静。周末真好！^_^
可是也有不好的，看了动漫节目后，深深地觉得自己好就没看动漫、电影和打游戏了，工作以后都没有什么娱乐活动了，唯一的活动就是和MM逛街，有时候觉得硬盘坏的真不是时候（原因见以前的日志：硬盘坏了）。
虽然自己没什么文笔（有了电脑就再没碰过笔，套MM同学的话，不是办公无纸化，而是办公无笔化），但是时间长了，回过头来自娱自乐也挺有趣的。</description>
    </item>
    
    <item>
      <title>跟风</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%B7%9F%E9%A3%8E/</link>
      <pubDate>Wed, 24 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%B7%9F%E9%A3%8E/</guid>
      <description>今天BC在和同事聊天的时候，听他们讲现在很多综艺节目都搞起短信拉票，就因为此次超女的短信收入过千万，这让BC不禁感到国人最擅长的就是模仿和跟风（还有盗版）。
从莱卡超女到美丽中学生，从短信支持到快乐大本营的主持人拉票，从MSN空间到朋友圈Q-Zone，从BBS博客到维基播客……国人很好的继承了鲁迅的拿来主义，而我们也在问着为什么国外的生活比我们先进n年的同时，享受着从国外引进的延迟的幸福。
也许创新真的很难，以至于诺大一个中国不全球化就发展不下去了。其实就个人来说，BC也没办法超脱，经常从别人那里批发来思想，然后自己搅和搅和就拿给别人。这点的话教授博士们最擅长了，不然哪里有这么多论文哦~</description>
    </item>
    
    <item>
      <title>流水账</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%B5%81%E6%B0%B4%E8%B4%A6/</link>
      <pubDate>Sun, 21 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%B5%81%E6%B0%B4%E8%B4%A6/</guid>
      <description>好久没有写日志了，关键在于没什么可写的。工作进入了死胡同，总是看文档，装服务器，没有实际接触用户，也没有Schedule的压力，如果不是每天玩LFS的话，真的会闷死。LFS真的很麻烦，就算照着书打命令，BC也已经打了至少两遍了，现在才装到一半，唉，也不知道最后值不值得呢。
BC的MM这两天发脾气，因为BC不太主动，^_^，所以周六BC就买了小礼物送给MM，哈哈，果然MM还是喜欢礼物的，就原谅了BC。可是，下周就是MM生日了，BC已经没多少预算买新的礼物了，怎么办来……
自从家里装了ADSL，BC反而发现没什么好的，网速快反而没什么事情做呢，呵呵。</description>
    </item>
    
    <item>
      <title>身体是自己的</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%BA%AB%E4%BD%93%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84/</link>
      <pubDate>Wed, 17 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%BA%AB%E4%BD%93%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84/</guid>
      <description>刚才吃午饭的时候，听同事说在微软加班的恐怖，甚至已经出现了几例猝死的情况。BC听了异常恐怖，想想现在的工作还是比较轻松的，以后可不能太拼命，毕竟身体是自己的。
这两天BC玩起了LFS，想陆陆续续地把自己的一点新的贴出来，特别是Book里没有的，先写一条吧：Host Linux不要忘记装Development套件，最重要的是Yacc Flex等编译工具。</description>
    </item>
    
    <item>
      <title>缺陷美</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%BC%BA%E9%99%B7%E7%BE%8E/</link>
      <pubDate>Sun, 14 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%BC%BA%E9%99%B7%E7%BE%8E/</guid>
      <description>缺陷是一种美，而完美则是美中之美。—— Balzac的MM
 今天BC的MM说了一句很经典的话，说缺陷是一种美，而完美就比缺陷美更美。的确如此，相信辩证哲学的我们总是被灌输这样一种想法，世界上没有绝对的真理，也就不存在完美，换句话说，就是不存在个方面都完美的存在。缺陷美就是一种承认缺陷存在，同时注重整体效果的观点，在艺术上如此，在其他地方不知道。其实缺陷美并非比完美缺陷一点，比如说维纳斯的手臂，如果只是维纳斯的手指断掉，那维纳斯是不是也会如此出名呢？所以说艺术上的缺陷美事实上是指整体上的一种更好的效果，而并非在任何领域都适用。我们总是希望各方面都能做到最好，为什么呢？因为完美永远是我们最大的目标和诱惑，因为完美是美中之美，BC强人理论的最基础。</description>
    </item>
    
    <item>
      <title>忘记自己的普通也是一种普通</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%BF%98%E8%AE%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%99%AE%E9%80%9A%E4%B9%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E6%99%AE%E9%80%9A/</link>
      <pubDate>Sat, 13 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%BF%98%E8%AE%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%99%AE%E9%80%9A%E4%B9%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E6%99%AE%E9%80%9A/</guid>
      <description>人总是愚蠢到遗忘自己的普通，而且还不断的去显露。—— Balzac
 刚才游泳回来弄得很不开心，原来一直忘记了自己非常不喜欢水，一下水便感到了不爽，任性的BC便一个人甩了大伙儿回来了。人们总是容易忘记自己害怕或者不喜欢的经历，然后为了意气用事或者其他迁就的理由而去尝试伤害自己，人总是那么的愚蠢，以为自己在各方面都是强人，但是忘记了在更多的方面确是普通人，看来BC也不能超脱这个范围呢，所以说想做一个强人就必须时时刻刻的记住自己所有的普通之处。</description>
    </item>
    
    <item>
      <title>七夕</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%83%E5%A4%95/</link>
      <pubDate>Fri, 12 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%83%E5%A4%95/</guid>
      <description>BC周四本来没什么打算（被MM批了一顿），但是中午听同事大谈七夕，还说要请假看MM，说得BC很难为情的。后来下午做事的时候，听了张学友的《她来听我的演唱会》，感觉事事变化过快，有很多事情如果现时不好好把握，留下遗憾就不好了。也奇了，又听了一首冰冷北半球，歌词里有牛郎织女，BC一下就就很想见MM的，于是下班后就直接登上518……
MM很高兴，BC也很高兴，我想大家都应该很高兴吧，^_^，祝天下情人七夕快乐！</description>
    </item>
    
    <item>
      <title>时事杂谈</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%97%B6%E4%BA%8B%E6%9D%82%E8%B0%88/</link>
      <pubDate>Fri, 12 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%97%B6%E4%BA%8B%E6%9D%82%E8%B0%88/</guid>
      <description>在一个常去的Space看到这样一条评论，说上海的房价完全是由国际炒家炒作的，因为上海老百姓根本没有北京和广州有钱（贫富差距大，收入增长相同），而且北京人和广州人不喜欢住市中心，地方比上海大几倍，人却比上海少得多，国际储备1000亿资金里有300亿时说不清楚来路的，唉，中国的监管部门真差。而且还提高国外最强的学院是商学院，有能力的人都去从商，可中国呢，有能力的人都搞IT，硬是要跟BC竞争，难怪这么点简单得经济原则都不懂的。
老妈说医药改革实际上富了药贩子，评价药房的存在证明了药的利润是多么的高，这种垄断后遗症是在太严重了，垄断不仅增大了贫富差距，还在人们心里造就了垄断就是赚钱的概念，连北京一个问讯处还要搞垄断，这年头中产阶级的负担真重。</description>
    </item>
    
    <item>
      <title>由CQ看定制类软件</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%94%B1cq%E7%9C%8B%E5%AE%9A%E5%88%B6%E7%B1%BB%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Fri, 12 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%94%B1cq%E7%9C%8B%E5%AE%9A%E5%88%B6%E7%B1%BB%E8%BD%AF%E4%BB%B6/</guid>
      <description>搞定了CC（在高手的帮助下）后，BC接下来开始学习CQ。CC虽然同CVS、SouceSafe一样是版本控制软件，但是其安全机制非常复杂，客户为了能够顺利使用CC必须遵循一套完整的规则，客户认证从License管理、域账户控制、文件系统安全到服务器各类对象所有权机制等，源代码和文档的重要性可见一斑。同CC一样，CQ也是实现了Defect管理和UCM的软件，但CQ其实是一款定制类软件。
一开始接触CQ的时候觉得就是普通的IMS，但是由于其类似数据库的三层结构，实现了跨平台、跨C/S和B/S，甚至跨M/S（Mail/Server）。这还不是令人惊奇的，更神奇的是CQ的无限可定制能力，能够满足各种对象管理，以及对象生命周期管理，从Defect到UCM，从单纯Test到整合这个项目开发，CQ能够完美的满足用户的需求（当然是在管理员辛勤的努力下咯）。而且可定制报表还能让PM和Lead掌握进度等信息，各种Hook可用Script实现（Unix下面用Perl哦，BC刚会的）。CQ的安全机制并不复杂，除了Client的身份识别，还有后台数据库的身份认证（后台数据库支持Oracle、DB2、SqlAnywhere，好像没有Sqlserver，是不是BC机错了呀）。
所以说现在要做个软件不难，要做个全球化、跨平台、跨语言、可定制的软件就难了，现在应用逻辑已经慢慢从软件核心转移到外围，正是应了这种趋势，而且二次开发也成为了一种要求，可定制……实在太强了。</description>
    </item>
    
    <item>
      <title>星球大战：新的希望</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98%E6%96%B0%E7%9A%84%E5%B8%8C%E6%9C%9B/</link>
      <pubDate>Tue, 09 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98%E6%96%B0%E7%9A%84%E5%B8%8C%E6%9C%9B/</guid>
      <description>看完了新的星球大战，再看1977年拍的新的希望不免有很多的不满。第四部内容发生在第三部约二十年后，阿纳金的儿子路克和女儿莉亚都长大成人了，被某议员（忘记名字了）收养的莉亚公主也成为了帝国议会议员，充当反抗军的间谍，并得到了帝国武器——死亡星球的设计图（在第二部里提到过的）。但是西斯解散了帝国议会，并逮捕了莉亚公主，莉娅在被捕前将设计图交给R2带到了阿纳金的故乡——塔图因。意外获得R2和3PO的路克，遇到了老了的欧比王.肯诺比，在叔叔和婶婶被帝国军杀害后（这点路克比阿纳金有优势，阿纳金因为亲人被害而造成了阴影，害怕再失去妻子而误入了黑暗，路克倒好，亲人提前没了，无牵无挂，没有弱点了），随欧比王一同将设计图送还给反叛军，在FreeLancer索罗（感觉像硬加出来的人物，而且比路克出彩多了）和猿人的帮助下到达了叛军基地。经过大量拖时间的内容后……死亡星球到达了叛军基地，叛军们在最后时刻依靠路克的Force（也就是凭感觉，呵呵）击溃了死亡星球。
可以说第四部的内容根本没多少，但是拖了很长的时间，而且有很多BC看了很不爽的东西： 1. 帝国军的盔甲：几块塑料板，根本没前几部帅，而且克隆人都不露脸的 2. 猥琐的阿纳金：第四部里一点霸气也没有，根本不想最强的杰达武士 3. 丰满的莉亚公主：呵呵，除了胸大，根本比不上纳塔丽…… 4. 灯管+激光剑：杰达武士的激光剑傻到极点了 5. 不见踪影的舰队：除了死亡星球和小飞机外，没有任何大型战舰，模型也挺难做的 6. 抖动的战斗机：战斗机飞行的时候抖动得厉害，就像纸糊的 7. 假假的打斗：杰达武士单挑更是大量依靠剪辑 8. 完全没有大场面…… ……
不知道BC是不是能够继续撑下去，奉劝大家还是先看456再看123比较好。想想当时卢卡斯先拍456也是有道理的，大量战争场面（黑幕+模型）总比对先进城市、外星风光和生物的描绘要简单得多。70年代美国明星的风格真傻……</description>
    </item>
    
    <item>
      <title>Active Directory架设补充</title>
      <link>http://blog.zhouyiyan.cn/blog/active-directory%E6%9E%B6%E8%AE%BE%E8%A1%A5%E5%85%85/</link>
      <pubDate>Mon, 08 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/active-directory%E6%9E%B6%E8%AE%BE%E8%A1%A5%E5%85%85/</guid>
      <description>接着上回在局域网内用Win2000 Server架设Active Directory后，如果发现域控制器经常当机，可以通过通过在一个域内架设两个域控制器来提供安全性。操作系统的帮助文件在很不起眼的地方说明了，单一域内多个域控制器能够提高性能并且增强容错能力，但是怎样做它并没有细说，只是提到了单一主操作的概念。单一主操作（Single Master Operation）是指在同一个域内，仅能由一个域控制器进行的操作，这类操作不能通过多个域控制器进行。在Active Directory Site and Trust里面可以设置由谁来作为Master，但是这样一来不还是一种集中式管理吗？而且主控制器当掉后，辅助控制器能不能立即发挥作用还是个问题，因为DNS里面记录的域控制器只有主控制器而已，能不能自动切换还有待BC下次作了实验才知道。但是多个域控制器的作用还是很明显的，首先，如果主控制器坏掉，通过手工设置DNS和应用服务器能够很快的切换成辅控制器操作，给修复主控制器赢得了时间；其次，通过分流连接和账户的备份，也能够间接的提高主控制器的可使用性。
唉，大学里面竟知道好好学习了，好多东西都没玩过，这种组网什么的应该是很简单才对的，现在搞成这个样子……</description>
    </item>
    
    <item>
      <title>打折的实质</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%89%93%E6%8A%98%E7%9A%84%E5%AE%9E%E8%B4%A8/</link>
      <pubDate>Sun, 07 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%89%93%E6%8A%98%E7%9A%84%E5%AE%9E%E8%B4%A8/</guid>
      <description>生产的衣服分成三类：一类以原价上市，卖给那些追寻潮流的人们；第二类在换季或商厦活动是打折，卖给那些追求实惠的人们；第三类就在仓库里积压着，买给那些小店或者仓库老板的亲戚们。大家在网上小店里买的可能就是第三类衣服哦，所以打折扣什么的本来就应该的，进价可能只有一折呢。BC的MM的一个亲戚就有个仓库，里面很多都是韩国品牌的服饰，很多只有十几元，恐怖吧。其实很多东西都是这样的，特别是书、服饰、食品那些成本很低的商品，网上打折什么的其实是很正常的，因为进价就很低的。</description>
    </item>
    
    <item>
      <title>Win2000 Server &#43; Active Directory简单攻略</title>
      <link>http://blog.zhouyiyan.cn/blog/win2000-server-&#43;-active-directory%E7%AE%80%E5%8D%95%E6%94%BB%E7%95%A5/</link>
      <pubDate>Sat, 06 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/win2000-server-&#43;-active-directory%E7%AE%80%E5%8D%95%E6%94%BB%E7%95%A5/</guid>
      <description>这是一个Step by Step的指南，是我花了两天时间才搞清楚的过程，虽然实际上是比较简单的，其间碰到了无数的问题，在这里作一个总结，与大家分享经验。
 得到相关文档：  约定管理员密码 域控制器的域名 密码设定规则（将来密码创建所必须遵循的规则） 出示用户和组（包括管理员）  找一台一般的PC连到局域网上（我用的是PIII-600+256M） 安装Win2000 Server（安装完立刻打补丁，再安全的地方都有冲击波呢） 安装杀毒软件，千万不要装防火墙（有些防火墙太强了，服务器都没办法工作了） 使用向导设置Active Directory，设定域名和管理员密码 设置用户和组、密码设定规则 大功告成，先别急着高兴，最后再用ghost备份一下，天知道会发生什么事情呢，可别白干了 ^_^  </description>
    </item>
    
    <item>
      <title>时间过得真快</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%97%B6%E9%97%B4%E8%BF%87%E5%BE%97%E7%9C%9F%E5%BF%AB/</link>
      <pubDate>Thu, 04 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%97%B6%E9%97%B4%E8%BF%87%E5%BE%97%E7%9C%9F%E5%BF%AB/</guid>
      <description>今天不像昨天那样一直看书，做了很多的事情，先是拿到了NotesID，然后装了CC的客户端，开了个会，看到组长狂被人批，发觉要提供服务还真是麻烦，快下班的时候还被叫去装域服务器，现在发觉自己真成了网管了，呵呵。
服务真的很重要的，现在就强调要给解决方案，而不是单单的产品，这就要求很多非技术方面的东西，看来还是有很多要学的呢。</description>
    </item>
    
    <item>
      <title>星球大战：西斯的复仇</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98%E8%A5%BF%E6%96%AF%E7%9A%84%E5%A4%8D%E4%BB%87/</link>
      <pubDate>Thu, 04 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98%E8%A5%BF%E6%96%AF%E7%9A%84%E5%A4%8D%E4%BB%87/</guid>
      <description>作为整个系列的第三弹，西斯的复仇在情节上相当简单，阿纳金在西斯大帝的诱惑下投靠了黑暗一方，而共和国也蜕变成银河帝国，而且阿纳金的老婆竟然也是他自己害死的（很讽刺的，所以能够预见未来也并非好事情），纳塔莉.波特曼在这部里面没有什么特别的表现（可惜……）。本来对于阿纳金思想的变化应该着重描写的，虽然电影已经描述的很好了，但是BC还是觉得变化有些过快，有些理论很难让人信服。为了和第四部衔接好，很多帝国军的服装也恢复到了第四部的装束（德国人的样子，似乎外国人心目中的帝国形象就是罗马或者德国），而且也交待了鲁克和李娜的情况。接下来就要看三十年前的版本了，不知道能不能接受呢，呵呵。</description>
    </item>
    
    <item>
      <title>Struts中文问题的解决</title>
      <link>http://blog.zhouyiyan.cn/blog/struts%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Wed, 03 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/struts%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</guid>
      <description>jsp页面 request对象 URL        struts的中文乱码问题主要存在3个地方：
jsp页面 设置&amp;lt;%@ page contentType=&amp;ldquo;text/html;charset=UTF-8&amp;rdquo; %&amp;gt;。
request对象 中文数据在经过struts处理过的request后会有乱码问题。这个问题有几种解决方法，最简单的是从ActionServlet中继承一个MyActionServlet类，代码如下：
public class MyActionServlet extends ActionServlet { protected void process(HttpServletRequest request, HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { request.setCharacterEncoding(&amp;quot;UTF-8&amp;quot;); super.process(request, response); } }  别忘了在web.xml中设置，内容如下：
&amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;com.shu.imrdes.global.MyActionServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;config&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;/WEB-INF/struts-config.xml&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;debug&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;3&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;detail&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;3&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;0&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.</description>
    </item>
    
    <item>
      <title>今天签约了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BB%8A%E5%A4%A9%E7%AD%BE%E7%BA%A6%E4%BA%86/</link>
      <pubDate>Wed, 03 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BB%8A%E5%A4%A9%E7%AD%BE%E7%BA%A6%E4%BA%86/</guid>
      <description>BC今天看文档的时候接到人事部电话，原来是让BC去签协议。干了这么长时间，BC也不敢问待遇的事情，今天拿到协议一看，每小时20元，呵呵……虽然不多，但是一个月下来也有……1……2……3……反正不少，^_^。不过学生的话好象只是跟中智签的约，不管这么多了，反正有地方待就好。
今天BC看了一天的文档，看完狂晕，原来做个管理员也不是那么容易的。以前一直鄙视管理员，认为他们只是配置配置，搭搭网线，现在才发现管理员要学的东西还真的很多。而且管理员不光光跟系统打交道，还要为用户服务的，素质绝对高。现在BC对Linux一窍不通，服务器也还没摸过，CC和CQ也是一知半解，路还长着呢。</description>
    </item>
    
    <item>
      <title>星球大战：克隆人的进攻</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98%E5%85%8B%E9%9A%86%E4%BA%BA%E7%9A%84%E8%BF%9B%E6%94%BB/</link>
      <pubDate>Tue, 02 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98%E5%85%8B%E9%9A%86%E4%BA%BA%E7%9A%84%E8%BF%9B%E6%94%BB/</guid>
      <description>终于看完克隆人的进攻了，再看一遍有了新感受。在看《银英传》（别说不知道哦）以后，BC就对这种共和和独裁的讨论特别敏感，这第二部星球大战也有一点这样的味道。话说十年后，贸易联盟和其他星系联盟要脱离共和国，于是共和国议会提议建立自己的军队，而那卜参议员正赶往共和国参加投票（纳塔莉长大了三岁，女人味十足了），针对帕米的恐怖袭击迫使杰达议会派遣长大后的天行者保护帕米，同时派遣欧比王（天行者的师傅，第一部中的小徒弟，过了十年络腮胡了）调查凶手。原来西斯故意让杜库说服贸易联盟反叛，然后又故意引诱欧比王发现他们十年前订购的克隆人军队，原本平衡的势力，西斯通过增强其中一方的实力，迫使议会建立共和国军（也就是后来帝国军的主力），达到了自己的目的。虽然杰达武士们以为破坏了杜库的阴谋，组织了贸易联盟的分裂势力，但是结果谁知道呢？历史背后的势力总是最强大的，但是一旦走到历史前面，也会被历史所吞噬。</description>
    </item>
    
    <item>
      <title>软件开发是什么</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Tue, 02 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>workflow的重要性 CC和CQ        今天在学习CC和CQ的时候重新学习这样一个概念，软件开发（Software Development）。开发的英文Development主要涉及改进Improve而非创造Create，所以软件开发实际上是一种软件改进的过程，这个过程包括：
 修正缺陷 增强已有功能 增加新的特性 增加新的平台支持 客户驱动的特殊项目 国际化  学校里面只能学到123，其中1和2也讲得很少，实际当中在外企中国的技术人员只能做456，还轮不到123呢。
workflow的重要性 工作流真的很重要，今天听一个技术人员将他们做的信息反馈系统（这种东西在学校似乎是很简单的东西），但那个人几乎每用任何技术词汇，完全适用工作流来解释这套系统，让BC觉得很强。设计工作流就好像设计数学模型一样，开发其实并不难的。
CC和CQ BC开始学习CC和CQ了，自己给自己贴篇文章：Rational ClearQuest使用说明书。
（昨天的代码没写完所以不能公布了，因为BC现在转到RIS小组，原来的测试暂时不做了。）</description>
    </item>
    
    <item>
      <title>RFT经验技巧</title>
      <link>http://blog.zhouyiyan.cn/blog/rft%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/rft%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/</guid>
      <description>在IBM实习了的这两个礼拜一直在做测试，所以对RFT(Rational Functional Tester)的使用也有了一点积累，先总结一下。
WebUI测试中对象属性的获取 在Web环境下，对象属性的获取必须分情况考虑，而不是直接调用.getProperty方法。对于静态对象属性，只要考虑对象捕捉失败的情况就可以了，但是对于动态对象属性（即依赖浏览器载入的属性）必须考虑载入时间，永远要假设最坏情况（比如服务器在美国，或者真的存在错误），同时对于不同层次的调用，还要提供可选择的异常处理和日志记录功能，代码如下：
public String getPropFromObj( TestObject to, String prop, int TTL, boolean doLog) throws Exception { if (TTL == 0) return &amp;quot;&amp;quot;; //Time to Live assert (to != null); assert (to.getProperties().containsKey(prop)); try { String text = to.getProperty(prop).toString().trim(); if (text == null || text.length() == 0) { return getPropFromObj(to, prop, TTL-1, doLog); } return text; } catch (Exception e) { if (TTL &amp;gt; 1) return getPropFromObj(to, prop, TTL-1, doLog); String msgErr = &amp;quot;Can&#39;t get property(&amp;quot; + prop + &amp;quot;) from object &amp;quot; + to.</description>
    </item>
    
    <item>
      <title>大白天抢劫，广州太恐怖了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%A4%A7%E7%99%BD%E5%A4%A9%E6%8A%A2%E5%8A%AB%E5%B9%BF%E5%B7%9E%E5%A4%AA%E6%81%90%E6%80%96%E4%BA%86/</link>
      <pubDate>Mon, 01 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%A4%A7%E7%99%BD%E5%A4%A9%E6%8A%A2%E5%8A%AB%E5%B9%BF%E5%B7%9E%E5%A4%AA%E6%81%90%E6%80%96%E4%BA%86/</guid>
      <description>BC刚刚看完一段广州光天化日抢劫的录像，地址没办法贴出来，看完以后真是震撼呀，听同事说在广州，他的一个亲戚被明抢了很多次了，社会治安实在太差了。还好上海这种事情好像比较少，不然BC要考虑搬家了。</description>
    </item>
    
    <item>
      <title>.Net下OpenGl库</title>
      <link>http://blog.zhouyiyan.cn/blog/dotnet%E4%B8%8Bopengl%E5%BA%93/</link>
      <pubDate>Sun, 31 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/dotnet%E4%B8%8Bopengl%E5%BA%93/</guid>
      <description>微软提供较少的标准支持，对于和他们竞争的东西—比如CORBA(COM的竞争对手)和OpenGL(DirectX的竞争对手)。不过在C＃中实现OpenGL也并非没有可能，有很多很好的第3方库可以使用，这里列举2个。
 CsGL 名气较大的OpenGL库，有稳定版本。sf上的项目地址: http://sourceforge.net/project/showfiles.php?group_id=33241。目前有多个3D引擎项目使用的这个库。
 CSopenGL 有较详细的文档和例子。sf上的项目地址: http://sourceforge.net/project/showfiles.php?group_id=54966&amp;amp;package_id=49782。
  </description>
    </item>
    
    <item>
      <title>世界大战</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98/</link>
      <pubDate>Sun, 31 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98/</guid>
      <description>大热天一个人看片子真是一种享受，刚刚看完汤姆.克鲁斯主演的世界大战，真是一部好片子。这是一部根据早期科幻小说改编的电影，小说的内容不记得了，第一次接触好像是一个不怎么样的PC游戏，讲述外星人侵略地球，地球如何自我保卫等等。电影则从另外一个角度叙述了这场战争，描绘的相当成功。
外星人：电影里面的外星人是三脚的火星人（ET）模样，身体脆弱需要血液作为养料来生存，有点像爬行类（外星人总被描绘成比较低级的样子，呵呵）。最后外星之所以被打败，也是因为外星人被细菌或病毒感染了，没有抵抗力。（估计是艾滋病什么的，外星人受不了啦）
巨型机器人：外星人的主战兵种，游戏里面也没多少，不过比坦克什么的就强多了，可惜要不停的捕捉人类生物做养料，而且吸收养料的地方竟然一点防护也没有，晕~。最大的缺陷就是当大量小型物体接近时，护盾无法打开，本身的血腥味引来乌鸦，最后连护盾也没了，果然大型物体就是不好。
Ray：汤姆.克鲁斯演绎得相当成功，一个不太照顾和关注家庭的男人，照顾和前妻生的孩子，而且又没什么本事（但住的是房子，不是房间哦）。但是作为父亲的责任，就是在危难时刻引导家庭。看上去Ray在不停的逃避，但是他保护了家庭，将孩子平安的带回前妻身边。这个人物有缺点也有优点，欣赏~
Roby：Ray的儿子，这个人戏份不多，不停的跟Ray对着干，演得也不怎么样。
Rachiel：Ray的女儿（不怎么好看），神经至极，整场戏不停的就是她的尖叫，烦都烦死了（心理健康最重要）。
“疯子”们：为了生存而战斗或逃难，人们在生死存亡面前所表现出来的愚蠢和野蛮，是BC我最喜欢看的。</description>
    </item>
    
    <item>
      <title>蝙蝠侠：开战时刻</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%9D%99%E8%9D%A0%E4%BE%A0%E5%BC%80%E6%88%98%E6%97%B6%E5%88%BB/</link>
      <pubDate>Sun, 31 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%9D%99%E8%9D%A0%E4%BE%A0%E5%BC%80%E6%88%98%E6%97%B6%E5%88%BB/</guid>
      <description>早上和室友看蝙蝠侠5，可惜是俄文版本的，而且字幕也不好，看得很累。没想到蝙蝠侠原来竟是半路出家做过忍者的，就因为日资进入好莱坞，东方功夫就离不开空手道、柔道和忍者之类的，没劲。而且当中还有像解放战争时国民党士兵样的中国人跑龙套，好莱坞里面中国人基本上全是求辱的。不过画面还真是火爆，想想蝙蝠侠1和2里面多傻啊，就是肌肉男乱打一通，好不容易怪博士的演技，还被批评盖过了蝙蝠侠的风头，现在都流行拍前传，除了画面和技巧之外，演技提高的不是很多。
突然想起超人和蜘蛛侠，发掘最富的还是蝙蝠侠，超人至少还是正规记者，蜘蛛侠最惨了，FreeLancer一个，呵呵。同样是英雄，待遇真不同哦。</description>
    </item>
    
    <item>
      <title>保先告一段落了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E4%BF%9D%E5%85%88%E5%91%8A%E4%B8%80%E6%AE%B5%E8%90%BD%E4%BA%86/</link>
      <pubDate>Sat, 30 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E4%BF%9D%E5%85%88%E5%91%8A%E4%B8%80%E6%AE%B5%E8%90%BD%E4%BA%86/</guid>
      <description>党的先进性体现于先进的理论和思想，一心为他并非一种绝对先进的思想，创造一个人人为人人的社会制度才是最根本的，发展生产力不能解决全部问题，因此保持先进非常重要。党员不单单是高尚的人，更是意志坚强的铁人，使狂热与宣扬自己信念的传教士，适用于对抗反对思想的战士，是能够领导他人共同进步的领导者。目前的党存在很多保守的地方，但这部不妨碍党通过党员的先进来贯彻自己的先进性。</description>
    </item>
    
    <item>
      <title>先进？制度？奉献？</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%85%88%E8%BF%9B%E5%88%B6%E5%BA%A6%E5%A5%89%E7%8C%AE/</link>
      <pubDate>Sat, 30 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%85%88%E8%BF%9B%E5%88%B6%E5%BA%A6%E5%A5%89%E7%8C%AE/</guid>
      <description>好的组织制度完全符合个人的利益。
 个人的培养同制度的发展一样，都必须经历相当的过程，不可能一步到位。正如同社会制度必须经历资本积累的阶段一样，以生产力为根本的制度实际上淡化了生产关系。同样以先进为根本的个人培养也会这样或那样的却是某些东西。
先进也是一种精神功利。事实上人活着必须有理由，有信仰，共产党人并不排斥谈自己的信仰，但是认为自己的信仰是唯一的先进，就好像犹太人认为自己是唯一被神宠爱的民族一样可笑。执政并非因为先进，而是因为没有人能够更好的领导中华民族走向自强。面对这样大的民族，以自我利益为根本的资产阶级政党是很难有所作为的，被推翻也是必然。
奉献生命究竟值不值得？没有人能够回答这样的问题，只能说大多数生命的奉献往往出于无奈或者冲动，没有人会在深思熟虑后得出放弃自己生命的决定，作出这样决定的人是自私的，也是无私的。但我仍然认为，在目前的环境下，好的制度不需要个人完全无私的奉献，至少不是强制的。
生产力永远不是先进的唯一标准，人民的支持也不是，不然美国就是最先进的。先进的标准是什么？实践是检验真理的唯一标准，那谁来检验先进呢？
理想信念真的是永恒不变的吗？从消灭资产，到联合民族资产，从发展无谄，到全民的先锋队，我们的党在变化，这种变化是不能明说，只能心里偷着明白的。
谁最简朴？如果按支出来说，是乞丐。如果按支出收入比来说，是富翁。</description>
    </item>
    
    <item>
      <title>史密斯夫妇</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8F%B2%E5%AF%86%E6%96%AF%E5%A4%AB%E5%A6%87/</link>
      <pubDate>Sat, 30 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8F%B2%E5%AF%86%E6%96%AF%E5%A4%AB%E5%A6%87/</guid>
      <description>虽然放电影的硬盘没了，还是改不了看片子的毛病，刚才又载了史密斯夫妇来看。看完觉得其实挺一般的，若不是布拉德.皮特和安吉利娜.朱莉的名气，情节和手法上没什么神奇的地方。要不是搏击俱乐部，也不会关注布拉德.皮特的，也就凑个热闹，看看杀手之间怎么斗智斗勇。结论：不推荐看（除非喜欢这两个人）</description>
    </item>
    
    <item>
      <title>搬好家了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%90%AC%E5%A5%BD%E5%AE%B6%E4%BA%86/</link>
      <pubDate>Sat, 30 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%90%AC%E5%A5%BD%E5%AE%B6%E4%BA%86/</guid>
      <description>原来一直在blogchina上面混，最近公司里面一直使用MSN，发觉同学们的spaces都很好看，而且发觉了他们的另外一面，所以就决定搬家，在这里搭窝，呵呵。</description>
    </item>
    
    <item>
      <title>硬盘报销了</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%A1%AC%E7%9B%98%E6%8A%A5%E9%94%80%E4%BA%86/</link>
      <pubDate>Sat, 30 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%A1%AC%E7%9B%98%E6%8A%A5%E9%94%80%E4%BA%86/</guid>
      <description>实习了才知道，原来周末真的是用来休息的。好不容易休息了，却又多出很多的事情。上午把blog搬到了msn，中午刚想看积累了好久的火影、海贼王和死神，没想到硬盘却这个时候报销了……MM嘲笑我说是BT过了头，我顿时语塞，想想这块serve了我四年的硬盘（已经是serve的最长的硬盘了，我电脑上的东西基本没有长寿的）突然没了，内心无限郁闷。其实本来实习以后就没什么机会看片子了，所以这次也一了百了，干脆改了看动画片的习惯，也免得MM说我幼稚。</description>
    </item>
    
    <item>
      <title>第一名不好当</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%AC%AC%E4%B8%80%E5%90%8D%E4%B8%8D%E5%A5%BD%E5%BD%93/</link>
      <pubDate>Sat, 30 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%AC%AC%E4%B8%80%E5%90%8D%E4%B8%8D%E5%A5%BD%E5%BD%93/</guid>
      <description>下午花了点时间看超级女生，觉得第一名其实也不好，缺乏竞争其实也缺乏前进的动力。高高在上的感觉不好，没了竞争，没了动力去进步，以为天下唯我独尊，反而限制了自己的更大的发展空间。这时隔壁的兄弟冲过来嘲讽我看这种幼稚玩意儿，给我展示了一个俄罗斯新近红起来的歌手，哇塞，那个高音实在太恐怖了。可惜我俄语完全不懂，连名字也拼不来，这年头不懂语言真吃亏。</description>
    </item>
    
    <item>
      <title>讲话学习</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%AE%B2%E8%AF%9D%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 30 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%AE%B2%E8%AF%9D%E5%AD%A6%E4%B9%A0/</guid>
      <description>又是文件学习，学习关于政治思想教育的文件和江泽民同志的讲话。主要思考七个问题：
 支部党员的先进性体现在哪里 那几点没有表现出先进性 党员先进性的具体标准是什么 支部战斗堡垒作用体现在哪里 那些方面表现出战斗堡垒作用 战斗堡垒作用的具体标准 那些方面还需要改进  朱剑冰认为必须保持共产主义的理想信念，提高自己的专业知识和号召力，先进性体现于为人民服务。管晓琦认为首先要关心同学，然后还要能经常组织活动，要全心全意为同学服务，同时必须注意还存在迟到的情况，要能够节约能源。钱晔蕾提出优秀的共产党员必须具备以上的品质，要不断提高党性修养，从身边的小事做起，处理好个人发展同自我思想培养之间的平衡关系，尤其是理论学习。曾惠惠则认为党员必须坚定信念，全心全意为人民服务，要艰苦朴素、好好学习，积极参加活动，但是还存在教育群众力度还不够，主动性差和窗性能力不够的情况。李睿阳又作了创新发言，既然做了就要积极，要注意看别人先进的地方，同时价值观念和学习方法允许多样化。</description>
    </item>
    
    <item>
      <title>先进性何在</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%85%88%E8%BF%9B%E6%80%A7%E4%BD%95%E5%9C%A8/</link>
      <pubDate>Fri, 29 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%85%88%E8%BF%9B%E6%80%A7%E4%BD%95%E5%9C%A8/</guid>
      <description>先进也是多样化的，正如同价值取向一般。
 历史唯物主义告诉我们历史造就伟人，党更够胜利不仅在于先进，更在于顺天意顺民情，说明领导和教育并重。先进性教育除了保持党员本身先进外，更保持了人民心目中的先进。有堵枪眼的先进，有为人民工作劳累的先进，也有努力建设的先进，关键在于党在危急时，站出来的先进。但我认为应当允许各种先进，一种模子的先进不可取。从我做起不是到我结束，先进是小我和大我的斗争。而且光下面人先进也不行，上面人是筛子，会筛去同上面最亲近的人。保先意在争先，让我们一起努力吧。</description>
    </item>
    
    <item>
      <title>参观周公馆</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8F%82%E8%A7%82%E5%91%A8%E5%85%AC%E9%A6%86/</link>
      <pubDate>Fri, 29 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8F%82%E8%A7%82%E5%91%A8%E5%85%AC%E9%A6%86/</guid>
      <description>参观了周公馆，又到了学习文件的时候。大家又展开了热烈的讨论。邹国兵认为培养大学生思想素质能够推动建设小康社会，其指导思想、基本原则和主要任务分别是：（1）马列主义、毛泽东思想、邓小平理论、江泽民同志关于三个代表重要思想以及十六个字的哲学思想；（2）坚持教书育人、教育和自我教育，坚持理论联系实践；（3）培养正确的理想信念和三观，坚持爱国民族、公民道德和全面素质的培养。达同志总结了自我培养的方法：（1）淡泊名利，无私奉献；（2）保持对党的热情；（3）要“习惯于”提高素养；（4）勤于奉献。管晓琦也发表了自己的看法，认为保持先进性是历史的选择，中国共产党经历了解放、发展的过程，保持先进还要得到人民群众的支持。钱晔蕾则提出，保持先进性要求在不同的时期是不同的，但不变的是理想信念。任志清认为党员首先要学习俭朴，要同情弱者，同时对待工作认真负责，并能虚心请教他人。蔡闻怡觉得保先要有实效，要避免表面化和走过场，研究生保先后要有新面貌。戴珮璟认为技术先进才是最要的。李睿阳又发表了独到的见解，古人就懂得强兵强国，强大要表现，不表现没用，党员要看清现实，注重发展并表现自己的先进性。</description>
    </item>
    
    <item>
      <title>叶志明动员报告</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%8F%B6%E5%BF%97%E6%98%8E%E5%8A%A8%E5%91%98%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Fri, 29 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%8F%B6%E5%BF%97%E6%98%8E%E5%8A%A8%E5%91%98%E6%8A%A5%E5%91%8A/</guid>
      <description>党员先进性的首场报告就是叶志明做的，叶校长对关于研究生的每次重要活动都很关注，这次也提出了三点看法。党的先进性不等于党员的先进性（非常同意，不然也不会出现这么多污点了）；党员先进性促进了党的先进性发展（没错，纵观历史都是如此）；党依靠党员的先进性得到人民的认同。不愧是校长，总结的就是好呀。</description>
    </item>
    
    <item>
      <title>形势报告会（吕鹏）记录</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%BD%A2%E5%8A%BF%E6%8A%A5%E5%91%8A%E4%BC%9A%E5%90%95%E9%B9%8F%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 29 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%BD%A2%E5%8A%BF%E6%8A%A5%E5%91%8A%E4%BC%9A%E5%90%95%E9%B9%8F%E8%AE%B0%E5%BD%95/</guid>
      <description>1 胡锦涛科学发展观 2 大国是关键，周边是重点，发展中国家是基础 3 对台政策新决策：化解两岸僵持局面，台湾领导人频频访华 4 认真务实，解放思想，实事求是，与时俱进的哲学思想 5 连战等访问大陆，中央持新思维：坚持一个中国+和平统一
当前中日关系 1 中日关系矛盾多，已达历史最低点 2 日本触犯了众怒，责任在日本：小泉参拜靖国神社，致使终日铁路建设受影响，文化交流受影响，钓鱼岛问题，日本插手台湾，抢夺东海气田，修改历史教科书，战争个人赔款，争夺安理会常任理事国 R1 日本侵略行径没有得到清算 R2 日本美化杀人行径，是通过学习培养出来的 R3 日本经济低迷，而中国发达</description>
    </item>
    
    <item>
      <title>文件学习</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 29 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/</guid>
      <description>在文件学习中，大家都提出了很多很好的想法。管晓琦认为开展县进行教育是大势所趋，因为党的先进性由党员的先进性所体现，并对研究生党员的职责进行了阐述，认为位同学服务是我们首要的任务。孟蓉霞认为保先关系重大，尤其是领导干部更需体现先进性，而研究生党员除了要懂知识，还要能够为学生服务，坚持保先不走形式。任志清认为党员生活要俭朴，学习要刻苦，还要多参与各种活动，多关注社会，要认真做好每件事情。李全威则提出保先不是口号，而是从小事做起，做学问到做人，提高自身修养。张东对所看的电影也提出了自己的想法，他认为任长霞只是广大党员中的一位，不是她突出，而是其他人落后了，同时张东提出保先也是一种学习，要向身边人学习，要交流。钱书记补充道：党员的确有许多“应该要做”的事情。李彦指出研究生党员其实影响到整个学校的工作，而且可塑性强，应当加强保先。冷同志也提出不变得是为人民服务，而且要从我做起。戴佩景则认为保持先进性还在于提高业务能力，同时也强调了交流的重要性。李睿阳更是提出了自己的独到见解，他认为保先源于存在落后之处，目前党的执政环境恶劣，保先实质上是为了求发展，不仅要自身发展，更要造福人民，除了精英党员外，基层党员更要保持先进。</description>
    </item>
    
    <item>
      <title>穷人政治和富人政治</title>
      <link>http://blog.zhouyiyan.cn/blog/%E7%A9%B7%E4%BA%BA%E6%94%BF%E6%B2%BB%E5%92%8C%E5%AF%8C%E4%BA%BA%E6%94%BF%E6%B2%BB/</link>
      <pubDate>Fri, 29 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E7%A9%B7%E4%BA%BA%E6%94%BF%E6%B2%BB%E5%92%8C%E5%AF%8C%E4%BA%BA%E6%94%BF%E6%B2%BB/</guid>
      <description>我关心穷人，但我必须是富人。
 穷人政治关心穷人的利益，即社会大多数人的利益，能够很好的为穷人利益着想。但当面对富人时，穷人政治家如何抵抗“好日子”的诱惑而不“沦为”富人至关重要，一旦脱离了自己的地位就会产生变质。富人政治关心富人的利益，因为本身大多是富人，即使心是好的，但往往会脱离实际进入乌托邦的境地。
中国共产党是执政党，从工人阶级先锋队到全国人民先锋队，党依旧是大多数人的党。中国共产党宣称自己没有特殊的利益，但事实上每个党员却又自身普通的利益，党的上级领导总比下级领导的生活质量好，党内部也产生了纵向的利益不均。什么决定利益的分配，我认为应当是才能。可那些没有才能却身居高位的党员怎么办？那些本身所处环境就普遍素质低下的党员怎么办？谁来关心他们的利益？
人面对诱惑是总有冲动，党员也并非生来就不能腐化，不然就违反了自然定律，党员在危急时刻能够成为钢铁长城，可是和平年代呢？失去了敌人和斗志的党员该怎么调整自己的心态。因此最好的办法是让有才能的人执政，因为没有才能的人会筛去有才能的人，使得有才能的人无法得到发挥。可是让有才能的人得到地位的提升，最终又变成富人政治了，因为他们更加理所应当的获得更多的利益。唉，政治本身就是一种怪圈。</description>
    </item>
    
    <item>
      <title>观《任长霞》有感</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%A7%82%E4%BB%BB%E9%95%BF%E9%9C%9E%E6%9C%89%E6%84%9F/</link>
      <pubDate>Fri, 29 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%A7%82%E4%BB%BB%E9%95%BF%E9%9C%9E%E6%9C%89%E6%84%9F/</guid>
      <description>最近党组织搞先进性教育活动，组织我们党员观看电影《任长霞》。看完后有几点体会：对于个人来说，注意身体健康和交通安全是最重要的，而对于国家来说，健全的警务制度和完善的保障体系也很重要。
任长霞同志真的无愧为一名优秀的共产党员，她为自己的警务事业，为人民服务到最后一分一秒，受到老百姓的爱戴与尊敬。虽然任长霞同志如此的优秀，先进等云云，但是我内心中仍然有这样一个疑问，而且我相信在大多数人内心中也有同样的疑问：为什么任长霞没有死于坏人的打击报复，没有过度疲劳而导致的胃癌什么的，反而死于一场普通的交通事故？
退一万步来看，尽管任长霞同志如此优秀，但除了党性修养以外，对事业的热爱也占主要因素。我现在实习的地方就有这样一个人，他每天都加班，而且都很自觉没有休息时间，同事和领导们都对他赞誉有加。我觉得对事业的热爱并非党员的专有，而任长霞主要的突出之处在于警务工作的特殊性所致，即容易遭到坏人的仇恨，但是每个警察都是党员吗？不是的，党员的先进究竟突出在哪里？
也许党员也是普通人，可能只是比普通人的优秀品质更多一些，但我觉得党员的关键不在于优秀，而在于信仰和精神，脱离了这两点，其他根普通好人、强人无异。</description>
    </item>
    
    <item>
      <title>领导和管理</title>
      <link>http://blog.zhouyiyan.cn/blog/%E9%A2%86%E5%AF%BC%E5%92%8C%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 29 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E9%A2%86%E5%AF%BC%E5%92%8C%E7%AE%A1%E7%90%86/</guid>
      <description>管理是一门技术，统治者因擅长管理而成为统治者。
 过去领导总是高高在上的，而且人们也总是认为有才能的人必然党领导。其实不然，至少在技术领域，管理俨然是另一门技术，管理和被管理已经从简单的从事关系转化为横向分工的一种。执政也是如此。并非谁思想好，老实，就能够执政。执政是一种技术，是一种能力，不紧随时代发展是不行的，没有科学的方法是不行的。但我们看到了什么？除了GDP增长率外，怎样衡量政府的有效性呢？先进性教育还是先好好学习吧，思想和能力同样重要。</description>
    </item>
    
    <item>
      <title>IBM面试</title>
      <link>http://blog.zhouyiyan.cn/blog/ibm%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Tue, 12 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/ibm%E9%9D%A2%E8%AF%95/</guid>
      <description>昨天接到了IBM面试的通知，心里一阵兴奋（其实已经觉得自己没什么希望了）。今天又跑到瑞安广场，这次没有迟到，接待我的还是上次那个MM，但是却叫了另一个MM面试官。被问了好多关于Java和测试的问题，也大致猜到实习的内容，但是觉得自己还是很差劲，基本上什么都不知道，大学真是白读了。还好自己平时就很爱瞎侃，随便聊了一点看过的东西，面试官觉得挺新奇，认为我还是关心新技术的。还有自己的英语是在糟糕，老把C++念成“C++”，呵呵。最后面试官MM说会让另一个技术人员跟我谈，就让我回去了。唉，漫长的等待又继续着……</description>
    </item>
    
    <item>
      <title>Perling~</title>
      <link>http://blog.zhouyiyan.cn/blog/perling~/</link>
      <pubDate>Tue, 12 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/perling~/</guid>
      <description>深入接触 Eiffel以后，觉得Eiffel实在是个资源投入小的语言，还需要进行相当长的发展才行，而且即使是Eiffel领域内也存在各种不同的声音，大家都对这个世界上最理想的开发语言持有自己不同的看法，争论的人多了，反而觉得很郁闷，而且还有很多“复辟”的想法…… 于是我便改看Perl的书，发掘Perl的定位就很好，Perl不以万能语言为目标，避开C++和Java的竞争，专在Web、文本处理和正则表达式方面做文章，还有专门人维护的模块网站，充分利用模块充用，用于开发程序员小工具是再好不过的。</description>
    </item>
    
    <item>
      <title>星球大战：潜伏的威胁</title>
      <link>http://blog.zhouyiyan.cn/blog/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98%E6%BD%9C%E4%BC%8F%E7%9A%84%E5%A8%81%E8%83%81/</link>
      <pubDate>Tue, 12 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98%E6%BD%9C%E4%BC%8F%E7%9A%84%E5%A8%81%E8%83%81/</guid>
      <description>再次重新回顾星战六步曲，别有一番滋味。继指环王、黑客帝国和哈里波特后，星战又成为下一部BC要啃的系列。第一部主要发生在那卜、塔土因和共和国，贸易联邦受西斯控制，强行占领那卜，那卜女皇（纳塔莉.波特曼哦，矮矮小小的，BC的最爱）在杰达武士的指引下到共和国向议会求救，途中在塔土因召了个伙伴，也是将来最强的天行者（怎么看天行者这个时候都比女皇小很多，真想不到将来他们会……）。后来女皇意识到议会无法帮助她，就决定和那卜的刚耿族（比较原始的部落，但熔岩球威力惊人，^_^）结盟，夺回那卜星球。那卜女皇使用了技巧制服了贸易联邦的指挥官，同时天行者在原力的指引下完全破坏了贸易联邦的指挥舰（竟然这么容易被击败，晕~），赢得了最终的自由。
其实比较好看的也就两个地方，一个是天行者飞车比赛，很紧张很刺激，另一个就是那卜夺回战了，BC最喜欢大场面的战斗场景（除了国产的那种），所以最喜欢看方阵了。那种灯管一阵乱打的没什么劲，一般性，还是飞机到处飞有意思。</description>
    </item>
    
    <item>
      <title>SmartEiffel</title>
      <link>http://blog.zhouyiyan.cn/blog/smarteiffel/</link>
      <pubDate>Tue, 03 May 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/smarteiffel/</guid>
      <description>SmartEiffel 是一个GNU的Eiffel语言编译器，号 称最快最小而且免费（这是最关键的）。本来是想用EiffelStudio写一个MPI 子库的，计划用Socket，但是EiffelStudio不提供EiffelNet库（用来做socket编程），真是要命，只好去找其他的编译器，正好找到SmartEiffel。现在正在看相关的文档，也订阅了邮件列表，看来Eiffel还是很值得好好学学的。</description>
    </item>
    
    <item>
      <title>Eiffel学习</title>
      <link>http://blog.zhouyiyan.cn/blog/eiffel%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 01 May 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/eiffel%E5%AD%A6%E4%B9%A0/</guid>
      <description>刚下载好EiffelStudio 5.5，感觉上已经没有了读《对象揭秘：Java、Eiffel和C++》时的那种冲动，Eiffel作为一种商业产品，很多库都不是免费的，而Java 的库好像都是免费的。是不是要继续研究Eiffel呢？还是去看看Perl或者Python？真麻烦呀……</description>
    </item>
    
    <item>
      <title>天黑黑</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%A4%A9%E9%BB%91%E9%BB%91/</link>
      <pubDate>Fri, 29 Apr 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%A4%A9%E9%BB%91%E9%BB%91/</guid>
      <description>天黑黑，吃西瓜，洗个澡，做一回傻瓜。
 今天天气挺坏又闷又热的，看了一部宣传416游行的片子，感觉傻人是挺多的，不过如果打人不算违法，我也确实想到几个很想打一顿的人。不过还好，我的压力还没这么大到需要发泄的程度。下午PJ给我买了西瓜，花了11块钱，总觉得不值得，但是能和PJ一块儿吃，心里还是挺美了。外面黑漆漆的，一会儿下雨一会儿又不下，热死了，于是便洗了个澡，刚洗完又是一头汗，等会儿肯定又会被说一通，算了，谁让咱是男人呢，做几回傻瓜也没什么错。</description>
    </item>
    
    <item>
      <title>强人日记开场白</title>
      <link>http://blog.zhouyiyan.cn/blog/%E5%BC%BA%E4%BA%BA%E6%97%A5%E8%AE%B0%E5%BC%80%E5%9C%BA%E7%99%BD/</link>
      <pubDate>Fri, 29 Apr 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E5%BC%BA%E4%BA%BA%E6%97%A5%E8%AE%B0%E5%BC%80%E5%9C%BA%E7%99%BD/</guid>
      <description>世界上有很多人，但是我认为只有两种人，强人和普通人。
 昨天下午在学校图书馆看书，先是翻了一本《历史哲学》，没看完前言就扔在了一边。后来又找到《美国性学史》，但是看了看尽是一些无聊的东西。最后找到了一本心理测验的书《世界五百强企业的面试技巧》，做完了所有测试（除了智力测验，因为觉得老了，没必要再测智力了），对其中的一个测试突发奇想。这是一个系统测试（开始我并不明白为什么这个测试叫系统测试），通过给定一个对应表（左边字母，右边图形），要求对下面的图形集进行翻译，给出对应的字母集，而且每页上面的对应表都是不同的。
本来对自己挺有自信的，但是做下来的成绩并不出色，看了说明才知道。这个测试之所以叫系统就是考验你解决问题的方式，一般做这个测试的方法有三种：一般人总是一个问题一个问题的解决，看一个图形寻找对应的字母；有些人则会先把相同图形的字母全部填上，然后再填其他没有填过的空格，这是一种全局组织的能力，把问题看成统一的整体，速度就明显比一般人快乐；还有些人则使用记忆的方式，开始的速度很快，但是每次对应表扩充或者更改以后，他们的速度就减慢下来了。
三种方式充分说明三种思维方式，第一种人当然就是普通人，他们用惯用的思维处理问题；第二种人就是善于思考的人，他们对于问题总是考虑使用最简单的方法；第三种人就是很有资质的人，他们相信自己的资质配合简单的技巧总是能够顺利地解决问题。很明显后面两种人就是强人，一个拥有很好的资质，另一个拥有很好的思维方式，这都是普通人所不及的。普通人也需通过努力能够达到第二种人的程度，但是最可怕的就是又有资质又很有能力的人，拿什么跟他们拼啊！</description>
    </item>
    
    <item>
      <title>资质和能力</title>
      <link>http://blog.zhouyiyan.cn/blog/%E8%B5%84%E8%B4%A8%E5%92%8C%E8%83%BD%E5%8A%9B/</link>
      <pubDate>Fri, 29 Apr 2005 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhouyiyan.cn/blog/%E8%B5%84%E8%B4%A8%E5%92%8C%E8%83%BD%E5%8A%9B/</guid>
      <description>资质是骨骼的强度，能力是你练的功夫。
 最讨厌听到的话就是“世界上没有最好的XX”，这种否定绝对的论调听上去似乎是辩证的，但是却是对现实差距的一种逃避。世界上没有最好的，所以剩下的都是不可比的。错！大错！大错特错！事物总是存在可比性，但是人们总是尽量去回避这些“伤感情”的话题，比如说资质。因为缺乏实际的采集方法，人们对资质总有着各种神奇的看法，比如说“资质不能决定一切”等等。
资质是什么呢？资质就竟能决定什么？
个人认为，资质与生俱来的能力，是变化的，但是是有极限的。而能力则是后天培养的，一旦形成很难改变，但却拥有无穷的可能性。什么是资质呢？骨骼的强度，视觉神经的分辨率和刷新频率，脑神经的处理速度，肌肉的反应等等。以骨骼强度为例，纵使你有再强的肌肉，但是超出了骨骼的强度，你还是不能打出很厉害的拳，因为骨骼已经在最强力到达之前就折断了。资质是变化的，因为随着年龄的增长，人的骨骼强度会产生不同的变化，但又是有极限的，骨骼强度总是遵循一定的生长发育的规律。
能力则不同，能力是一种习惯，是一种思维模式，是一种方法，当你处理问题的时候，你就会发现你的能力和别人能力的不同，一些人能够很快的想出应对方案，一些人则持保守的态度，虽然努力但效率不高。但是能力也是一种很难改变的东西，一旦人成为了右撇子，人就不太再会使用左手了。作为一种习惯，人能养成的习惯远比与生俱来的资质要多得多。
资质不能决定一切，但资质能够决定你获得能力的概率，而能力则直接与某件事情成功相关联，虽然资质已经定了，但是在限定的资质下获得最大的稀缺能力，这才是通往成功的道路。</description>
    </item>
    
  </channel>
</rss>